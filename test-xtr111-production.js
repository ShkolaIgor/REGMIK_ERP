/**
 * –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—É XTR111 –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è - –ø–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ production –ø—Ä–æ–±–ª–µ–º–∏
 */

import { DatabaseStorage } from './server/db-storage.js';

async function testXTR111ProductionIssue() {
  console.log('üî• =======  –¢–ï–°–¢ XTR111 PRODUCTION –ü–†–û–ë–õ–ï–ú–ò =======');
  
  const storage = new DatabaseStorage();
  
  try {
    console.log('üîç 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑ XTR —Ç–∞ XL —É –±–∞–∑—ñ...');
    const allComponents = await storage.getComponents();
    const relevantComponents = allComponents.filter(c => 
      c.name.toLowerCase().includes('xtr') || 
      c.name.toLowerCase().includes('xl2596')
    );
    
    console.log('üìã –ó–Ω–∞–π–¥–µ–Ω—ñ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏:');
    relevantComponents.forEach(c => {
      console.log(`   - ID: ${c.id}, –ù–∞–∑–≤–∞: "${c.name}"`);
    });
    
    console.log('\nüîç 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è...');
    const mappings = await storage.getProductNameMappings();
    const xtrMappings = mappings.filter(m => 
      m.externalProductName.toLowerCase().includes('xtr')
    );
    
    console.log('üìã –Ü—Å–Ω—É—é—á—ñ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è XTR:');
    xtrMappings.forEach(m => {
      console.log(`   - "${m.externalProductName}" ‚Üí "${m.erpProductName}" (ID: ${m.erpProductId}, confidence: ${m.confidence})`);
    });
    
    console.log('\nüîç 3. –¢–µ—Å—Ç—É—î–º–æ –ø—Ä—è–º–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º findSimilarComponent...');
    const directResult = await storage.findSimilarComponent("–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111");
    console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:', directResult);
    
    console.log('\nüîç 4. –¢–µ—Å—Ç—É—î–º–æ –ø–æ–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º findProductByAlternativeName...');
    const fullResult = await storage.findProductByAlternativeName("–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111", "1C");
    console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:', fullResult);
    
    console.log('\nüîç 5. –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ç–µ—Å—Ç—É—î–º–æ –∑–Ω–æ–≤—É...');
    // –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
    await storage.deleteProductNameMapping("–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111", "1C");
    
    const cleanResult = await storage.findProductByAlternativeName("–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111", "1C");
    console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω—å:', cleanResult);
    
    console.log('\nüî• =======  –ó–ê–í–ï–†–®–ï–ù–ù–Ø –¢–ï–°–¢–£ =======');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testXTR111ProductionIssue().catch(console.error);