#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
 */

import fetch from 'node-fetch';

async function testServerStatus() {
    console.log('=== –¢–ï–°–¢ –°–¢–ê–¢–£–°–£ –°–ï–†–í–ï–†–ê –ü–Ü–°–õ–Ø –û–ù–û–í–õ–ï–ù–ù–Ø ===\n');
    
    const baseUrl = 'http://localhost:3000';
    
    try {
        // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
        console.log('üîç –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è...');
        const healthResponse = await fetch(`${baseUrl}/`, {
            timeout: 5000
        });
        console.log(`   –°—Ç–∞—Ç—É—Å: ${healthResponse.status}`);
        
        if (healthResponse.ok) {
            console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î');
        } else {
            console.log('   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return;
        }
        
    } catch (error) {
        console.log('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è:', error.message);
        console.log('\nüöÄ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
        try {
            const { startServer } = await import('./server/index.js');
            await startServer();
            console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ');
        } catch (startError) {
            console.log('   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä:', startError.message);
        }
        return;
    }
    
    // –¢–µ—Å—Ç 2: API —Å—Ç–∞—Ç—É—Å
    console.log('\nüîç –¢–µ—Å—Ç 2: API —Å—Ç–∞—Ç—É—Å...');
    try {
        const apiResponse = await fetch(`${baseUrl}/api/1c/invoices`, {
            timeout: 10000
        });
        console.log(`   –°—Ç–∞—Ç—É—Å: ${apiResponse.status}`);
        
        if (apiResponse.ok) {
            const data = await apiResponse.json();
            console.log(`   ‚úÖ API –ø—Ä–∞—Ü—é—î, –æ—Ç—Ä–∏–º–∞–Ω–æ: ${data?.length || 0} –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö`);
        } else {
            const errorText = await apiResponse.text();
            console.log(`   ‚ùå API –ø–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 100)}...`);
        }
    } catch (error) {
        console.log(`   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 3: –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏
    console.log('\nüîç –¢–µ—Å—Ç 3: –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏...');
    try {
        const outgoingResponse = await fetch(`${baseUrl}/api/1c/outgoing-invoices`, {
            timeout: 10000
        });
        console.log(`   –°—Ç–∞—Ç—É—Å: ${outgoingResponse.status}`);
        
        if (outgoingResponse.ok) {
            const data = await outgoingResponse.json();
            console.log(`   ‚úÖ –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å, –æ—Ç—Ä–∏–º–∞–Ω–æ: ${data?.length || 0} —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
        } else {
            const errorText = await outgoingResponse.text();
            console.log(`   ‚ùå –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ –ø–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 100)}...`);
        }
    } catch (error) {
        console.log(`   ‚ùå –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: ${error.message}`);
    }
    
    console.log('\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û ===');
}

testServerStatus().catch(console.error);