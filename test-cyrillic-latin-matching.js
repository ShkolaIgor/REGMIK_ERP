// –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–∏—á–Ω–æ-–ª–∞—Ç–∏–Ω—Å—å–∫–æ–≥–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤
// –ü—Ä–∏–∫–ª–∞–¥: 74–ù–°04D –º–∞—î –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ 74HC04D

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∏—Ä–∏–ª–∏—á–Ω–æ-–ª–∞—Ç–∏–Ω—Å—å–∫–æ–≥–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤...\n');

// –¢–µ—Å—Ç–æ–≤—ñ –≤–∏–ø–∞–¥–∫–∏
const testCases = [
  {
    input: '74–ù–°04D',
    expected: '74HC04D',
    description: '–ù‚ÜíH, –°‚ÜíC (–º—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ HC —Å–µ—Ä—ñ—ó)'
  },
  {
    input: '–ö–†580–í–ú80–ê',  
    expected: 'KP580BM80A',
    description: '–ö‚ÜíK, –†‚ÜíP, –í‚ÜíB, –ú‚ÜíM, –ê‚ÜíA (—Ä–∞–¥—è–Ω—Å—å–∫–∞ –º—ñ–∫—Ä–æ—Å—Ö–µ–º–∞)'
  },
  {
    input: '–¢–ú–°34010',
    expected: 'TMC34010', 
    description: '–¢‚ÜíT, –ú‚ÜíM, –°‚ÜíC (–ø—Ä–æ—Ü–µ—Å–æ—Ä TI)'
  },
  {
    input: '–ê–¢89–°51',
    expected: 'AT89C51',
    description: '–ê‚ÜíA, –¢‚ÜíT, –°‚ÜíC (–º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä Atmel)'
  },
  {
    input: '–ù–ï555–†',
    expected: 'HE555P',
    description: '–ù‚ÜíH, –ï‚ÜíE, –†‚ÜíP (—Ç–∞–π–º–µ—Ä)'
  },
  {
    input: 'D–§10–°',
    expected: 'DF10C',
    description: '–§‚ÜíF, –°‚ÜíC (–¥—ñ–æ–¥, –∑–º—ñ—à–∞–Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü—è/–ª–∞—Ç–∏–Ω–∏—Ü—è)'
  }
];

// –§—É–Ω–∫—Ü—ñ—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó (–∫–æ–ø—ñ—è –∑ backend)
function normalizeProductName(name) {
  return name
    .toLowerCase()
    // –ö–†–û–ö 1: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ö–æ–∂—ñ –∫–∏—Ä–∏–ª–∏—á–Ω–æ-–ª–∞—Ç–∏–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ 
    .replace(/[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•–§–∞–≤–µ–∫–º–Ω–æ—Ä—Å—Ç—É—Ö—Ñ]/g, (match) => {
      const cyrLatinMap = {
        // –í–µ–ª–∏–∫—ñ –±—É–∫–≤–∏ (—Å—Ö–æ–∂—ñ –∑–∞ –Ω–∞–ø–∏—Å–æ–º)
        '–ê': 'a', '–í': 'b', '–ï': 'e', '–ö': 'k', '–ú': 'm', '–ù': 'h', 
        '–û': 'o', '–†': 'p', '–°': 'c', '–¢': 't', '–£': 'y', '–•': 'x', '–§': 'f',
        // –ú–∞–ª—ñ –±—É–∫–≤–∏ (—Å—Ö–æ–∂—ñ –∑–∞ –Ω–∞–ø–∏—Å–æ–º)
        '–∞': 'a', '–≤': 'b', '–µ': 'e', '–∫': 'k', '–º': 'm', '–Ω': 'h',
        '–æ': 'o', '—Ä': 'p', '—Å': 'c', '—Ç': 't', '—É': 'y', '—Ö': 'x', '—Ñ': 'f'
      };
      return cyrLatinMap[match] || match;
    })
    .toLowerCase()
    .replace(/[\s\-_\.\/\\]/g, '') // –í–∏–¥–∞–ª—è—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ
    .replace(/[()[\]{}]/g, '') // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–∂–∫–∏
    .replace(/[–∞-—è—ë]/g, (match) => { // –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ä–µ—à—Ç–∏
      const map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '—ñ': 'i', '—ó': 'yi', '—î': 'ye', '“ë': 'g'
      };
      return map[match] || match;
    })
    .replace(/[^a-z0-9]/g, '')
    .trim();
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤
let passedTests = 0;
let totalTests = testCases.length;

testCases.forEach((test, index) => {
  const normalizedInput = normalizeProductName(test.input);
  const normalizedExpected = normalizeProductName(test.expected);
  const isMatch = normalizedInput === normalizedExpected;
  
  console.log(`–¢–µ—Å—Ç ${index + 1}: ${test.description}`);
  console.log(`   –í—Ö—ñ–¥: "${test.input}" ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: "${normalizedInput}"`);
  console.log(`   –û—á—ñ–∫—É—î—Ç—å—Å—è: "${test.expected}" ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: "${normalizedExpected}"`);
  console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${isMatch ? '‚úÖ –ó–ë–Ü–ì' : '‚ùå –ù–ï –ó–ë–Ü–ì'}`);
  console.log('');
  
  if (isMatch) passedTests++;
});

console.log(`üìä –ü—ñ–¥—Å—É–º–æ–∫: ${passedTests}/${totalTests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${Math.round(passedTests/totalTests*100)}%)`);

if (passedTests === totalTests) {
  console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –ö–∏—Ä–∏–ª–∏—á–Ω–æ-–ª–∞—Ç–∏–Ω—Å—å–∫–µ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
} else {
  console.log('‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º.');
}