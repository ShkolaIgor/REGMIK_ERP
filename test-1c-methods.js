#!/usr/bin/env node

// –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç 1–° –º–µ—Ç–æ–¥—ñ–≤ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞
import pg from 'pg';
import { DatabaseStorage } from './server/db-storage.js';
import { drizzle } from 'drizzle-orm/neon-serverless';
import { Pool } from '@neondatabase/serverless';

const { Pool: PgPool } = pg;

async function test1CMethods() {
  console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è 1–° –º–µ—Ç–æ–¥—ñ–≤ –Ω–∞–ø—Ä—è–º—É...');
  
  try {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const db = drizzle(pool);
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è storage
    const storage = new DatabaseStorage(db);
    
    console.log('‚úÖ Storage —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    
    // –¢–µ—Å—Ç get1CInvoices
    console.log('\nüì• –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è get1CInvoices()...');
    try {
      const invoices = await storage.get1CInvoices();
      console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${invoices.length} –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö`);
      
      if (invoices.length > 0) {
        console.log(`   –ü–µ—Ä—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞: ${invoices[0].documentNumber || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
        console.log(`   –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫: ${invoices[0].supplierName || '–±–µ–∑ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞'}`);
        console.log(`   –°—É–º–∞: ${invoices[0].totalAmount || 0}`);
      }
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ get1CInvoices: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç get1COutgoingInvoices
    console.log('\nüì§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è get1COutgoingInvoices()...');
    try {
      const outgoing = await storage.get1COutgoingInvoices();
      console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${outgoing.length} –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
      
      if (outgoing.length > 0) {
        console.log(`   –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${outgoing[0].documentNumber || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
        console.log(`   –ö–ª—ñ—î–Ω—Ç: ${outgoing[0].customerName || '–±–µ–∑ –∫–ª—ñ—î–Ω—Ç–∞'}`);
        console.log(`   –°—É–º–∞: ${outgoing[0].totalAmount || 0}`);
      }
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ get1COutgoingInvoices: ${error.message}`);
    }
    
    await pool.end();
    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', error.message);
  }
}

test1CMethods();