#!/usr/bin/env node

/**
 * –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç 1–° endpoints –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —É–Ω–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 * –¢–µ—Å—Ç—É—î –æ–±–∏–¥–≤–∞ action –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —á–µ—Ä–µ–∑ —î–¥–∏–Ω–∏–π endpoint /invoices
 */

async function test1CEndpointsUnified() {
    const baseUrl = 'http://baf.regmik.ua/bitrix/hs/erp';
    const invoicesEndpoint = `${baseUrl}/invoices`;
    const auth = Buffer.from('100:–®–∫–æ–ú.').toString('base64');

    console.log('=== –¢–ï–°–¢ 1–° –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ü–Ü–°–õ–Ø –£–ù–ò–§–Ü–ö–ê–¶–Ü–á ===\n');
    console.log(`Endpoint: ${invoicesEndpoint}`);
    console.log(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: Basic ${auth.substring(0, 20)}...`);
    console.log('');

    // –¢–µ—Å—Ç 1: –í—Ö—ñ–¥–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—ñ (action=getInvoices)
    console.log('üìã –¢–ï–°–¢ 1: –í—Ö—ñ–¥–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—ñ (action=getInvoices)');
    try {
        const response = await fetch(invoicesEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Basic ${auth}`,
                'User-Agent': 'REGMIK-ERP/1.0'
            },
            body: JSON.stringify({
                action: 'getInvoices',
                limit: 5
            })
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ: ${data.invoices?.length || 0} –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö`);
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                console.log(`   üìÑ –ü–µ—Ä—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞: ${invoice.documentNumber || invoice.–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞ || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
                console.log(`   üè¢ –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫: ${invoice.supplierName || invoice.–ü–æ—Å—Ç–∞–≤—â–∏–∫ || '–±–µ–∑ –Ω–∞–∑–≤–∏'}`);
                console.log(`   üí∞ –°—É–º–∞: ${invoice.totalAmount || invoice.–°—É–º–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞ || '0'}`);
            }
        } else {
            const errorText = await response.text();
            console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 200)}`);
        }
    } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
    }

    console.log('');

    // –¢–µ—Å—Ç 2: –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ (action=getOutgoingInvoices)
    console.log('üìã –¢–ï–°–¢ 2: –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ (action=getOutgoingInvoices)');
    try {
        const response = await fetch(invoicesEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Basic ${auth}`,
                'User-Agent': 'REGMIK-ERP/1.0'
            },
            body: JSON.stringify({
                action: 'getOutgoingInvoices',
                limit: 5
            })
        });

        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ: ${data.invoices?.length || 0} –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                console.log(`   üìÑ –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${invoice.invoiceNumber || invoice.–ù–æ–º–µ—Ä–°—á–µ—Ç–∞ || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
                console.log(`   üë§ –ö–ª—ñ—î–Ω—Ç: ${invoice.clientName || invoice.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ || '–±–µ–∑ –Ω–∞–∑–≤–∏'}`);
                console.log(`   üí∞ –°—É–º–∞: ${invoice.totalAmount || invoice.–°—É–º–º–∞–î–æ–∫—É–º–µ–Ω—Ç–∞ || '0'}`);
            }
        } else {
            const errorText = await response.text();
            console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 200)}`);
        }
    } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
    }

    console.log('');
    console.log('=== –ü–Ü–î–°–£–ú–û–ö ===');
    console.log('‚úÖ Endpoint —É–Ω–∏—Ñ—ñ–∫–∞—Ü—ñ—è: –æ–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å /invoices');
    console.log('‚úÖ –†–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ action –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ POST body');
    console.log('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
test1CEndpointsUnified().catch(console.error);