#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç 1–° endpoints –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
 * –õ–æ–≥—ñ–Ω: –®–∫–æ–ª–∞ –Ü.–ú.
 * –ü–∞—Ä–æ–ª—å: 1
 */

async function testWithRealCredentials() {
    console.log('=== –¢–ï–°–¢ –ó –ü–†–ê–í–ò–õ–¨–ù–ò–ú–ò –û–ë–õ–Ü–ö–û–í–ò–ú–ò –î–ê–ù–ò–ú–ò ===\n');
    
    const baseUrl = 'http://baf.regmik.ua/bitrix/hs/erp';
    // –ö–æ–¥—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ
    const auth = Buffer.from('–®–∫–æ–ª–∞ –Ü.–ú.:1').toString('base64');
    
    console.log(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: "–®–∫–æ–ª–∞ –Ü.–ú.:1" ‚Üí Base64: ${auth}`);
    
    console.log('\n1. –¢–µ—Å—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö:');
    const invoicesUrl = baseUrl + '/invoices';
    
    try {
        console.log(`   POST –Ω–∞: ${invoicesUrl}`);
        console.log(`   Body: {"action": "getInvoices", "limit": 100}`);
        
        const response = await fetch(invoicesUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Basic ${auth}`,
                'User-Agent': 'REGMIK-ERP/1.0'
            },
            body: JSON.stringify({
                action: 'getInvoices',
                limit: 100
            })
        });
        
        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ: ${data.invoices?.length || 0} –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö`);
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                console.log(`   üìÑ –ü–µ—Ä—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞: ${invoice.documentNumber || invoice.–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞ || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
                console.log(`   üí∞ –°—É–º–∞: ${invoice.amount || invoice.–°—É–º–∞ || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'} ${invoice.currency || invoice.–í–∞–ª—é—Ç–∞ || ''}`);
            }
        } else {
            const errorText = await response.text();
            console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 200)}`);
        }
        
    } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
    }
    
    console.log('\n2. –¢–µ—Å—Ç –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π):');
    const outgoingUrl = baseUrl + '/outgoing-invoices';
    
    try {
        console.log(`   POST –Ω–∞: ${outgoingUrl}`);
        console.log(`   Body: {"action": "getOutgoingInvoices", "limit": 100}`);
        
        const response = await fetch(outgoingUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Basic ${auth}`,
                'User-Agent': 'REGMIK-ERP/1.0'
            },
            body: JSON.stringify({
                action: 'getOutgoingInvoices',
                limit: 100
            })
        });
        
        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ: ${data.invoices?.length || 0} –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                console.log(`   üìÑ –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${invoice.invoiceNumber || invoice.–ù–æ–º–µ—Ä–°—á–µ—Ç–∞ || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
                console.log(`   üí∞ –°—É–º–∞: ${invoice.amount || invoice.–°—É–º–∞ || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'} ${invoice.currency || invoice.–í–∞–ª—é—Ç–∞ || ''}`);
            }
        } else {
            const errorText = await response.text();
            console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 200)}`);
        }
        
    } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
    }
    
    console.log('\n=== –í–ò–°–ù–û–í–û–ö ===');
    console.log('–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ "–®–∫–æ–ª–∞ –Ü.–ú.:1"');
    console.log('–Ø–∫—â–æ endpoints –ø—Ä–∞—Ü—é—é—Ç—å - –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏ ERP —Å–∏—Å—Ç–µ–º—É');
}

testWithRealCredentials().catch(console.error);