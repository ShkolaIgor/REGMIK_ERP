// –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—É –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

// –Ü–º—ñ—Ç—É—î–º–æ API –∑–∞–ø–∏—Ç –¥–æ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
async function testCheckItemMapping(itemName) {
  try {
    const response = await fetch('http://localhost:5000/api/1c/invoices/check-mapping', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ itemName })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–ø–∏—Ç—É –¥–ª—è "${itemName}":`, error.message);
    return { isMapped: false, error: error.message };
  }
}

async function testComponentMatching() {
  console.log('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£ –ó–Ü–°–¢–ê–í–õ–ï–ù–ù–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í');
  
  // –¢–µ—Å—Ç–æ–≤—ñ –Ω–∞–∑–≤–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö 1–°
  const testCases = [
    '–ú—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä STM32F107VCT6',
    '–°—Ç–∞–±—ñ–ª—ñ—Ç—Ä–æ–Ω BZX84C3V3', 
    'DF10S',
    '–†–ü2-–£-110',
    '–†–µ–∑–∏—Å—Ç–æ—Ä 1–∫–û–º',
    '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä 100–º–∫–§',
    '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä 12345'
  ];
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
  console.log('='.repeat(60));
  
  for (const testCase of testCases) {
    console.log(`\nüîç –¢–µ—Å—Ç—É—î–º–æ: "${testCase}"`);
    
    const result = await testCheckItemMapping(testCase);
    
    if (result.isMapped) {
      console.log(`‚úÖ –ó–ù–ê–ô–î–ï–ù–û: ${testCase} ‚Üí ${result.mappedComponentName} (ID: ${result.mappedComponentId})`);
    } else {
      console.log(`‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û: ${testCase}`);
      if (result.error) {
        console.log(`   –ü–æ–º–∏–ª–∫–∞: ${result.error}`);
      }
    }
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testComponentMatching().catch(console.error);