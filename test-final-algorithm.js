#!/usr/bin/env node

/**
 * –û–°–¢–ê–¢–û–ß–ù–ò–ô –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–£ –ó–Ü–°–¢–ê–í–õ–ï–ù–ù–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ —Ç–∏–ø–∏ –∑–±—ñ–≥—ñ–≤ —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω—å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
 */

const testCases = [
  // ‚úÖ –†–ï–ó–ò–°–¢–û–†–ò - –Ω–æ–≤–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º normalizeResistorValue + matchResistorValues
  {
    input: "0603 4,7 kOm",
    expected: "R0603 4,7 kOm 1%",
    type: "–†–ï–ó–ò–°–¢–û–†–ò",
    description: "–ù–æ–º—ñ–Ω–∞–ª —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É ‚Üí –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º R"
  },
  
  // ‚úÖ –ú–Ü–ö–†–û–°–•–ï–ú–ò - –Ω–æ–≤–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º extractEnglishParts
  {
    input: "–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ TNY274GN-TL",
    expected: "TNY274GN-TL", 
    type: "–ú–Ü–ö–†–û–°–•–ï–ú–ò",
    description: "–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —á–∞—Å—Ç–∏–Ω –∑ –∫–∏—Ä–∏–ª–∏—á–Ω–æ-–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–∞–∑–≤–∏"
  },
  
  // ‚úÖ –ú–Ü–ö–†–û–°–•–ï–ú–ò - —á–∏—Å–ª–æ–≤—ñ –∑–±—ñ–≥–∏ (—ñ—Å–Ω—É—é—á–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)
  {
    input: "–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111",
    expected: "XTR 111  AIDGQR",
    type: "–ú–Ü–ö–†–û–°–•–ï–ú–ò", 
    description: "–ß–∏—Å–ª–æ–≤–∏–π –∑–±—ñ–≥ –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º (390 score)"
  },
  
  // ‚úÖ –î–Ü–û–î–ò - –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω—ñ –∑–±—ñ–≥–∏ –∫–æ–¥—ñ–≤ (—ñ—Å–Ω—É—é—á–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º)  
  {
    input: "–î—ñ–æ–¥ BAT54CW",
    expected: "BAT54C",
    type: "–î–Ü–û–î–ò",
    description: "–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –∑–±—ñ–≥ –∫–æ–¥—É –¥—ñ–æ–¥–∞ (1700 score)"
  },
  
  // ‚ùå –ë–õ–û–ö–£–í–ê–ù–ù–Ø - –Ω–∏–∑—å–∫–∏–π score –≤—ñ–¥–∫–∏–¥–∞—î—Ç—å—Å—è
  {
    input: "–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞ LD1117S33TR",
    expected: null,
    type: "–ë–õ–û–ö–£–í–ê–ù–ù–Ø",
    description: "–î—É–∂–µ –Ω–∏–∑—å–∫–∏–π score (10) - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–∫–∏–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
  },
  
  // ‚ùå –ë–õ–û–ö–£–í–ê–ù–ù–Ø - –∫–∞—Ç–µ–≥–æ—Ä—ñ–π–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
  {
    input: "–§—Ä–µ–∑–∞ –∫–æ–Ω—Ü–µ–≤–∞—è 12–º–º",
    expected: null, 
    type: "–ë–õ–û–ö–£–í–ê–ù–ù–Ø",
    description: "–§—Ä–µ–∑–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ—Ç—á–∏–∫–æ–º - –∫–∞—Ç–µ–≥–æ—Ä—ñ–π–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"
  }
];

async function runTests() {
  console.log('üß™ –ü–û–ß–ê–¢–û–ö –û–°–¢–ê–¢–û–ß–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£');
  console.log('=' .repeat(80));
  
  let passed = 0;
  let failed = 0;
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\nüîç –¢–ï–°–¢ ${i + 1}: ${testCase.type}`);
    console.log(`üìù –û–ø–∏—Å: ${testCase.description}`);
    console.log(`üì• –í—Ö—ñ–¥: "${testCase.input}"`);
    console.log(`üéØ –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${testCase.expected || '–ù–ï –ó–ù–ê–ô–î–ï–ù–û'}`);
    
    try {
      const encodedInput = encodeURIComponent(testCase.input);
      const response = await fetch(`http://localhost:5000/api/1c/invoices/check-mapping/${encodedInput}`);
      const result = await response.json();
      
      const actualComponent = result.found ? result.component.name : null;
      const isCorrect = actualComponent === testCase.expected;
      
      console.log(`üì§ –§–∞–∫—Ç–∏—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${actualComponent || '–ù–ï –ó–ù–ê–ô–î–ï–ù–û'}`);
      
      if (isCorrect) {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û');
        passed++;
      } else {
        console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù–û');
        failed++;
      }
      
    } catch (error) {
      console.log(`‚ùå –ü–û–ú–ò–õ–ö–ê –¢–ï–°–¢–£: ${error.message}`);
      failed++;
    }
  }
  
  console.log('\n' + '=' .repeat(80));
  console.log('üìä –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
  console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${passed}`);
  console.log(`‚ùå –ù–µ–≤–¥–∞–ª–æ: ${failed}`);
  console.log(`üìà –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: ${Math.round((passed / (passed + failed)) * 100)}%`);
  
  if (failed === 0) {
    console.log('üéâ –£–°–Ü–• –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –ê–õ–ì–û–†–ò–¢–ú –ì–û–¢–û–í–ò–ô –î–õ–Ø PRODUCTION!');
  } else {
    console.log('‚ö†Ô∏è  –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
runTests().catch(console.error);