import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

const UkrainianDateTest: React.FC = () => {
  const [testString, setTestString] = useState('22 –ª–∏–ø–Ω—è 2025 —Ä.');
  const [result, setResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  const testDateParsing = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/test-ukrainian-date-parsing', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ dateString: testString })
      });
      
      if (response.ok) {
        const data = await response.json();
        setResult(data);
      } else {
        setResult({ error: '–ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É' });
      }
    } catch (error) {
      setResult({ error: error instanceof Error ? error.message : '–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è' });
    } finally {
      setLoading(false);
    }
  };

  const testCases = [
    '22 –ª–∏–ø–Ω—è 2025 —Ä.',
    '15 –±–µ—Ä–µ–∑–Ω—è 2024',
    '1 —Å—ñ—á–Ω—è 2025 —Ä.',
    '30 –≥—Ä—É–¥–Ω—è 2024',
    '18.07.25—Ä.',
    '18.07.2025',
    '–≤—ñ–¥ 22 –ª–∏–ø–Ω—è 2025 —Ä.',
    '–≤—ñ–¥ 18.07.2025'
  ];

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –¥–∞—Ç</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex gap-2">
          <Input
            value={testString}
            onChange={(e) => setTestString(e.target.value)}
            placeholder="–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
          />
          <Button onClick={testDateParsing} disabled={loading}>
            {loading ? '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è...' : '–¢–µ—Å—Ç'}
          </Button>
        </div>

        <div className="flex flex-wrap gap-2">
          <span className="text-sm text-gray-600">–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä:</span>
          {testCases.map((testCase, index) => (
            <Badge
              key={index}
              variant="outline"
              className="cursor-pointer hover:bg-gray-100"
              onClick={() => setTestString(testCase)}
            >
              {testCase}
            </Badge>
          ))}
        </div>

        {result && (
          <Card className={result.error ? 'border-red-200 bg-red-50' : result.isValid ? 'border-green-200 bg-green-50' : 'border-yellow-200 bg-yellow-50'}>
            <CardContent className="pt-4">
              <div className="space-y-2">
                <div><strong>–í–≤–µ–¥–µ–Ω–æ:</strong> {result.input || testString}</div>
                {result.error ? (
                  <div className="text-red-600"><strong>–ü–æ–º–∏–ª–∫–∞:</strong> {result.error}</div>
                ) : (
                  <>
                    <div><strong>–°—Ç–∞—Ç—É—Å:</strong> {result.isValid ? '‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ' : '‚ùå –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ'}</div>
                    {result.parsedDate && (
                      <div><strong>–ü–∞—Ä—Å–∏–Ω–≥ ISO:</strong> {result.parsedDate}</div>
                    )}
                    {result.formattedDate && (
                      <div><strong>–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç:</strong> {result.formattedDate}</div>
                    )}
                  </>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        <div className="text-sm text-gray-600 space-y-1">
          <p><strong>–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:</strong></p>
          <ul className="list-disc list-inside ml-4 space-y-1">
            <li>–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –º—ñ—Å—è—Ü—ñ: "22 –ª–∏–ø–Ω—è 2025 —Ä."</li>
            <li>–ß–∏—Å–ª–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: "22.07.2025" –∞–±–æ "22.07.25—Ä."</li>
            <li>–ó –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º: "–≤—ñ–¥ 22 –ª–∏–ø–Ω—è 2025 —Ä."</li>
            <li>–í—Å—ñ –≤—ñ–¥–º—ñ–Ω–∫–∏ –º—ñ—Å—è—Ü—ñ–≤: —Å—ñ—á–Ω—è/—Å—ñ—á–Ω—ñ/—Å—ñ—á–µ–Ω—å, –ª–∏–ø–Ω—è/–ª–∏–ø–Ω—ñ/–ª–∏–ø–µ–Ω—å</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default UkrainianDateTest;