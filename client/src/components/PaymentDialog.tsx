import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { CreditCard, FileText, AlertCircle } from "lucide-react";
import { UkrainianDateInput } from "@/components/ui/ukrainian-date-picker";

interface PaymentDialogProps {
  orderId: number;
  orderNumber: string;
  totalAmount: string;
  currentPaymentType?: string;
  currentPaidAmount?: string;
  isProductionApproved?: boolean;
  trigger?: React.ReactNode;
}

export function PaymentDialog({
  orderId,
  orderNumber,
  totalAmount,
  currentPaymentType = "none",
  currentPaidAmount = "0",
  isProductionApproved = false,
  trigger
}: PaymentDialogProps) {
  const [open, setOpen] = useState(false);
  const [paymentType, setPaymentType] = useState<'full' | 'partial' | 'contract' | 'none'>(currentPaymentType as any);
  const [paidAmount, setPaidAmount] = useState(currentPaidAmount);
  const [contractNumber, setContractNumber] = useState("");
  const [paymentDate, setPaymentDate] = useState(new Date().toISOString().split('T')[0]);
  const [productionApproved, setProductionApproved] = useState(isProductionApproved);


  const { toast } = useToast();
  const queryClient = useQueryClient();

  const processPaymentMutation = useMutation({
    mutationFn: async (paymentData: any) => {
      return await apiRequest(`/api/orders/${orderId}/process-payment`, {
        method: "POST",
        body: paymentData,
      });
    },
    onSuccess: (data) => {
      toast({
        title: "–£—Å–ø—ñ—à–Ω–æ",
        description: data.message,
      });
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      queryClient.invalidateQueries({ queryKey: ["/api/manufacturing-orders"] });
      queryClient.invalidateQueries({ queryKey: ["/api/ordered-products-info"] });
      setOpen(false);
    },
    onError: (error: any) => {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂",
        variant: "destructive",
      });
    },
  });

  const cancelPaymentMutation = useMutation({
    mutationFn: async () => {
      return await apiRequest(`/api/orders/${orderId}/cancel-payment`, {
        method: "POST",
      });
    },
    onSuccess: (data) => {
      toast({
        title: "–£—Å–ø—ñ—à–Ω–æ",
        description: data.message || "–û–ø–ª–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/orders"] });
      queryClient.invalidateQueries({ queryKey: ["/api/manufacturing-orders"] });
      queryClient.invalidateQueries({ queryKey: ["/api/ordered-products-info"] });
      setOpen(false);
    },
    onError: (error: any) => {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = () => {
    const paymentData = {
      paymentType,
      paidAmount: paymentType === 'full' ? totalAmount : paidAmount,
      contractNumber: paymentType === 'contract' ? contractNumber : null,
      paymentDate: new Date(paymentDate).toISOString(),
      productionApproved: paymentType === 'contract' || paymentType === 'full' || productionApproved,
    };

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (paymentType === 'partial' && (!paidAmount || parseFloat(paidAmount) <= 0)) {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–î–ª—è —á–∞—Å—Ç–∫–æ–≤–æ—ó –æ–ø–ª–∞—Ç–∏ –≤–∫–∞–∂—ñ—Ç—å —Å—É–º—É",
        variant: "destructive",
      });
      return;
    }

    if (paymentType === 'contract' && !contractNumber.trim()) {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–î–ª—è –¥–æ–≥–æ–≤—ñ—Ä–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É",
        variant: "destructive",
      });
      return;
    }

    if (paymentType === 'partial' && parseFloat(paidAmount) > parseFloat(totalAmount)) {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–°—É–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É",
        variant: "destructive",
      });
      return;
    }

    processPaymentMutation.mutate(paymentData);
  };

  const getPaymentTypeLabel = (type: string) => {
    switch (type) {
      case 'full': return '–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞';
      case 'partial': return '–ß–∞—Å—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞';
      case 'contract': return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä—É';
      case 'none': return '–ë–µ–∑ –æ–ø–ª–∞—Ç–∏';
      default: return type;
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="outline" size="sm">
            <CreditCard className="h-4 w-4 mr-2" />
            –û–ø–ª–∞—Ç–∞
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>–û–±—Ä–æ–±–∫–∞ –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{orderNumber}</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div>
            <Label className="text-sm font-medium text-gray-700">
              –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: <span className="font-bold">{totalAmount} –≥—Ä–Ω</span>
            </Label>
          </div>

          <div className="space-y-2">
            <Label htmlFor="paymentType">–¢–∏–ø –æ–ø–ª–∞—Ç–∏</Label>
            <Select value={paymentType} onValueChange={(value: any) => setPaymentType(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="full">üí≥ –ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞</SelectItem>
                <SelectItem value="partial">üî∏ –ß–∞—Å—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞</SelectItem>
                <SelectItem value="contract">üìÑ –ü–æ –¥–æ–≥–æ–≤–æ—Ä—É</SelectItem>
                <SelectItem value="none">‚ùå –ë–µ–∑ –æ–ø–ª–∞—Ç–∏</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {paymentType !== 'none' && (
            <div className="space-y-2">
              <Label htmlFor="paymentDate">–î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏</Label>
              <UkrainianDateInput
                date={paymentDate ? new Date(paymentDate) : undefined}
                onDateChange={(date) => setPaymentDate(date ? date.toISOString().split('T')[0] : '')}
              />
            </div>
          )}

          {paymentType === 'partial' && (
            <div className="space-y-2">
              <Label htmlFor="paidAmount">–°—É–º–∞ –æ–ø–ª–∞—Ç–∏ (–≥—Ä–Ω)</Label>
              <Input
                id="paidAmount"
                type="number"
                step="0.01"
                value={paidAmount}
                onChange={(e) => setPaidAmount(e.target.value)}
                placeholder="–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É"
              />
            </div>
          )}

          {paymentType === 'contract' && (
            <div className="space-y-2">
              <Label htmlFor="contractNumber">–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É</Label>
              <Input
                id="contractNumber"
                value={contractNumber}
                onChange={(e) => setContractNumber(e.target.value)}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É"
              />
            </div>
          )}

          {(paymentType === 'partial' || paymentType === 'none') && (
            <div className="flex items-center space-x-2 p-3 bg-yellow-50 rounded-lg">
              <Checkbox
                id="productionApproved"
                checked={productionApproved}
                onCheckedChange={(checked) => setProductionApproved(checked as boolean)}
              />
              <Label htmlFor="productionApproved" className="text-sm">
                –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–∞–ø—É—Å–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
              </Label>
            </div>
          )}



          {paymentType === 'partial' && !productionApproved && (
            <div className="flex items-start space-x-2 p-3 bg-orange-50 border border-orange-200 rounded-lg">
              <AlertCircle className="h-4 w-4 text-orange-500 mt-0.5" />
              <div className="text-sm text-orange-700">
                <p className="font-medium">–£–≤–∞–≥–∞!</p>
                <p>–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –Ω–µ –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É.</p>
              </div>
            </div>
          )}

          <div className="flex justify-end space-x-2 pt-4">
            <Button
              variant="outline"
              onClick={() => setOpen(false)}
              disabled={processPaymentMutation.isPending || cancelPaymentMutation.isPending}
            >
              –ó–∞–∫—Ä–∏—Ç–∏
            </Button>
            
            {/* –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ —è–∫—â–æ —î –æ–ø–ª–∞—Ç–∞ */}
            {currentPaymentType !== "none" && (
              <Button
                variant="destructive"
                onClick={() => cancelPaymentMutation.mutate()}
                disabled={processPaymentMutation.isPending || cancelPaymentMutation.isPending}
              >
                {cancelPaymentMutation.isPending ? "–°–∫–∞—Å—É–≤–∞–Ω–Ω—è..." : "–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É"}
              </Button>
            )}
            
            <Button
              onClick={handleSubmit}
              disabled={processPaymentMutation.isPending || cancelPaymentMutation.isPending}
            >
              {processPaymentMutation.isPending ? "–û–±—Ä–æ–±–∫–∞..." : "–û–ø–ª–∞—Ç–∏—Ç–∏"}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}