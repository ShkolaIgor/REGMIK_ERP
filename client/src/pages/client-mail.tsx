import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Plus, Mail, Printer, Send, Eye, FileText, Settings, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import EnvelopePrintDialog from "@/components/EnvelopePrintDialog";
import type { ClientMail, InsertClientMail, Client, MailRegistry, EnvelopePrintSettings } from "@shared/schema";

export default function ClientMailPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // –°—Ç–∞–Ω–∏ –¥–ª—è UI
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isSettingsDialogOpen, setIsSettingsDialogOpen] = useState(false);
  const [isGroupPrintDialogOpen, setIsGroupPrintDialogOpen] = useState(false);
  const [isEnvelopePrintDialogOpen, setIsEnvelopePrintDialogOpen] = useState(false);
  const [selectedItems, setSelectedItems] = useState<number[]>([]);
  const [batchName, setBatchName] = useState("");
  const [currentBatchMails, setCurrentBatchMails] = useState<ClientMail[]>([]);

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–∞
  const [envelopeSize, setEnvelopeSize] = useState("dl");
  const [fontSize, setFontSize] = useState("12");
  const [senderRecipientFontSize, setSenderRecipientFontSize] = useState("14");
  const [postalIndexFontSize, setPostalIndexFontSize] = useState("18");
  const [advertisementFontSize, setAdvertisementFontSize] = useState("11");
  const [centerImage, setCenterImage] = useState(false);
  const [advertisementText, setAdvertisementText] = useState("REGMIK ERP - –í–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É –±—ñ–∑–Ω–µ—Å—ñ!");
  const [advertisementImage, setAdvertisementImage] = useState<string | null>(null);
  const [adPositions, setAdPositions] = useState<string[]>(["bottom-left"]);
  const [imageRelativePosition, setImageRelativePosition] = useState("below");
  const [imageSize, setImageSize] = useState("small");

  // –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  const [senderPosition, setSenderPosition] = useState({ x: 20, y: 15 });
  const [recipientPosition, setRecipientPosition] = useState({ x: 120, y: 60 });
  const [adPositionCoords, setAdPositionCoords] = useState({
    'bottom-left': { x: 8, y: 85 },
    'top-right': { x: 160, y: 8 }
  });

  // –°—Ç–∞–Ω–∏ –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  const [isDragging, setIsDragging] = useState(false);
  const [draggedElement, setDraggedElement] = useState<string | null>(null);
  
  // –°—Ç–∞–Ω–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤
  const [isResizing, setIsResizing] = useState(false);
  const [resizingElement, setResizingElement] = useState<string | null>(null);
  const [initialMouseY, setInitialMouseY] = useState(0);
  const [initialFontSize, setInitialFontSize] = useState(0);

  // –î–∞–Ω—ñ
  const { data: mails = [] } = useQuery({
    queryKey: ["/api/client-mail"]
  });

  const { data: clients = [] } = useQuery({
    queryKey: ["/api/clients"]
  });

  const { data: mailRegistry = [] } = useQuery({
    queryKey: ["/api/mail-registry"]
  });

  const { data: envelopeSettings = [] } = useQuery({
    queryKey: ["/api/envelope-print-settings"]
  });

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø—É –∫–æ–Ω–≤–µ—Ä—Ç–∞
  const loadSettingsForEnvelopeSize = (size: string) => {
    console.log("–®—É–∫–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É:", size);
    console.log("–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", envelopeSettings);
    
    const settings = envelopeSettings.find((s: any) => s.envelopeSize === size);
    console.log("–ó–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", settings);
    
    if (settings) {
      console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", settings);
      setAdvertisementText(settings.advertisementText || "REGMIK ERP - –í–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É –±—ñ–∑–Ω–µ—Å—ñ!");
      setAdvertisementImage(settings.advertisementImage || null);
      setAdPositions(settings.adPositions ? JSON.parse(settings.adPositions) : []);
      setImageRelativePosition(settings.imageRelativePosition || "below");
      setImageSize(settings.imageSize || "small");
      setFontSize(settings.fontSize?.toString() || "12");
      setSenderRecipientFontSize(settings.senderRecipientFontSize?.toString() || "14");
      setPostalIndexFontSize(settings.postalIndexFontSize?.toString() || "18");
      setAdvertisementFontSize(settings.advertisementFontSize?.toString() || "11");
      setCenterImage(settings.centerImage || false);
      setSenderPosition(settings.senderPosition ? JSON.parse(settings.senderPosition) : { x: 20, y: 15 });
      setRecipientPosition(settings.recipientPosition ? JSON.parse(settings.recipientPosition) : { x: 120, y: 60 });
      setAdPositionCoords(settings.adPositionCoords ? JSON.parse(settings.adPositionCoords) : {
        'bottom-left': { x: 8, y: 85 },
        'top-right': { x: 160, y: 8 }
      });
    } else {
      console.log("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º");
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      setAdvertisementText("REGMIK ERP - –í–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É –±—ñ–∑–Ω–µ—Å—ñ!");
      setAdvertisementImage(null);
      setAdPositions([]);
      setImageRelativePosition("below");
      setImageSize("small");
      setFontSize("12");
      setCenterImage(false);
      setSenderPosition({ x: 20, y: 15 });
      setRecipientPosition({ x: 120, y: 60 });
      setAdPositionCoords({
        'bottom-left': { x: 8, y: 85 },
        'top-right': { x: 160, y: 8 }
      });
    }
  };



  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    if (envelopeSettings.length > 0) {
      loadSettingsForEnvelopeSize(envelopeSize);
    }
  }, [envelopeSettings, envelopeSize]);



  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  const handleMouseDown = (elementType: string, event: React.MouseEvent) => {
    setIsDragging(true);
    setDraggedElement(elementType);
    event.preventDefault();
  };

  const handleMouseMove = (event: React.MouseEvent) => {
    if (!isDragging || !draggedElement) return;
    
    const rect = event.currentTarget.getBoundingClientRect();
    const scale = 0.9;
    const pixelsToMm = 3.7795;
    const newX = (event.clientX - rect.left) / scale / pixelsToMm;
    const newY = (event.clientY - rect.top) / scale / pixelsToMm;
    
    const maxWidth = envelopeSize === 'dl' ? 200 : envelopeSize === 'c4' ? 304 : 209;
    const maxHeight = envelopeSize === 'dl' ? 90 : envelopeSize === 'c4' ? 209 : 142;
    
    if (draggedElement === 'sender') {
      setSenderPosition({ 
        x: Math.max(0, Math.min(maxWidth, newX - 10)), 
        y: Math.max(0, Math.min(maxHeight, newY - 5)) 
      });
    } else if (draggedElement === 'recipient') {
      setRecipientPosition({ 
        x: Math.max(0, Math.min(maxWidth, newX - 20)), 
        y: Math.max(0, Math.min(maxHeight, newY - 10)) 
      });
    } else if (draggedElement.startsWith('ad-')) {
      const position = draggedElement.replace('ad-', '') as keyof typeof adPositionCoords;
      setAdPositionCoords(prev => ({
        ...prev,
        [position]: { 
          x: Math.max(0, Math.min(maxWidth, newX - 15)), 
          y: Math.max(0, Math.min(maxHeight, newY - 10)) 
        }
      }));
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
    setDraggedElement(null);
    setIsResizing(false);
    setResizingElement(null);
  };

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setAdvertisementImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const getImageSizeValue = () => {
    switch (imageSize) {
      case "small": return "15mm";
      case "medium": return "25mm";
      case "large": return "35mm";
      default: return "15mm";
    }
  };

  // –ú—É—Ç–∞—Ü—ñ—ó
  const createMailMutation = useMutation({
    mutationFn: (data: InsertClientMail) => apiRequest("/api/client-mail", "POST", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/client-mail"] });
      setIsCreateDialogOpen(false);
      toast({ title: "–õ–∏—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ" });
    },
    onError: () => {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ª–∏—Å—Ç", variant: "destructive" });
    },
  });

  const saveSettingsMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log("üîÑ –ú–£–¢–ê–¶–Ü–Ø –ü–û–ß–ê–¢–û–ö: –ù–∞–¥—Å–∏–ª–∞—î–º–æ POST –∑–∞–ø–∏—Ç:", data);
      console.log("üîç –¢–∏–ø –¥–∞–Ω–∏—Ö:", typeof data);
      console.log("üîç JSON stringify:", JSON.stringify(data, null, 2));
      
      try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ fetch API –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
        console.log("üåê –ü—Ä—è–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ fetch –¥–æ —Å–µ—Ä–≤–µ—Ä–∞...");
        const response = await fetch("/api/envelope-print-settings", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });
        
        console.log("üì° Response status:", response.status);
        console.log("üì° Response headers:", Object.fromEntries(response.headers.entries()));
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error("‚ùå Response error text:", errorText);
          throw new Error(`HTTP error! status: ${response.status}, text: ${errorText}`);
        }
        
        const result = await response.json();
        console.log("‚úÖ –ú–£–¢–ê–¶–Ü–Ø –£–°–ü–Ü–•: –û—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", result);
        return result;
      } catch (error) {
        console.error("‚ùå –ú–£–¢–ê–¶–Ü–Ø –ü–û–ú–ò–õ–ö–ê:", error);
        throw error;
      }
    },
    onSuccess: (data) => {
      console.log("üéâ onSuccess –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –¥–∞–Ω–∏–º–∏:", data);
      queryClient.invalidateQueries({ queryKey: ["/api/envelope-print-settings"] });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      setTimeout(() => {
        loadSettingsForEnvelopeSize(envelopeSize);
      }, 100);
      
      // –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
      if (data && data.length > 0) {
        const latestSettings = data.find((s: any) => s.envelopeSize === envelopeSize);
        if (latestSettings) {
          setFontSize(latestSettings.fontSize?.toString() || "12");
          setImageSize(latestSettings.imageSize || "small");
          setImageRelativePosition(latestSettings.imageRelativePosition || "below");
          setCenterImage(latestSettings.centerImage || false);
        }
      }
      
      toast({ title: `–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è ${envelopeSize.toUpperCase()} –∑–±–µ—Ä–µ–∂–µ–Ω–æ` });
    },
    onError: (error) => {
      console.error("üí• onError –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é:", error);
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", variant: "destructive" });
    },
  });

  const batchPrintMutation = useMutation({
    mutationFn: (data: { mailIds: number[], batchName: string }) =>
      apiRequest("/api/client-mail/batch-print", "POST", data),
    onSuccess: (result) => {
      queryClient.invalidateQueries({ queryKey: ["/api/client-mail"] });
      queryClient.invalidateQueries({ queryKey: ["/api/mail-registry"] });
      setIsGroupPrintDialogOpen(false);
      setSelectedItems([]);
      setBatchName("");
      toast({
        title: "–ü–∞–∫–µ—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ",
        description: `–°—Ç–≤–æ—Ä–µ–Ω–æ ${result.count} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –¥—Ä—É–∫—É –∫–æ–Ω–≤–µ—Ä—Ç—ñ–≤`
      });
    },
    onError: () => {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–∫–µ—Ç", variant: "destructive" });
    },
  });

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  const getStatusColor = (status: string) => {
    switch (status) {
      case "draft": return "bg-gray-100 text-gray-800";
      case "queued": return "bg-blue-100 text-blue-800";
      case "sent": return "bg-green-100 text-green-800";
      case "delivered": return "bg-green-100 text-green-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const toggleSelectItem = (id: number) => {
    setSelectedItems(prev => 
      prev.includes(id) 
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  const selectAllItems = () => {
    const draftMails = mails.filter(mail => mail.status === "draft");
    setSelectedItems(draftMails.map(mail => mail.id));
  };

  const handleBatchPrint = () => {
    if (selectedItems.length === 0) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–û–±–µ—Ä—ñ—Ç—å –ª–∏—Å—Ç–∏ –¥–ª—è –¥—Ä—É–∫—É", variant: "destructive" });
      return;
    }
    if (!batchName.trim()) {
      toast({ title: "–ü–æ–º–∏–ª–∫–∞", description: "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞—Ä—Ç—ñ—ó", variant: "destructive" });
      return;
    }
    batchPrintMutation.mutate({ mailIds: selectedItems, batchName: batchName.trim() });
  };

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">–õ–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏</h1>
          <p className="text-gray-600">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–ø–µ—Ä–æ–≤–æ—é –ø–æ—à—Ç–æ—é —Ç–∞ –¥—Ä—É–∫ –∫–æ–Ω–≤–µ—Ä—Ç—ñ–≤</p>
        </div>
        <div className="flex gap-2">
          {/* –î—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥—Ä—É–∫—É */}
          <Dialog open={isSettingsDialogOpen} onOpenChange={setIsSettingsDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline">
                <Settings className="h-4 w-4 mr-2" />
                –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—Ä—É–∫—É
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-7xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—Ä—É–∫—É –∫–æ–Ω–≤–µ—Ä—Ç—ñ–≤</DialogTitle>
              </DialogHeader>
              
              <div className="grid grid-cols-[2fr_1fr] gap-6">
                {/* –õ—ñ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ */}
                <div className="p-4 border rounded-lg bg-yellow-50">
                  <h3 className="text-lg font-semibold mb-4">–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥</h3>
                  <div className="border rounded-lg p-4 bg-gray-50 overflow-auto">
                    <div className="text-sm text-blue-600 mb-4 font-medium text-center">
                      –ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
                    </div>
                    <div 
                      className="bg-white border-2 border-black mx-auto cursor-crosshair shadow-lg" 
                      style={{
                        width: envelopeSize === 'dl' ? '220mm' : envelopeSize === 'c4' ? '324mm' : '229mm',
                        height: envelopeSize === 'dl' ? '110mm' : envelopeSize === 'c4' ? '229mm' : '162mm',
                        position: 'relative',
                        fontFamily: 'Arial, sans-serif',
                        transform: 'scale(0.6)',
                        transformOrigin: 'center top',
                        margin: '10px auto',
                        minHeight: '200px'
                      }}
                      onMouseMove={handleMouseMove}
                      onMouseUp={handleMouseUp}
                      onMouseLeave={handleMouseUp}
                    >
                      {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è –º–∞—Ä–∫–∏ */}
                      <div style={{
                        position: 'absolute',
                        top: '8mm',
                        right: '8mm',
                        width: '30mm',
                        height: '20mm',
                        border: '1px dashed #999',
                        fontSize: '8px',
                        textAlign: 'center',
                        padding: '2mm'
                      }}>
                        –ú–ê–†–ö–ê
                      </div>

                      {/* –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ */}
                      <div
                        style={{
                          position: 'absolute',
                          top: `${senderPosition.y}mm`,
                          left: `${senderPosition.x}mm`,
                          fontSize: `${senderRecipientFontSize}px`,
                          lineHeight: '1.4',
                          maxWidth: '80mm',
                          cursor: 'move',
                          padding: '2mm',
                          border: isDragging && draggedElement === 'sender' ? '2px dashed #3b82f6' : '2px dashed transparent',
                          backgroundColor: isDragging && draggedElement === 'sender' ? 'rgba(59, 130, 246, 0.1)' : 'transparent'
                        }}
                        onMouseDown={(e) => handleMouseDown('sender', e)}
                        title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"
                      >
                        <div style={{ fontSize: '8px', marginBottom: '1mm', color: '#666' }}>–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞</div>
                        <div style={{ fontWeight: 'bold' }}>–¢–û–í "–†–ï–ì–ú–Ü–ö"</div>
                        <div>–º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, 15</div>
                        <div>+38 (044) 123-45-67</div>
                        <div style={{ fontSize: `${postalIndexFontSize}px`, fontWeight: 'bold', marginTop: '3mm', letterSpacing: '3px' }}>
                          01001
                        </div>
                      </div>

                      {/* –û—Ç—Ä–∏–º—É–≤–∞—á */}
                      <div
                        style={{
                          position: 'absolute',
                          top: `${recipientPosition.y}mm`,
                          left: `${recipientPosition.x}mm`,
                          fontSize: `${senderRecipientFontSize}px`,
                          lineHeight: '1.4',
                          maxWidth: '90mm',
                          cursor: 'move',
                          padding: '2mm',
                          border: isDragging && draggedElement === 'recipient' ? '2px dashed #3b82f6' : '2px dashed transparent',
                          backgroundColor: isDragging && draggedElement === 'recipient' ? 'rgba(59, 130, 246, 0.1)' : 'transparent'
                        }}
                        onMouseDown={(e) => handleMouseDown('recipient', e)}
                        title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"
                      >
                        <div style={{ fontSize: '8px', marginBottom: '1mm', color: '#666' }}>–ê–¥—Ä–µ—Å–∞ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞, —ñ–Ω–¥–µ–∫—Å</div>
                        <div style={{ fontWeight: 'bold' }}>–§–û–ü –¢–∞—Ä–∞–Ω–æ–≤ –†—É—Å–ª–∞–Ω –°–µ—Ä–≥—ñ–π–æ–≤–∏—á</div>
                        <div>–≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, –±—É–¥. 18, –∫–≤. 33, –º.</div>
                        <div>–ü–∞–≤–ª–æ–≥—Ä–∞–¥</div>
                        <div style={{ fontSize: `${postalIndexFontSize}px`, fontWeight: 'bold', marginTop: '3mm', letterSpacing: '3px' }}>
                          51400
                        </div>
                      </div>

                      {/* –†–µ–∫–ª–∞–º–∞ */}
                      {adPositions.map(position => (
                        <div
                          key={position}
                          style={{
                            position: 'absolute',
                            top: `${adPositionCoords[position as keyof typeof adPositionCoords].y}mm`,
                            left: `${adPositionCoords[position as keyof typeof adPositionCoords].x}mm`,
                            fontSize: `${advertisementFontSize}px`,
                            maxWidth: position === 'bottom-left' ? '80mm' : '60mm',
                            cursor: 'move',
                            padding: '1mm',
                            border: isDragging && draggedElement === `ad-${position}` ? '2px dashed #3b82f6' : '2px dashed transparent',
                            backgroundColor: isDragging && draggedElement === `ad-${position}` ? 'rgba(59, 130, 246, 0.1)' : 'transparent'
                          }}
                          onMouseDown={(e) => handleMouseDown(`ad-${position}`, e)}
                          title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"
                        >
                          <div style={{
                            display: 'flex',
                            alignItems: 'flex-start',
                            flexDirection: imageRelativePosition === 'above' || imageRelativePosition === 'below' ? 'column' : 'row',
                            gap: '3mm'
                          }}>
                            {imageRelativePosition === 'above' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                            {imageRelativePosition === 'left' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  marginRight: '3px',
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                            <div 
                              style={{ 
                                flex: 1,
                                whiteSpace: 'pre-wrap',
                                wordWrap: 'break-word',
                                hyphens: 'auto',
                                lineHeight: '1.3'
                              }}
                              dangerouslySetInnerHTML={{
                                __html: advertisementText
                                  .replace(/\n/g, '<br/>')
                                  .replace(/(\w{6,})/g, (match) => {
                                    return match.length > 8 ? 
                                      match.replace(/(.{4})/g, '$1&shy;') : 
                                      match;
                                  })
                              }}
                            />
                            {imageRelativePosition === 'right' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  marginLeft: '3px',
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                            {imageRelativePosition === 'below' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* –ü—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
                <div className="space-y-4">
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <h3 className="text-lg font-semibold mb-4">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>–†–æ–∑–º—ñ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞</Label>
                        <Select value={envelopeSize} onValueChange={(size) => {
                          setEnvelopeSize(size);
                          loadSettingsForEnvelopeSize(size);
                        }}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="dl">DL (110√ó220 –º–º)</SelectItem>
                            <SelectItem value="c4">C4 (229√ó324 –º–º)</SelectItem>
                            <SelectItem value="c5">C5 (162√ó229 –º–º)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫/–û—Ç—Ä–∏–º—É–≤–∞—á (px)</Label>
                        <Input 
                          type="number" 
                          value={senderRecipientFontSize} 
                          onChange={(e) => setSenderRecipientFontSize(e.target.value)}
                          min="8" 
                          max="24" 
                        />
                      </div>
                      <div>
                        <Label>–ü–æ—à—Ç–æ–≤—ñ —ñ–Ω–¥–µ–∫—Å–∏ (px)</Label>
                        <Input 
                          type="number" 
                          value={postalIndexFontSize} 
                          onChange={(e) => setPostalIndexFontSize(e.target.value)}
                          min="8" 
                          max="28" 
                        />
                      </div>
                      <div>
                        <Label>–†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É —Ä–µ–∫–ª–∞–º–∏ (px)</Label>
                        <Input 
                          type="number" 
                          value={advertisementFontSize} 
                          onChange={(e) => setAdvertisementFontSize(e.target.value)}
                          min="6" 
                          max="18" 
                        />
                      </div>

                    </div>
                  </div>

                  {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏ */}
                  <div className="p-4 border rounded-lg bg-blue-50">
                    <h3 className="text-lg font-semibold mb-4">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏</h3>
                    <div className="space-y-4">
                      <div>
                        <Label>–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–∏</Label>
                        <Textarea 
                          value={advertisementText}
                          onChange={(e) => setAdvertisementText(e.target.value)}
                          placeholder="–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–ª–∞–º–Ω–∏–π —Ç–µ–∫—Å—Ç"
                          rows={3}
                        />
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox 
                          id="centerImage" 
                          checked={centerImage} 
                          onCheckedChange={setCenterImage}
                        />
                        <Label htmlFor="centerImage">–¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</Label>
                      </div>
                      <div>
                        <Label>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏</Label>
                        <div className="flex gap-2 mt-2">
                          <Input
                            type="file"
                            accept="image/*"
                            onChange={handleImageUpload}
                            className="flex-1"
                          />
                          {advertisementImage && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setAdvertisementImage(null)}
                              type="button"
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          )}
                        </div>
                        {advertisementImage && (
                          <div className="mt-3 p-3 border rounded-lg bg-white">
                            <img 
                              src={advertisementImage} 
                              alt="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥" 
                              className="max-w-32 max-h-32 object-contain border rounded mx-auto block"
                            />
                          </div>
                        )}
                      </div>
                      <div>
                        <Label>–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ç–µ–∫—Å—Ç—É</Label>
                        <Select value={imageRelativePosition} onValueChange={setImageRelativePosition}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="above">–ù–∞–¥ —Ç–µ–∫—Å—Ç–æ–º</SelectItem>
                            <SelectItem value="below">–ü—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º</SelectItem>
                            <SelectItem value="left">–ó–ª—ñ–≤–∞ –≤—ñ–¥ —Ç–µ–∫—Å—Ç—É</SelectItem>
                            <SelectItem value="right">–ó–ø—Ä–∞–≤–∞ –≤—ñ–¥ —Ç–µ–∫—Å—Ç—É</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>–†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</Label>
                        <Select value={imageSize} onValueChange={setImageSize}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="small">–ú–∞–ª–∏–π (15–º–º)</SelectItem>
                            <SelectItem value="medium">–°–µ—Ä–µ–¥–Ω—ñ–π (25–º–º)</SelectItem>
                            <SelectItem value="large">–í–µ–ª–∏–∫–∏–π (35–º–º)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                </div>
              </div>

              <div className="flex justify-end pt-4">
                <Button 
                  className="w-full" 
                  onClick={() => {
                    const settingsData = {
                      settingName: `–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è ${envelopeSize.toUpperCase()}`,
                      envelopeSize,
                      senderName: "–¢–û–í \"–†–ï–ì–ú–Ü–ö\"",
                      senderAddress: "–º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, 15",
                      senderPhone: "+38 (044) 123-45-67",
                      advertisementText,
                      advertisementImage,
                      adPositions: JSON.stringify(adPositions),
                      imageRelativePosition,
                      imageSize,
                      fontSize,
                      senderRecipientFontSize,
                      postalIndexFontSize,
                      advertisementFontSize,
                      centerImage,
                      senderPosition: JSON.stringify(senderPosition),
                      recipientPosition: JSON.stringify(recipientPosition),
                      adPositionCoords: JSON.stringify(adPositionCoords)
                    };
                    saveSettingsMutation.mutate(settingsData);
                  }}
                  disabled={saveSettingsMutation.isPending}
                >
                  {saveSettingsMutation.isPending ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"}
                </Button>
              </div>
            </DialogContent>
          </Dialog>

          <Button onClick={() => setIsCreateDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          </Button>
        </div>

        {isCreateDialogOpen && (
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</DialogTitle>
              </DialogHeader>
              
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="recipientType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–¢–∏–ø –æ—Ç—Ä–∏–º—É–≤–∞—á–∞</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="all">–í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏</SelectItem>
                          <SelectItem value="selected">–û–±—Ä–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</SelectItem>
                        </SelectContent>
                      </Select>
                    </FormItem>
                  )}
                />

                {form.watch('recipientType') === 'selected' && (
                  <FormField
                    control={form.control}
                    name="selectedClients"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–û–±—Ä–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏</FormLabel>
                        <div className="space-y-2 max-h-40 overflow-y-auto border rounded p-2">
                          {clients?.map((client: any) => (
                            <div key={client.id} className="flex items-center space-x-2">
                              <Checkbox
                                checked={field.value?.includes(client.id) || false}
                                onCheckedChange={(checked) => {
                                  const currentIds = field.value || [];
                                  if (checked && checked !== 'indeterminate') {
                                    field.onChange([...currentIds, client.id]);
                                  } else {
                                    field.onChange(currentIds.filter((id: number) => id !== client.id));
                                  }
                                }}
                              />
                              <span className="text-sm">{client.name}</span>
                            </div>
                          ))}
                        </div>
                      </FormItem>
                    )}
                  />
                )}

                <FormField
                  control={form.control}
                  name="subject"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–¢–µ–º–∞</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="content"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ó–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</FormLabel>
                      <FormControl>
                        <Textarea {...field} rows={5} />
                      </FormControl>
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="priority"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</FormLabel>
                      <Select value={field.value} onValueChange={field.onChange}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="low">–ù–∏–∑—å–∫–∏–π</SelectItem>
                          <SelectItem value="medium">–°–µ—Ä–µ–¥–Ω—ñ–π</SelectItem>
                          <SelectItem value="high">–í–∏—Å–æ–∫–∏–π</SelectItem>
                        </SelectContent>
                      </Select>
                    </FormItem>
                  )}
                />

                <div className="flex justify-end space-x-2">
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={() => setIsCreateDialogOpen(false)}
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </Button>
                  <Button 
                    type="submit" 
                    disabled={createMutation.isPending}
                  >
                    {createMutation.isPending ? "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è..." : "–°—Ç–≤–æ—Ä–∏—Ç–∏"}
                  </Button>
                </div>
              </form>
            </DialogContent>
          </Dialog>
        )}

        <div className="grid grid-cols-1 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Mail className="h-5 w-5" />
                –ü–æ—à—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {(mails as any[])?.filter((m: any) => !m.deleted).map((mail: any) => (
                  <div key={mail.id} className="border rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h3 className="font-semibold">{mail.subject}</h3>
                        <p className="text-sm text-muted-foreground">
                          {mail.recipientType === 'all' ? '–í—Å—ñ –∫–ª—ñ—î–Ω—Ç–∏' : `${mail.recipientCount} –∫–ª—ñ—î–Ω—Ç—ñ–≤`}
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={
                          mail.priority === 'high' ? 'destructive' : 
                          mail.priority === 'medium' ? 'default' : 
                          'secondary'
                        }>
                          {mail.priority === 'high' ? '–í–∏—Å–æ–∫–∏–π' : 
                           mail.priority === 'medium' ? '–°–µ—Ä–µ–¥–Ω—ñ–π' : '–ù–∏–∑—å–∫–∏–π'}
                        </Badge>
                        <Badge variant={
                          mail.status === 'sent' ? 'default' : 
                          mail.status === 'draft' ? 'secondary' : 
                          'destructive'
                        }>
                          {mail.status === 'sent' ? '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ' : 
                           mail.status === 'draft' ? '–ß–µ—Ä–Ω–µ—Ç–∫–∞' : '–ü–æ–º–∏–ª–∫–∞'}
                        </Badge>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => deleteMutation.mutate(mail.id)}
                          disabled={deleteMutation.isPending}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                    <p className="text-sm mb-2">{mail.content}</p>
                    <p className="text-xs text-muted-foreground">
                      –°—Ç–≤–æ—Ä–µ–Ω–æ: {new Date(mail.createdAt).toLocaleDateString('uk-UA')}
                    </p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                –ö–ª—ñ—î–Ω—Ç–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {(clients as any[])?.map((c: any) => (
                  <div key={c.id} className="flex justify-between items-center p-2 border rounded">
                    <div>
                      <span className="font-medium">{c.name}</span>
                      <span className="text-sm text-muted-foreground ml-2">{c.email}</span>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {c.address}, {c.city}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                –†–µ—î—Å—Ç—Ä –ø–æ—à—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {(mailRegistry as any[])?.map((entry: any) => (
                  <div key={entry.id} className="flex justify-between items-center p-2 border rounded">
                    <div>
                      <span className="font-medium">{entry.recipientName}</span>
                      <span className="text-sm text-muted-foreground ml-2">
                        {entry.mailType} - {entry.trackingNumber}
                      </span>
                    </div>
                    <div className="text-sm">
                      <Badge variant={entry.status === 'delivered' ? 'default' : 'secondary'}>
                        {entry.status === 'delivered' ? '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' : '–í –¥–æ—Ä–æ–∑—ñ'}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">–ü–æ—à—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</h1>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => setSelectedMails([])}>
            –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏–±—ñ—Ä
          </Button>
          <Button variant="outline" disabled={selectedMails.length === 0}>
            –ì—Ä—É–ø–æ–≤–∏–π –¥—Ä—É–∫ ({selectedMails.length})
          </Button>
        </div>
      </div>

      {mailsQuery.isLoading ? (
        <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      ) : (
        <MailList mails={mails as Client[]} />
      )}
                        top: '8mm',
                        right: '8mm',
                        width: '30mm',
                        height: '25mm',
                        border: '2px dashed #3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: '12px',
                        color: '#3b82f6',
                        textAlign: 'center',
                        fontWeight: 'bold',
                        lineHeight: '1.2'
                      }}>
                        –ú–Ü–°–¶–ï<br/>–î–õ–Ø<br/>–ú–ê–†–ö–ò
                      </div>

                      {/* –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ */}
                      <div 
                        style={{
                          position: 'absolute',
                          top: `${senderPosition.y}mm`,
                          left: `${senderPosition.x}mm`,
                          fontSize: `${senderRecipientFontSize}px`,
                          lineHeight: '1.3',
                          maxWidth: '70mm',
                          cursor: 'move',
                          padding: '2mm',
                          border: isDragging && draggedElement === 'sender' ? '2px dashed #3b82f6' : '2px dashed transparent',
                          backgroundColor: isDragging && draggedElement === 'sender' ? 'rgba(59, 130, 246, 0.1)' : 'transparent'
                        }}
                        onMouseDown={(e) => handleMouseDown('sender', e)}
                        title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"
                      >
                        <div style={{ fontWeight: 'bold', fontSize: '8px', marginBottom: '1mm', color: '#666' }}>–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞, —ñ–Ω–¥–µ–∫—Å</div>
                        <div style={{ fontWeight: 'bold' }}>–ù–í–§ "–†–ï–ì–ú–Ü–ö"</div>
                        <div>–≤—É–ª.–ì–∞–≥–∞—Ä—ñ–Ω–∞, 25</div>
                        <div>—Å.–†—ñ–≤–Ω–æ–ø—ñ–ª–ª—è, –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω</div>
                        <div>–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª.</div>
                        <div>–£–∫—Ä–∞—ó–Ω–∞</div>
                        <div style={{ fontSize: `${postalIndexFontSize}px`, fontWeight: 'bold', marginTop: '2mm', letterSpacing: '2px' }}>
                          15582
                        </div>
                      </div>

                      {/* –û—Ç—Ä–∏–º—É–≤–∞—á */}
                      <div 
                        style={{
                          position: 'absolute',
                          top: `${recipientPosition.y}mm`,
                          left: `${recipientPosition.x}mm`,
                          fontSize: `${senderRecipientFontSize}px`,
                          lineHeight: '1.4',
                          maxWidth: '90mm',
                          cursor: 'move',
                          padding: '2mm',
                          border: isDragging && draggedElement === 'recipient' ? '2px dashed #3b82f6' : '2px dashed transparent',
                          backgroundColor: isDragging && draggedElement === 'recipient' ? 'rgba(59, 130, 246, 0.1)' : 'transparent'
                        }}
                        onMouseDown={(e) => handleMouseDown('recipient', e)}
                        title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"
                      >
                        <div style={{ fontSize: '8px', marginBottom: '1mm', color: '#666' }}>–ê–¥—Ä–µ—Å–∞ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞, —ñ–Ω–¥–µ–∫—Å</div>
                        <div style={{ fontWeight: 'bold' }}>–§–û–ü –¢–∞—Ä–∞–Ω–æ–≤ –†—É—Å–ª–∞–Ω –°–µ—Ä–≥—ñ–π–æ–≤–∏—á</div>
                        <div>–≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, –±—É–¥. 18, –∫–≤. 33, –º.</div>
                        <div>–ü–∞–≤–ª–æ–≥—Ä–∞–¥</div>
                        <div style={{ fontSize: `${postalIndexFontSize}px`, fontWeight: 'bold', marginTop: '3mm', letterSpacing: '3px' }}>
                          51400
                        </div>
                      </div>

                      {/* –†–µ–∫–ª–∞–º–∞ */}
                      {adPositions.map(position => (
                        <div
                          key={position}
                          style={{
                            position: 'absolute',
                            top: `${adPositionCoords[position as keyof typeof adPositionCoords].y}mm`,
                            left: `${adPositionCoords[position as keyof typeof adPositionCoords].x}mm`,
                            fontSize: `${advertisementFontSize}px`,
                            maxWidth: position === 'bottom-left' ? '80mm' : '60mm',
                            cursor: 'move',
                            padding: '1mm',
                            border: isDragging && draggedElement === `ad-${position}` ? '2px dashed #3b82f6' : '2px dashed transparent',
                            backgroundColor: isDragging && draggedElement === `ad-${position}` ? 'rgba(59, 130, 246, 0.1)' : 'transparent'
                          }}
                          onMouseDown={(e) => handleMouseDown(`ad-${position}`, e)}
                          title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"
                        >
                          <div style={{
                            display: 'flex',
                            flexDirection: imageRelativePosition === 'above' || imageRelativePosition === 'below' ? 'column' : 'row',
                            alignItems: centerImage ? 'center' : 'flex-start',
                            gap: '2mm'
                          }}>
                            {imageRelativePosition === 'above' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                            {imageRelativePosition === 'left' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  marginRight: '3px',
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                            <div 
                              style={{ 
                                flex: 1,
                                whiteSpace: 'pre-wrap',
                                wordWrap: 'break-word',
                                hyphens: 'auto',
                                lineHeight: '1.3'
                              }}
                              dangerouslySetInnerHTML={{
                                __html: advertisementText
                                  .replace(/\n/g, '<br/>')
                                  .replace(/(\w{6,})/g, (match) => {
                                    // –î–æ–¥–∞—î–º–æ –º'—è–∫—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏ –¥–ª—è –¥–æ–≤–≥–∏—Ö —Å–ª—ñ–≤
                                    return match.length > 8 ? 
                                      match.replace(/(.{4})/g, '$1&shy;') : 
                                      match;
                                  })
                              }}
                            />
                            {imageRelativePosition === 'right' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  marginLeft: '3px',
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                            {imageRelativePosition === 'below' && advertisementImage && (
                              <img 
                                src={advertisementImage} 
                                alt="–†–µ–∫–ª–∞–º–∞" 
                                style={{
                                  width: getImageSizeValue(),
                                  height: 'auto',
                                  maxHeight: getImageSizeValue(),
                                  alignSelf: centerImage ? 'center' : 'flex-start'
                                }}
                              />
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex justify-end pt-4">
                <Button 
                  className="w-full" 
                  onClick={() => {
                    const settingsData = {
                      settingName: `–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è ${envelopeSize.toUpperCase()}`,
                      envelopeSize,
                      senderName: "–¢–û–í \"–†–ï–ì–ú–Ü–ö\"",
                      senderAddress: "–º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–æ–º–∏—Å–ª–æ–≤–∞, 15",
                      senderPhone: "+38 (044) 123-45-67",
                      advertisementText,
                      advertisementImage,
                      adPositions: JSON.stringify(adPositions),
                      imageRelativePosition,
                      imageSize,
                      fontSize,
                      senderRecipientFontSize,
                      postalIndexFontSize,
                      advertisementFontSize,
                      centerImage,
                      senderPosition: JSON.stringify(senderPosition),
                      recipientPosition: JSON.stringify(recipientPosition),
                      adPositionCoords: JSON.stringify(adPositionCoords)
                    };
                    saveSettingsMutation.mutate(settingsData);
                  }}
                  disabled={saveSettingsMutation.isPending}
                >
                  {saveSettingsMutation.isPending ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"}
                </Button>
              </div>
            </DialogContent>
          </Dialog>

          <Button onClick={() => setIsCreateDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            –ù–æ–≤–∏–π –ª–∏—Å—Ç
          </Button>
        </div>
      </div>

      <Tabs defaultValue="mails" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="mails">–õ–∏—Å—Ç–∏</TabsTrigger>
          <TabsTrigger value="registry">–†–µ—î—Å—Ç—Ä –Ω–∞–¥—Å–∏–ª–∞–Ω—å</TabsTrigger>
        </TabsList>

        <TabsContent value="mails" className="space-y-4">
          {/* –ì—Ä—É–ø–æ–≤—ñ –¥—ñ—ó */}
          {selectedItems.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>–ì—Ä—É–ø–æ–≤—ñ –¥—ñ—ó ({selectedItems.length} –æ–±—Ä–∞–Ω–æ)</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex gap-4 items-end">
                  <div className="flex-1">
                    <Label htmlFor="batchName">–ù–∞–∑–≤–∞ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –¥—Ä—É–∫—É</Label>
                    <Input
                      id="batchName"
                      value={batchName}
                      onChange={(e) => setBatchName(e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ª–∏—Å—Ç–æ–ø–∞–¥ 2024"
                    />
                  </div>
                  <Button onClick={handleBatchPrint} disabled={batchPrintMutation.isPending}>
                    <Printer className="h-4 w-4 mr-2" />
                    {batchPrintMutation.isPending ? "–î—Ä—É–∫..." : "–î—Ä—É–∫—É–≤–∞—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏"}
                  </Button>
                  <Button variant="outline" onClick={selectAllItems}>
                    –û–±—Ä–∞—Ç–∏ –≤—Å—ñ —á–µ—Ä–Ω–µ—Ç–∫–∏
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12">
                  <Checkbox
                    checked={selectedItems.length === mails.filter(m => m.status === "draft").length && mails.length > 0}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        selectAllItems();
                      } else {
                        setSelectedItems([]);
                      }
                    }}
                  />
                </TableHead>
                <TableHead>–ö–ª—ñ—î–Ω—Ç</TableHead>
                <TableHead>–¢–µ–º–∞</TableHead>
                <TableHead>–¢–∏–ø</TableHead>
                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                <TableHead>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</TableHead>
                <TableHead>–î—ñ—ó</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mails.map((mail) => (
                <TableRow key={mail.id}>
                  <TableCell>
                    {mail.status === "draft" && (
                      <Checkbox
                        checked={selectedItems.includes(mail.id)}
                        onCheckedChange={() => toggleSelectItem(mail.id)}
                      />
                    )}
                  </TableCell>
                  <TableCell>
                    {clients.find(c => c.id === mail.clientId)?.name || mail.clientId}
                  </TableCell>
                  <TableCell>{mail.subject}</TableCell>
                  <TableCell>
                    <Badge variant="outline">
                      {mail.mailType === "invoice" ? "–†–∞—Ö—É–Ω–æ–∫" : 
                       mail.mailType === "contract" ? "–î–æ–≥–æ–≤—ñ—Ä" : 
                       mail.mailType === "notification" ? "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" : "–Ü–Ω—à–µ"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge className={getStatusColor(mail.status)}>
                      {mail.status === "draft" ? "–ß–µ—Ä–Ω–µ—Ç–∫–∞" :
                       mail.status === "queued" ? "–í —á–µ—Ä–∑—ñ" :
                       mail.status === "sent" ? "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" : "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {mail.createdAt ? new Date(mail.createdAt).toLocaleDateString('uk-UA') : '-'}
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-1">
                      <Button variant="ghost" size="sm">
                        <Eye className="h-4 w-4" />
                      </Button>
                      {mail.status === "draft" && (
                        <Button variant="ghost" size="sm">
                          <Send className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TabsContent>

        <TabsContent value="registry" className="space-y-4">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>–ù–∞–∑–≤–∞ –ø–∞—Ä—Ç—ñ—ó</TableHead>
                <TableHead>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó</TableHead>
                <TableHead>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏—Å—Ç—ñ–≤</TableHead>
                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                <TableHead>–ù–∞–¥—ñ—Å–ª–∞–≤</TableHead>
                <TableHead>–ü—Ä–∏–º—ñ—Ç–∫–∏</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mailRegistry.map((entry) => (
                <TableRow key={entry.id}>
                  <TableCell className="font-medium">{entry.batchName}</TableCell>
                  <TableCell>
                    {new Date(entry.registryDate).toLocaleDateString('uk-UA')}
                  </TableCell>
                  <TableCell>{entry.mailCount}</TableCell>
                  <TableCell>
                    <Badge className={getStatusColor(entry.status)}>
                      {entry.status === "registered" ? "–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ" : 
                       entry.status === "sent" ? "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" : "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"}
                    </Badge>
                  </TableCell>
                  <TableCell>{entry.sentBy || '-'}</TableCell>
                  <TableCell>{entry.notes || '-'}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TabsContent>
      </Tabs>

      {/* –î—ñ–∞–ª–æ–≥ –¥—Ä—É–∫—É –∫–æ–Ω–≤–µ—Ä—Ç—ñ–≤ */}
      <EnvelopePrintDialog
        isOpen={isEnvelopePrintDialogOpen}
        onClose={() => setIsEnvelopePrintDialogOpen(false)}
        mails={currentBatchMails}
        clients={clients}
        batchName={batchName}
      />
    </div>
  );
}