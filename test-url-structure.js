#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–∫–∞—Ç—É —É–Ω–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 */

function testUrlStructure() {
  console.log('=== –¢–ï–°–¢ URL –°–¢–†–£–ö–¢–£–†–ò 1–° ENDPOINTS ===\n');
  
  const baseUrl = 'http://baf.regmik.ua/bitrix/hs/erp';
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è URL –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö
  function getInvoicesUrl(base) {
    let url = base.trim();
    if (!url.endsWith('/')) url += '/';
    url += 'invoices';
    return url;
  }
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è URL –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
  function getOutgoingInvoicesUrl(base) {
    let url = base.trim();
    if (!url.endsWith('/')) url += '/';
    url += 'outgoing-invoices';
    return url;
  }
  
  const invoicesUrl = getInvoicesUrl(baseUrl);
  const outgoingUrl = getOutgoingInvoicesUrl(baseUrl);
  
  console.log('üìã –í—Ö—ñ–¥–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—ñ:');
  console.log(`   URL: ${invoicesUrl}`);
  console.log(`   –ú–µ—Ç–æ–¥: POST`);
  console.log(`   Body: {"action": "getInvoices", "limit": 100}`);
  console.log('');
  
  console.log('üìã –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏:');
  console.log(`   URL: ${outgoingUrl}`);
  console.log(`   –ú–µ—Ç–æ–¥: POST`);
  console.log(`   Body: {"limit": 100}`);
  console.log('');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ URL
  console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:');
  console.log(`   –ë–∞–∑–æ–≤–∏–π URL: ${baseUrl}`);
  console.log(`   –í—Ö—ñ–¥–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—ñ: ${invoicesUrl === baseUrl + '/invoices' ? '‚úÖ' : '‚ùå'} ${invoicesUrl}`);
  console.log(`   –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏: ${outgoingUrl === baseUrl + '/outgoing-invoices' ? '‚úÖ' : '‚ùå'} ${outgoingUrl}`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–æ—Å—Ç—ñ endpoints
  console.log('');
  console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ endpoints:');
  console.log(`   –†—ñ–∑–Ω—ñ URL: ${invoicesUrl !== outgoingUrl ? '‚úÖ' : '‚ùå'} (${invoicesUrl} !== ${outgoingUrl})`);
  
  console.log('');
  console.log('=== –ü–Ü–î–°–£–ú–û–ö ===');
  console.log('‚úÖ –í—ñ–¥–∫–∞—Ç —É–Ω–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('‚úÖ –û–∫—Ä–µ–º—ñ endpoints –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤');
  console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ URL –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞');
  console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testUrlStructure();