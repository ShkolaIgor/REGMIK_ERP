#!/usr/bin/env node

// –¢–µ—Å—Ç 1–° API –Ω–∞–ø—Ä—è–º—É
import pg from 'pg';

const { Pool } = pg;
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function testDirect1CConnection() {
  try {
    console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ 1–°...');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è 1–°
    const integrations = await pool.query(`
      SELECT * FROM integration_configs 
      WHERE type = '1c_accounting' AND is_active = true 
      LIMIT 1
    `);
    
    if (integrations.rows.length === 0) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞ 1–° —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    const config = integrations.rows[0].config;
    console.log('üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é:', config);
    
    // –¢–µ—Å—Ç—É—î–º–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è URL –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö endpoints
    const baseUrl = config.baseUrl;
    const invoicesUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'invoices';
    const outgoingUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'outgoing-invoices';
    
    console.log(`üåê –ë–∞–∑–æ–≤–∏–π URL: ${baseUrl}`);
    console.log(`üì• URL –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö: ${invoicesUrl}`);
    console.log(`üì§ URL –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤: ${outgoingUrl}`);
    
    const testUrl = invoicesUrl;
    
    // –§–æ—Ä–º—É—î–º–æ headers
    const headers = {
      'Accept': 'application/json',
      'User-Agent': 'REGMIK-ERP/1.0'
    };
    
    if (config.clientId && config.clientSecret) {
      headers.Authorization = `Basic ${Buffer.from(config.clientId + ':' + config.clientSecret).toString('base64')}`;
      console.log('üîê –î–æ–¥–∞–Ω–æ Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é');
    }
    
    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ POST –∑–∞–ø–∏—Ç –∑ JSON...');
    const response = await fetch(testUrl, {
      method: 'POST',
      headers: {
        ...headers,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        action: 'getInvoices',
        limit: 50
      }),
      signal: AbortSignal.timeout(10000)
    });
    
    console.log(`üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    console.log(`üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤): ${responseText.substring(0, 500)}`);
    
    if (!response.ok) {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞:', responseText);
    } else {
      console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ JSON
      try {
        const jsonData = JSON.parse(responseText);
        console.log('‚úÖ JSON –≤–∞–ª—ñ–¥–Ω–∏–π, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤:', Array.isArray(jsonData) ? jsonData.length : '–Ω–µ –º–∞—Å–∏–≤');
        
        // –¢–µ—Å—Ç –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
        console.log('\nüì§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤...');
        const outgoingResponse = await fetch(outgoingUrl, {
          method: 'POST',
          headers: {
            ...headers,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            action: 'getOutgoingInvoices',
            limit: 20
          }),
          signal: AbortSignal.timeout(10000)
        });
        
        console.log(`üì§ –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏: ${outgoingResponse.status} ${outgoingResponse.statusText}`);
        
        if (outgoingResponse.ok) {
          const outgoingText = await outgoingResponse.text();
          console.log(`üì§ –í–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): ${outgoingText.substring(0, 200)}`);
          
          try {
            const outgoingData = JSON.parse(outgoingText);
            console.log('‚úÖ –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ JSON –≤–∞–ª—ñ–¥–Ω–∏–π, –∫—ñ–ª—å–∫—ñ—Å—Ç—å:', Array.isArray(outgoingData) ? outgoingData.length : '–Ω–µ –º–∞—Å–∏–≤');
          } catch (e) {
            console.log('‚ö†Ô∏è –í–∏—Ö—ñ–¥–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ - –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON');
          }
        } else {
          console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤: ${outgoingResponse.status}`);
        }
        
      } catch (parseError) {
        console.log('‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º JSON');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ü–û–ú–ò–õ–ö–ê —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
    if (error.name === 'AbortError') {
      console.error('‚è∞ –¢–∞–π–º-–∞—É—Ç –∑–∞–ø–∏—Ç—É (–±—ñ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥)');
    }
  } finally {
    await pool.end();
  }
}

testDirect1CConnection();