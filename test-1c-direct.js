/**
 * –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç API endpoint –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ 1–°
 */

async function testDirect1CConnection() {
  const baseUrl = process.env.REPL_URL ? `https://${process.env.REPL_URL}` : 'http://localhost:5000';
  const endpoint = `${baseUrl}/api/1c/outgoing-invoices`;
  
  console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ 1–° API');
  console.log(`üì° URL: ${endpoint}`);
  
  try {
    // –°–∏–º—É–ª—é—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
    const response = await fetch(endpoint, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
    console.log('üìã Response headers:');
    for (const [key, value] of response.headers.entries()) {
      console.log(`  ${key}: ${value}`);
    }
    
    const responseText = await response.text();
    console.log(`üìÑ Response body length: ${responseText.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
    console.log(`üìÑ Response body (–ø–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤):`);
    console.log(responseText.substring(0, 500));
    
    if (response.ok) {
      try {
        const data = JSON.parse(responseText);
        console.log('\n‚úÖ JSON —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–∏—Ç—å—Å—è');
        console.log(`üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—Ö—É–Ω–∫—ñ–≤: ${Array.isArray(data) ? data.length : '–ù–µ –º–∞—Å–∏–≤'}`);
        
        if (Array.isArray(data) && data.length > 0) {
          console.log('üìã –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫:');
          console.log(JSON.stringify(data[0], null, 2));
        }
      } catch (jsonError) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', jsonError.message);
        console.error('üîß –ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
      }
    } else {
      console.error('‚ùå HTTP –ø–æ–º–∏–ª–∫–∞');
      
      try {
        const errorData = JSON.parse(responseText);
        console.error('üìÑ –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:');
        console.error(JSON.stringify(errorData, null, 2));
      } catch {
        console.error('üìÑ –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏:', responseText);
      }
    }
    
  } catch (networkError) {
    console.error('‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞:', networkError.message);
    console.error('üîß –ú–æ–∂–ª–∏–≤–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testDirect1CConnection().catch(console.error);