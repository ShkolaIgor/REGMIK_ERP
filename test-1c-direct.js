/**
 * –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç API endpoint –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ 1–°
 */

import http from 'http';

async function testDirect1CConnection() {
  console.log('üîß –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç 1–° –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ API\n');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/1c/outgoing-invoices',
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  };

  return new Promise((resolve, reject) => {
    console.log('üì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ http://localhost:3000/api/1c/outgoing-invoices');
    
    const req = http.request(options, (res) => {
      console.log(`üìä –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${res.statusCode}`);
      console.log('üìã Headers:', res.headers);
      
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        console.log('üìÑ –°–∏—Ä—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:');
        console.log(data);
        
        try {
          if (res.statusCode === 200) {
            const jsonData = JSON.parse(data);
            console.log('\n‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø—ñ—à–Ω–∏–π');
            console.log(`üìä –¢–∏–ø –¥–∞–Ω–∏—Ö: ${Array.isArray(jsonData) ? 'Array' : typeof jsonData}`);
            console.log(`üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—Ö—É–Ω–∫—ñ–≤: ${Array.isArray(jsonData) ? jsonData.length : '–Ω–µ –º–∞—Å–∏–≤'}`);
            
            if (Array.isArray(jsonData) && jsonData.length > 0) {
              console.log('\nüìã –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫:');
              console.log(JSON.stringify(jsonData[0], null, 2));
            } else {
              console.log('\n‚ö†Ô∏è  –ú–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –¥–∞–Ω—ñ –Ω–µ —î –º–∞—Å–∏–≤–æ–º');
            }
            
            resolve(jsonData);
          } else {
            console.log(`\n‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ ${res.statusCode}`);
            try {
              const errorData = JSON.parse(data);
              console.log('üìã –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', errorData);
            } catch {
              console.log('üìã –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏:', data);
            }
            reject(new Error(`HTTP ${res.statusCode}: ${data}`));
          }
        } catch (parseError) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:', parseError);
          console.log('üìÑ –ü—Ä–æ–±–ª–µ–º–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:', data);
          reject(parseError);
        }
      });
    });
    
    req.on('error', (error) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑\'—î–¥–Ω–∞–Ω–Ω—è:', error);
      reject(error);
    });
    
    req.on('timeout', () => {
      console.error('‚ùå –¢–∞–π–º-–∞—É—Ç –∑–∞–ø–∏—Ç—É');
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    req.setTimeout(10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º-–∞—É—Ç
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç—É 1–° API...\n');

testDirect1CConnection()
  .then((result) => {
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
    console.log('‚úÖ API endpoint –ø—Ä–∞—Ü—é—î');
    console.log('‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    console.log(`‚úÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–æ ${Array.isArray(result) ? result.length : 0} —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
  })
  .catch((error) => {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ó API:');
    console.error(error.message);
    console.log('\nüí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:');
    console.log('   - –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π');
    console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é (isSimpleAuthenticated)');
    console.log('   - –ü–æ–º–∏–ª–∫–∞ –≤ storage.get1COutgoingInvoices()');
    console.log('   - –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ 1–° —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ');
  });