import nodemailer from "nodemailer";
import Imap from "imap";
import { storage } from "./db-storage";
import type { InsertBankPaymentNotification } from "@shared/schema";

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–º—ñ—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤
 */
export class BankEmailService {
  private transporter: nodemailer.Transporter | null = null;
  private monitoringInterval: NodeJS.Timeout | null = null;
  private isMonitoring = false;
  private notFoundInvoicesCache = new Map<string, number>(); // –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É -> timestamp –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

  constructor() {
    // –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ initializeMonitoring() —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ë–î
    // –ë—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ index.ts –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫–µ—à—É –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ (—Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 24 –≥–æ–¥–∏–Ω–∏)
   */
  private cleanupNotFoundCache(): void {
    const now = Date.now();
    const TWENTY_FOUR_HOURS = 24 * 60 * 60 * 1000;
    
    let cleanedCount = 0;
    for (const [invoiceNumber, timestamp] of this.notFoundInvoicesCache.entries()) {
      if ((now - timestamp) > TWENTY_FOUR_HOURS) {
        this.notFoundInvoicesCache.delete(invoiceNumber);
        cleanedCount++;
      }
    }
    
    if (cleanedCount > 0) {
      console.log(`üè¶ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫–µ—à—É –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
    }
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email
   */
  async initializeEmailMonitoring(): Promise<void> {
    try {
      console.log("üè¶ –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...");
      
      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      let emailSettings;
      try {
        emailSettings = await storage.getEmailSettings();
        console.log("üè¶ –û—Ç—Ä–∏–º–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:", {
          bankMonitoringEnabled: emailSettings?.bankMonitoringEnabled,
          hasBankEmailUser: !!emailSettings?.bankEmailUser,
          hasSmtpHost: !!emailSettings?.smtpHost,
          bankEmailHost: emailSettings?.bankEmailHost
        });
      } catch (dbError) {
        console.log("üè¶ –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∑ –ë–î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:", dbError);
        emailSettings = null;
      }
      
      // –Ø–∫—â–æ –≤ –ë–î —î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
      if (emailSettings?.bankMonitoringEnabled && emailSettings?.bankEmailUser && emailSettings?.bankEmailHost) {
        console.log("üè¶ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö");
        
        if (!this.isMonitoring) {
          this.startMonitoring();
          console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
        }
        
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –ë–î");
        return;
      }
      
      // Fallback –Ω–∞ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è —è–∫—â–æ –≤ –ë–î –Ω–µ–º–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      const bankEmailHost = process.env.BANK_EMAIL_HOST;
      const bankEmailUser = process.env.BANK_EMAIL_USER;
      const bankEmailPassword = process.env.BANK_EMAIL_PASSWORD;
      
      if (!bankEmailHost || !bankEmailUser || !bankEmailPassword) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
        console.log("üè¶ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Email' –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è");
        return;
      }
      
      console.log("üè¶ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è:", {
        hasHost: !!bankEmailHost,
        hasUser: !!bankEmailUser, 
        hasPassword: !!bankEmailPassword,
        host: bankEmailHost
      });

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—ñ –∑–º—ñ–Ω–Ω–∏–º–∏ –æ—Ç–æ—á–µ–Ω–Ω—è
      if (!this.isMonitoring) {
        this.startMonitoring();
        console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
      }

      console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑—ñ –∑–º—ñ–Ω–Ω–∏–º–∏ –æ—Ç–æ—á–µ–Ω–Ω—è");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", error);
    }
  }

  /**
   * –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (—á–µ—Ä–µ–∑ –ë–î)
   */
  async initializeMonitoring(): Promise<void> {
    try {
      console.log("üè¶ –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...");
      const emailSettings = await storage.getEmailSettings();
      
      console.log("üè¶ –û—Ç—Ä–∏–º–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è email:", {
        bankMonitoringEnabled: emailSettings?.bankMonitoringEnabled,
        hasBankEmailUser: !!emailSettings?.bankEmailUser,
        hasSmtpHost: !!emailSettings?.smtpHost,
        smtpPort: emailSettings?.smtpPort
      });
      
      if (!emailSettings?.bankMonitoringEnabled || !emailSettings?.bankEmailUser) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Äin–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ SMTP –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è email
      this.transporter = nodemailer.createTransport({
        host: emailSettings.smtpHost,
        port: emailSettings.smtpPort,
        secure: emailSettings.smtpSecure,
        auth: {
          user: emailSettings.bankEmailUser,
          pass: emailSettings.bankEmailPassword,
        },
      });

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
      if (!this.isMonitoring) {
        this.startMonitoring();
        console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
      }

      console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Äin–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É email –∑ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
   */
  private startMonitoring(): void {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω (–≤—Å—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ)
    this.monitoringInterval = setInterval(async () => {
      try {
        console.log("üè¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
        await this.checkNewEmails();
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email:", error);
        // –õ–æ–≥—É—î–º–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ñ –ª–æ–≥–∏
        await storage.createSystemLog({
          level: 'error',
          category: 'bank-email',
          module: 'bank-monitoring',
          message: `–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email: ${error instanceof Error ? error.message : String(error)}`,
          details: { 
            component: 'bank-email-service',
            error: error instanceof Error ? error.toString() : String(error) 
          },
          userId: null
        });
      }
    }, 5 * 60 * 1000); // 5 —Ö–≤–∏–ª–∏–Ω

    console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  stopMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    this.isMonitoring = false;
    console.log("üè¶ –ó—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email");
  }

  /**
   * –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  async checkForNewEmails(): Promise<void> {
    try {
      console.log("üè¶ –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
      await this.checkNewEmails();
      console.log("üè¶ –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö email –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ email:", error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –ø–æ—à—Ç–∏
   */
  async testBankEmailConnection(host: string, user: string, password: string, port: number = 993): Promise<{success: boolean, message: string, error?: string}> {
    return new Promise((resolve) => {
      const imap = new Imap({
        user: user,
        password: password,
        host: host,
        port: port,
        tls: port === 993, // TLS –¥–ª—è –ø–æ—Ä—Ç—É 993 (SSL), plain –¥–ª—è 143
        tlsOptions: {
          rejectUnauthorized: false
        },
        connTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        authTimeout: 15000, // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      });

      let resolved = false;

      const cleanup = () => {
        if (!resolved) {
          resolved = true;
          try {
            imap.end();
          } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
          }
        }
      };

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
      const timeout = setTimeout(() => {
        if (!resolved) {
          cleanup();
          resolve({
            success: false,
            message: "–¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ IMAP —Å–µ—Ä–≤–µ—Ä–∞",
            error: "Connection timeout after 20 seconds"
          });
        }
      }, 20000);

      imap.once('ready', () => {
        if (!resolved) {
          resolved = true;
          clearTimeout(timeout);
          cleanup();
          resolve({
            success: true,
            message: "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –ø–æ—à—Ç–∏ —É—Å–ø—ñ—à–Ω–µ"
          });
        }
      });

      imap.once('error', (err: any) => {
        if (!resolved) {
          resolved = true;
          clearTimeout(timeout);
          cleanup();
          resolve({
            success: false,
            message: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –ø–æ—à—Ç–∏",
            error: err.message || err.toString()
          });
        }
      });

      try {
        imap.connect();
      } catch (error) {
        if (!resolved) {
          resolved = true;
          clearTimeout(timeout);
          resolve({
            success: false,
            message: "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó IMAP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è",
            error: error instanceof Error ? error.message : String(error)
          });
        }
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –±–∞–Ω–∫—É —á–µ—Ä–µ–∑ IMAP
   */
  private async checkNewEmails(): Promise<void> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ –ë–î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ, fallback –Ω–∞ environment variables
      const bankEmailUser = emailSettings?.bankEmailUser || process.env.BANK_EMAIL_USER;
      const bankEmailPassword = emailSettings?.bankEmailPassword || process.env.BANK_EMAIL_PASSWORD;
      const bankEmailHost = emailSettings?.bankEmailHost || process.env.BANK_EMAIL_HOST || 'mail.regmik.ua';
      const bankEmailPort = emailSettings?.bankEmailPort || parseInt(process.env.BANK_EMAIL_PORT || '587');
      
      if (!bankEmailUser || !bankEmailPassword) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó");
        console.log("üè¶ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Email'");
        return;
      }
      
      if (emailSettings && !emailSettings.bankMonitoringEnabled) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö");
        return;
      }

      console.log("üè¶ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ IMAP –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
      console.log("üè¶ IMAP Host:", bankEmailHost);
      console.log("üè¶ IMAP Port:", bankEmailPort);
      console.log("üè¶ IMAP User:", bankEmailUser);

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è
      // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è IMAP –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ä—Ç—É
      const imapConfig: any = {
        user: bankEmailUser,
        password: bankEmailPassword,
        host: bankEmailHost,
        port: bankEmailPort,
        authTimeout: 15000, // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–≤—ñ–ª—å–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
        connTimeout: 20000, // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        tlsOptions: {
          rejectUnauthorized: false,
          secureProtocol: 'TLSv1_2_method'
        }
      };

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è SSL –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
      const bankSslEnabled = emailSettings?.bankSslEnabled ?? (bankEmailPort === 993);
      
      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è SSL/TLS
      imapConfig.tls = bankSslEnabled;
      
      console.log(`üè¶ SSL –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: ${bankSslEnabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –ø–æ—Ä—Ç–æ–º
      if (bankEmailPort === 993 && !bankSslEnabled) {
        console.log("‚ö†Ô∏è –£–≤–∞–≥–∞: –ø–æ—Ä—Ç 993 –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ SSL");
      } else if (bankEmailPort === 143 && bankSslEnabled) {
        console.log("‚ö†Ô∏è –£–≤–∞–≥–∞: –ø–æ—Ä—Ç 143 –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–∑ SSL");
      } else if (bankEmailPort === 587) {
        console.log("‚ö†Ô∏è –£–≤–∞–≥–∞: –ø–æ—Ä—Ç 587 –∑–∞–∑–≤–∏—á–∞–π –¥–ª—è SMTP, –∞–ª–µ —Å–ø—Ä–æ–±—É—î–º–æ IMAP");
      }

      console.log(`üè¶ IMAP –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: –ø–æ—Ä—Ç=${bankEmailPort}, TLS=${imapConfig.tls}`);
      
      const imap = new Imap(imapConfig);

      return new Promise((resolve, reject) => {
        imap.once('ready', () => {
          console.log("üè¶ IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          
          imap.openBox('INBOX', false, (err: any, box: any) => {
            if (err) {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è INBOX:", err);
              imap.end();
              reject(err);
              return;
            }

            console.log(`üè¶ –í—ñ–¥–∫—Ä–∏—Ç–æ INBOX, –≤—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${box.messages.total}`);

            // –®—É–∫–∞—î–º–æ –í–°–Ü email –≤—ñ–¥ –±–∞–Ω–∫—É (–±–µ–∑ —á–∞—Å–æ–≤–∏—Ö –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è –ø–æ–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∞—Ä—Ö—ñ–≤—É)
            const bankFromAddress = emailSettings?.bankEmailAddress || 'online@ukrsibbank.com';
            console.log(`üè¶ –ü–æ—à—É–∫ –í–°–Ü–• email –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏: –≤—ñ–¥=${bankFromAddress} (–±–µ–∑ —á–∞—Å–æ–≤–∏—Ö –æ–±–º–µ–∂–µ–Ω—å)`);
            
            imap.search([
              ['FROM', bankFromAddress]
              // –í–∏–¥–∞–ª–µ–Ω–æ ['SINCE', lastWeek] —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            ], (err: any, results: any) => {
              if (err) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É email:", err);
                imap.end();
                reject(err);
                return;
              }

              console.log(`üè¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É email: –∑–Ω–∞–π–¥–µ–Ω–æ ${results ? results.length : 0} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);

              if (!results || results.length === 0) {
                console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ INBOX)");
                console.log(`üè¶ –ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è: ${bankFromAddress} (–≤–µ—Å—å –∞—Ä—Ö—ñ–≤)`);
                imap.end();
                resolve();
                return;
              }

              console.log(`üè¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–≤—Å—å–æ–≥–æ –≤ –∞—Ä—Ö—ñ–≤—ñ)`);
              console.log(`üè¶ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...`);

              // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω email - –æ—Ç—Ä–∏–º—É—î–º–æ headers —Ç–∞ –∑–º—ñ—Å—Ç
              const fetch = imap.fetch(results, { 
                bodies: ['HEADER', 'TEXT'], // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ —Ç–µ–∫—Å—Ç
                struct: true,
                markSeen: false  // –ù–ï –ø–æ–º—ñ—á–∞—î–º–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–π
              });
              let processedCount = 0;

              fetch.on('message', (msg: any, seqno: any) => {
                let emailContent = '';
                let emailSubject = '';
                let realMessageId = '';
                let emailDate: Date | null = null; // –°–ø–æ—á–∞—Ç–∫—É null, —â–æ–± —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —â–æ –¥–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
                let headerProcessed = false;
                let textProcessed = false;

                // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –∑–º—ñ—Å—Ç
                msg.on('body', (stream: any, info: any) => {
                  let buffer = '';
                  stream.on('data', (chunk: any) => {
                    buffer += chunk.toString('utf8');
                  });
                  
                  stream.once('end', () => {
                    if (info.which === 'HEADER') {
                      // –í–∏—Ç—è–≥—É—î–º–æ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π Message-ID –∑ headers
                      const messageIdMatch = buffer.match(/Message-ID:\s*<([^>]+)>/i);
                      
                      if (messageIdMatch && messageIdMatch[1] && messageIdMatch[1].trim().length > 5) {
                        realMessageId = messageIdMatch[1].trim();
                        console.log(`üè¶ Email ${seqno} —Å–ø—Ä–∞–≤–∂–Ω—ñ–π Message-ID: ${realMessageId}`);
                      } else {
                        // –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ regex –¥–ª—è Message-ID –±–µ–∑ –∫—É—Ç–æ–≤–∏—Ö –¥—É–∂–æ–∫
                        const altRegex = buffer.match(/Message-ID:\s*([^\r\n\s]+)/i);
                        if (altRegex && altRegex[1] && altRegex[1].trim().length > 5) {
                          realMessageId = altRegex[1].trim();
                          console.log(`üè¶ Email ${seqno} Message-ID (–±–µ–∑ –¥—É–∂–æ–∫): ${realMessageId}`);
                        }
                      }
                      
                      // –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç—É –∑ email –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
                      const dateMatch = buffer.match(/Date:\s*(.*?)\r?\n/i);
                      if (dateMatch) {
                        try {
                          const rawDate = dateMatch[1].trim();
                          console.log(`üè¶ DEBUG: –í–∏—Ç—è–≥–Ω—É—Ç–æ –¥–∞—Ç—É –∑ email ${seqno}: "${rawDate}"`);
                          
                          emailDate = new Date(rawDate);
                          
                          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞
                          if (isNaN(emailDate.getTime())) {
                            console.log(`üè¶ ‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –¥–∞—Ç–∞ email ${seqno}: "${rawDate}", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É`);
                            emailDate = new Date();
                          } else {
                            console.log(`üè¶ ‚úÖ –î–∞—Ç–∞ email ${seqno} –≤–∞–ª—ñ–¥–Ω–∞: ${emailDate.toISOString()}`);
                          }
                        } catch (e) {
                          console.log(`üè¶ ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ email ${seqno}:`, e);
                          emailDate = new Date();
                        }
                      } else {
                        console.log(`üè¶ ‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö email ${seqno}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É`);
                        emailDate = new Date();
                      }
                      headerProcessed = true;
                      checkAndProcessEmail(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥–æ—Ç–æ–≤—ñ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏
                    } else if (info.which === 'TEXT') {
                      emailContent = buffer;
                      console.log(`üè¶ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–º—ñ—Å—Ç email ${seqno}, –¥–æ–≤–∂–∏–Ω–∞: ${buffer.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
                      textProcessed = true;
                      checkAndProcessEmail(); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥–æ—Ç–æ–≤—ñ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏
                    }
                  });
                });

                // –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (subject —Ç–æ—â–æ)
                msg.once('attributes', (attrs: any) => {
                  if (attrs.envelope && attrs.envelope.subject) {
                    emailSubject = attrs.envelope.subject;
                    console.log(`üè¶ Email ${seqno} subject: ${emailSubject}`);
                  }
                  if (attrs.envelope && attrs.envelope.messageId) {
                    // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –∑ headers, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑ envelope
                    if (!realMessageId) {
                      realMessageId = attrs.envelope.messageId;
                      console.log(`üè¶ Email ${seqno} Message-ID –∑ envelope: ${realMessageId}`);
                    }
                  }
                });

                // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —ñ –∑–∞–ø—É—Å–∫—É —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
                const checkAndProcessEmail = async () => {
                  if (!headerProcessed || !textProcessed) {
                    return; // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω—ñ
                  }

                  try {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Message-ID
                    const messageId = realMessageId || `imap-${seqno}-${Date.now()}`;
                    
                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ fallback –¥–∞—Ç—É —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω—É
                    const finalEmailDate = emailDate || new Date();
                    
                    console.log(`üè¶ DEBUG: Email ${seqno} - messageId: "${messageId}"`);
                    console.log(`üè¶ DEBUG: Email ${seqno} - emailDate: ${emailDate ? emailDate.toISOString() : 'NULL'}`);
                    console.log(`üè¶ DEBUG: Email ${seqno} - finalEmailDate: ${finalEmailDate.toISOString()}`);
                    console.log(`üè¶ DEBUG: Email ${seqno} - headerProcessed: ${headerProcessed}, textProcessed: ${textProcessed}`);
                    
                    // –ü–û–ö–†–ê–©–ï–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í - –∑–∞ subject + correspondent + amount
                    const actualSubject = emailSubject || '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è';
                    
                    // –°–ø–æ—á–∞—Ç–∫—É –≤–∏—Ç—è–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ email –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                    let decodedContent = emailContent;
                    try {
                      if (/^[A-Za-z0-9+/]+=*$/.test(emailContent.replace(/\s/g, ''))) {
                        decodedContent = Buffer.from(emailContent, 'base64').toString('utf8');
                        console.log(`üè¶ Email ${seqno} –¥–µ–∫–æ–¥–æ–≤–∞–Ω–æ –∑ Base64`);
                      }
                    } catch (error) {
                      console.log(`üè¶ Email ${seqno} –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è Base64`);
                      decodedContent = emailContent;
                    }

                    // –®–≤–∏–¥–∫–æ –≤–∏—Ç—è–≥—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                    const quickPaymentInfo = this.analyzeBankEmailContent(decodedContent);
                    
                    // –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ó–ê –ö–û–ú–ë–Ü–ù–ê–¶–Ü–Ñ–Æ –ü–û–õ–Ü–í (–ù–ê–î–Ü–ô–ù–Ü–®–ï –ó–ê MESSAGE-ID)
                    if (quickPaymentInfo.correspondent && quickPaymentInfo.amount) {
                      const isDuplicate = await storage.checkPaymentDuplicate({
                        subject: actualSubject,
                        correspondent: quickPaymentInfo.correspondent,
                        amount: quickPaymentInfo.amount.toString()
                      });
                      
                      if (isDuplicate) {
                        console.log(`üè¶‚è≠Ô∏è Email ${seqno} —î –¥—É–±–ª—ñ–∫–∞—Ç–æ–º (subject+correspondent+amount), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
                        processedCount++;
                        
                        if (processedCount === results.length) {
                          console.log(`üè¶ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processedCount}/${results.length} email`);
                          imap.end();
                          resolve();
                        }
                        return;
                      }
                    } else {
                      // Fallback –Ω–∞ MessageId —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                      const existingNotification = await storage.getBankNotificationByMessageId(messageId);
                      if (existingNotification) {
                        console.log(`üè¶‚è≠Ô∏è Email ${seqno} (${messageId}) –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –∑–∞ MessageId, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ`);
                        processedCount++;
                        
                        if (processedCount === results.length) {
                          console.log(`üè¶ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processedCount}/${results.length} email`);
                          imap.end();
                          resolve();
                        }
                        return;
                      }
                    }
                    
                    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç email –∑—ñ —Å–ø—Ä–∞–≤–∂–Ω—ñ–º messageId —Ç–∞ –ü–†–ê–í–ò–õ–¨–ù–û–Æ –î–ê–¢–û–Æ
                    const emailData = {
                      messageId: messageId,
                      subject: actualSubject,
                      fromAddress: emailSettings.bankEmailAddress || 'noreply@ukrsib.com.ua',
                      receivedAt: finalEmailDate, // –î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è email ERP —Å–∏—Å—Ç–µ–º–æ—é
                      emailDate: emailDate, // –î–∞—Ç–∞ –∑ Email –∑–∞–≥–æ–ª–æ–≤–∫–∞ (Date:) - —Ñ–∞–∫—Ç–∏—á–Ω–∞ –¥–∞—Ç–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                      textContent: decodedContent
                    };

                    console.log(`üè¶ –û–±—Ä–æ–±–ª—è—î–º–æ –ù–û–í–ò–ô email ${seqno}:`);
                    console.log(`  Message-ID: ${messageId}`);
                    console.log(`  Subject: ${actualSubject}`);
                    console.log(`  ReceivedAt: ${finalEmailDate.toISOString()}`);

                    const result = await this.processBankEmail(emailData);
                    
                    if (result.success) {
                      console.log(`üè¶‚úÖ Email ${seqno} –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
                    } else if (!result.skipLogging) {
                      console.log(`üè¶‚ö†Ô∏è Email ${seqno}: ${result.message}`);
                    }

                    processedCount++;
                    
                    if (processedCount === results.length) {
                      console.log(`üè¶ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processedCount}/${results.length} email`);
                      imap.end();
                      resolve();
                    }
                  } catch (error) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ email ${seqno}:`, error);
                    processedCount++;
                    
                    if (processedCount === results.length) {
                      imap.end();
                      resolve();
                    }
                  }
                };
              });

              fetch.once('error', (err: any) => {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è email:", err);
                imap.end();
                reject(err);
              });
            });
          });
        });

        imap.once('error', (err: any) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è:", err);
          
          // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
          if (err.textCode === 'AUTHENTICATIONFAILED' || err.message?.includes('Authentication failed')) {
            console.log(`‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: host=${bankEmailHost}, port=${bankEmailPort}, user=${bankEmailUser}`);
            console.log(`‚ùå –ú–æ–∂–ª–∏–≤–∞ –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ–≤—ñ—Ä–Ω—ñ credentials –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø IMAP`);
          }
          
          reject(err);
        });

        imap.connect();
      });
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email:", error);
      
      await storage.createSystemLog({
        level: 'error',
        category: 'bank-email',
        module: 'imap-monitoring',
        message: `–ü–æ–º–∏–ª–∫–∞ IMAP –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${error instanceof Error ? error.message : String(error)}`,
        details: { 
          component: 'bank-email-service',
          function: 'checkNewEmails',
          error: error instanceof Error ? error.toString() : String(error) 
        },
        userId: null
      });
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É
   */
  async processBankEmail(emailContent: {
    messageId: string;
    subject: string;
    fromAddress: string;
    receivedAt: Date;
    emailDate?: Date; // –î–∞—Ç–∞ –∑ Email –∑–∞–≥–æ–ª–æ–≤–∫–∞ (Date:)
    textContent: string;
  }): Promise<{ success: boolean; message: string; notification?: any }> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∞–¥—Ä–µ—Å–∏:");
      console.log("  Email settings:", emailSettings);
      console.log("  Bank email address:", emailSettings?.bankEmailAddress);
      console.log("  From address:", emailContent.fromAddress);
      console.log("  Contains check:", emailContent.fromAddress.includes(emailSettings?.bankEmailAddress || ""));
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ email –≤—ñ–¥ –±–∞–Ω–∫—É
      if (!emailSettings?.bankEmailAddress || !emailContent.fromAddress.includes(emailSettings.bankEmailAddress)) {
        return { success: false, message: "Email –Ω–µ –≤—ñ–¥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∞–¥—Ä–µ—Å–∏" };
      }

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç email –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      const paymentInfo = this.analyzeBankEmailContent(emailContent.textContent);
      
      console.log("üè¶ üîß –†–ï–ó–£–õ–¨–¢–ê–¢ analyzeBankEmailContent:");
      console.log("üè¶ üîß paymentInfo:", JSON.stringify(paymentInfo, null, 2));
      
      if (!paymentInfo) {
        return { success: false, message: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—é –≤ email" };
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      console.log("üè¶ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó:", paymentInfo.operationType);
      
      // –ö–†–ò–¢–ò–ß–ù–ò–ô FIX: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –≤ –ë–î
      let validInvoiceDate: Date | undefined;
      if (paymentInfo.invoiceDate && !isNaN(paymentInfo.invoiceDate.getTime())) {
        validInvoiceDate = paymentInfo.invoiceDate;
        console.log("üè¶ ‚úÖ –î–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É –≤–∞–ª—ñ–¥–Ω–∞:", validInvoiceDate.toLocaleDateString('uk-UA'));
      } else {
        validInvoiceDate = undefined;
        console.log("üè¶ ‚ö†Ô∏è –î–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ undefined");
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ receivedAt –≤–∞–ª—ñ–¥–Ω–∞ –¥–∞—Ç–∞
      let validReceivedAt = emailContent.receivedAt;
      console.log(`üè¶ DEBUG: emailContent.receivedAt = ${emailContent.receivedAt?.toISOString()} (valid: ${!isNaN(emailContent.receivedAt?.getTime() || 0)})`);
      
      if (isNaN(emailContent.receivedAt.getTime())) {
        console.log("üè¶ ‚ö†Ô∏è emailContent.receivedAt –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É (—Ü–µ –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∞—Ç–æ—é –ø–ª–∞—Ç–µ–∂—É!)");
        validReceivedAt = new Date();
      } else {
        console.log(`üè¶ ‚úÖ emailContent.receivedAt –≤–∞–ª—ñ–¥–Ω–∞: ${validReceivedAt.toISOString()}`);
      }

      // –Ø–∫—â–æ —Ü–µ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É - –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–ª–∞—Ç—ñ–∂  
      console.log(`üè¶ –ü–ï–†–ï–í–Ü–†–ö–ê –£–ú–û–í: operationType="${paymentInfo.operationType}", invoiceNumber="${paymentInfo.invoiceNumber}"`);
      if (paymentInfo.operationType === "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ" && paymentInfo.invoiceNumber) {
        // –û—á–∏—â—É—î–º–æ –∫–µ—à –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ
        this.notFoundInvoicesCache.clear();
        
        console.log("üè¶ –†–æ–∑–ø–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –ø–ª–∞—Ç–µ–∂—É...");
        
        // –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ß–ò –¶–ï–ô EMAIL –í–ñ–ï –û–ë–†–û–ë–õ–ï–ù–ò–ô (–∑–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—î—é –ø–æ–ª—ñ–≤ –∑–∞–º—ñ—Å—Ç—å Message-ID)
        const duplicateKey = `${emailContent.subject}-${paymentInfo.correspondent}-${paymentInfo.amount}`;
        console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∑–∞ –∫–ª—é—á–µ–º:", duplicateKey);
        
        // –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ç–∞–∫–æ—é –∂ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—î—é –ø–æ–ª—ñ–≤
        const existingNotifications = await storage.query(`
          SELECT * FROM bank_payment_notifications 
          WHERE subject = $1 AND correspondent = $2 AND amount::text = $3
        `, [emailContent.subject, paymentInfo.correspondent, paymentInfo.amount.toString()]);
        
        if (existingNotifications.length > 0) {
          console.log("üè¶ ‚ö†Ô∏è Email –¥—É–±–ª—ñ–∫–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—î—é –ø–æ–ª—ñ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ");
          return { 
            success: false, 
            message: "Email –¥—É–±–ª—ñ–∫–∞—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ",
            notification: existingNotifications[0] 
          };
        }
        
        // –ó–ê–í–ñ–î–ò —Å—Ç–≤–æ—Ä—é—î–º–æ bank_payment_notification (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)
        const notification: InsertBankPaymentNotification = {
          messageId: emailContent.messageId,
          subject: emailContent.subject,
          fromAddress: emailContent.fromAddress,
          receivedAt: validReceivedAt,
          accountNumber: paymentInfo.accountNumber,
          currency: paymentInfo.currency,
          operationType: paymentInfo.operationType,
          amount: paymentInfo.amount.toString(),
          correspondent: paymentInfo.correspondent,
          paymentPurpose: paymentInfo.paymentPurpose,
          invoiceNumber: paymentInfo.invoiceNumber,
          invoiceDate: validInvoiceDate,
          vatAmount: paymentInfo.vatAmount?.toString(),
          processed: false, // –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏–π
          orderId: null, // –°–ø–æ—á–∞—Ç–∫—É –±–µ–∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          rawEmailContent: emailContent.textContent,
        };

        console.log("üè¶ üîß –ü–ï–†–ï–î –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø–ú notification:");
        console.log("üè¶ üîß currency:", `"${notification.currency}" (length: ${notification.currency?.length})`);
        console.log("üè¶ üîß operationType:", `"${notification.operationType}" (length: ${notification.operationType?.length})`);
        console.log("üè¶ üîß accountNumber:", `"${notification.accountNumber}" (length: ${notification.accountNumber?.length})`);

        const savedNotification = await storage.createBankPaymentNotification(notification);
        
        // –ü–Ü–°–õ–Ø —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è notification —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è  
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ –≤–µ—Å—å emailContent –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –¥–∞—Ç–∏ –ø–ª–∞—Ç–µ–∂—É
        const paymentResult = await this.processPayment(savedNotification.id, paymentInfo, emailContent);
        
        if (paymentResult.success) {
          // –û–Ω–æ–≤–ª—é—î–º–æ notification —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –∑ orderId
          await storage.query(`
            UPDATE bank_payment_notifications 
            SET processed = true, order_id = $1 
            WHERE id = $2
          `, [paymentResult.orderId, savedNotification.id]);
          
          // –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–±—Ä–æ–±–∫—É –ø–ª–∞—Ç–µ–∂—É
          await storage.createSystemLog({
            level: 'info',
            category: 'bank-payment',
            module: 'payment-processing',
            message: `–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${paymentInfo.invoiceNumber}`,
            details: { 
              component: 'bank-email-service',
              invoiceNumber: paymentInfo.invoiceNumber,
              orderId: paymentResult.orderId,
              amount: paymentInfo.amount
            },
            userId: null
          });
        } else {
          // –ó–∞–ª–∏—à–∞—î–º–æ notification —è–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏–π (processed = false)
          console.log("üè¶‚è≠Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–µ");
          
          // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É
          await storage.createSystemLog({
            level: 'warn',
            category: 'bank-payment',
            module: 'payment-processing',
            message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${paymentResult.message}`,
            details: { 
              component: 'bank-email-service',
              invoiceNumber: paymentInfo.invoiceNumber,
              error: paymentResult.message,
              amount: paymentInfo.amount,
              notificationId: savedNotification.id
            },
            userId: null
          });
        }

        return {
          success: paymentResult.success,
          message: paymentResult.success ? 
            `–ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ${paymentInfo.invoiceNumber} –Ω–∞ —Å—É–º—É ${paymentInfo.amount} UAH` :
            `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É ${paymentInfo.invoiceNumber}, email –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ`
        };
      }

      // –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –í–°–Ü–• –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–æ–º–µ—Ä—É —Ä–∞—Ö—É–Ω–∫—É
      console.log("üè¶ –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –û–±—Ä–æ–±–ª—è—î–º–æ email –±–µ–∑ –Ω–æ–º–µ—Ä—É —Ä–∞—Ö—É–Ω–∫—É –∞–±–æ –Ω–µ '–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ'");
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ–π email –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –∑–∞ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
      const isDuplicate = await storage.checkPaymentDuplicate({
        subject: emailContent.subject,
        correspondent: paymentInfo.correspondent,
        amount: paymentInfo.amount.toString()
      });

      if (isDuplicate) {
        console.log(`üè¶ ‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏`);
        return { 
          success: false, 
          skipLogging: true, // –ù–µ –ª–æ–≥—É—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
          message: "Email –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π (–¥—É–±–ª—ñ–∫–∞—Ç –∑–∞ subject+correspondent+amount)" 
        };
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –í–°–Ü–• email
      console.log("üè¶ üîß –î–†–£–ì–ò–ô –ë–õ–û–ö - –ü–ï–†–ï–î –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø–ú notification:");
      console.log("üè¶ üîß paymentInfo.currency:", `"${paymentInfo.currency}" (length: ${paymentInfo.currency?.length})`);
      console.log("üè¶ üîß paymentInfo.operationType:", `"${paymentInfo.operationType}" (length: ${paymentInfo.operationType?.length})`);
      
      const notification: InsertBankPaymentNotification = {
        messageId: emailContent.messageId,
        subject: emailContent.subject,
        fromAddress: emailContent.fromAddress,
        receivedAt: validReceivedAt,
        accountNumber: paymentInfo.accountNumber,  
        currency: paymentInfo.currency,
        operationType: paymentInfo.operationType,
        amount: paymentInfo.amount.toString(),
        correspondent: paymentInfo.correspondent,
        paymentPurpose: paymentInfo.paymentPurpose,
        invoiceNumber: paymentInfo.invoiceNumber || null,
        invoiceDate: validInvoiceDate || null,
        vatAmount: paymentInfo.vatAmount?.toString() || null,
        processed: false, // –í—Å—ñ –∑–∞–ø–∏—Å–∏ –ø–æ—á–∏–Ω–∞—é—Ç—å —è–∫ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ
        orderId: null,
        rawEmailContent: emailContent.textContent,
      };

      console.log("üè¶ üîß notification.currency:", `"${notification.currency}" (length: ${notification.currency?.length})`);

      const savedNotification = await storage.createBankPaymentNotification(notification);
      console.log(`üè¶ ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: ${savedNotification.id} –¥–ª—è –í–°–Ü–• —Ç–∏–ø—ñ–≤ email`);

      return {
        success: true,
        message: `–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${paymentInfo.operationType} –Ω–∞ —Å—É–º—É ${paymentInfo.amount} ${paymentInfo.currency}`,
        notification: savedNotification
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", error);
      
      // –õ–æ–≥—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
      await storage.createSystemLog({
        level: 'error',
        category: 'bank-email',
        module: 'bank-monitoring',
        message: `–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email: ${errorMessage}`,
        details: { 
          component: 'bank-email-service',
          error: error instanceof Error ? error.toString() : String(error),
          emailFrom: emailContent.fromAddress,
          emailSubject: emailContent.subject
        },
        userId: null
      });
      
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMessage}` };
    }
  }

  /**
   * –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ø–∞—Ä—Å–∏–Ω–≥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–∞–∑–≤ –º—ñ—Å—è—Ü—ñ–≤ —É –¥–∞—Ç–∏
   */
  private parseUkrainianDate(dateString: string): Date | null {
    try {
      console.log(`üè¶ –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: "${dateString}"`);
      
      const ukrainianMonths: { [key: string]: number } = {
        '—Å—ñ—á–Ω—è': 1, '—Å—ñ—á–Ω—ñ': 1, '—Å—ñ—á–µ–Ω—å': 1,
        '–ª—é—Ç–æ–≥–æ': 2, '–ª—é—Ç–æ–º—É': 2, '–ª—é—Ç–∏–π': 2,
        '–±–µ—Ä–µ–∑–Ω—è': 3, '–±–µ—Ä–µ–∑–Ω—ñ': 3, '–±–µ—Ä–µ–∑–µ–Ω—å': 3,
        '–∫–≤—ñ—Ç–Ω—è': 4, '–∫–≤—ñ—Ç–Ω—ñ': 4, '–∫–≤—ñ—Ç–µ–Ω—å': 4,
        '—Ç—Ä–∞–≤–Ω—è': 5, '—Ç—Ä–∞–≤–Ω—ñ': 5, '—Ç—Ä–∞–≤–µ–Ω—å': 5,
        '—á–µ—Ä–≤–Ω—è': 6, '—á–µ—Ä–≤–Ω—ñ': 6, '—á–µ—Ä–≤–µ–Ω—å': 6,
        '–ª–∏–ø–Ω—è': 7, '–ª–∏–ø–Ω—ñ': 7, '–ª–∏–ø–µ–Ω—å': 7,
        '—Å–µ—Ä–ø–Ω—è': 8, '—Å–µ—Ä–ø–Ω—ñ': 8, '—Å–µ—Ä–ø–µ–Ω—å': 8,
        '–≤–µ—Ä–µ—Å–Ω—è': 9, '–≤–µ—Ä–µ—Å–Ω—ñ': 9, '–≤–µ—Ä–µ—Å–µ–Ω—å': 9,
        '–∂–æ–≤—Ç–Ω—è': 10, '–∂–æ–≤—Ç–Ω—ñ': 10, '–∂–æ–≤—Ç–µ–Ω—å': 10,
        '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 11, '–ª–∏—Å—Ç–æ–ø–∞–¥—ñ': 11, '–ª–∏—Å—Ç–æ–ø–∞–¥': 11,
        '–≥—Ä—É–¥–Ω—è': 12, '–≥—Ä—É–¥–Ω—ñ': 12, '–≥—Ä—É–¥–µ–Ω—å': 12
      };

      // –§–æ—Ä–º–∞—Ç: "22 –ª–∏–ø–Ω—è 2025 —Ä."
      const ukrainianMatch = dateString.match(/(\d{1,2})\s+([–∞-—è—ë]+)\s+(\d{4})/i);
      if (ukrainianMatch) {
        const [, day, month, year] = ukrainianMatch;
        const monthNum = ukrainianMonths[month.toLowerCase()];
        if (monthNum) {
          const date = new Date(parseInt(year), monthNum - 1, parseInt(day));
          if (!isNaN(date.getTime())) {
            console.log(`üè¶ ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –¥–∞—Ç–∏: "${dateString}" ‚Üí ${date.toISOString()}`);
            return date;
          }
        }
      }

      // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π regex –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É: "22.07.25—Ä." –∞–±–æ "22.07.2025" –∞–±–æ "22.07.2025—Ä."
      const numericMatch = dateString.match(/(\d{1,2})\.(\d{1,2})\.(\d{2,4})(?:—Ä\.?)?/i);
      if (numericMatch) {
        const [, day, month, yearPart] = numericMatch;
        let year = parseInt(yearPart);
        if (yearPart.length === 2) {
          year = 2000 + year; // 25 ‚Üí 2025
        }
        
        const date = new Date(year, parseInt(month) - 1, parseInt(day));
        if (!isNaN(date.getTime())) {
          console.log(`üè¶ ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤–æ—ó –¥–∞—Ç–∏: "${dateString}" ‚Üí ${date.toISOString()}`);
          return date;
        }
      }

      // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: "–≤—ñ–¥ –î–î.–ú–ú.–†–†–†–†" –∞–±–æ –ø—Ä–æ—Å—Ç–æ "–î–î.–ú–ú.–†–†–†–†"
      const additionalMatch = dateString.match(/(?:–≤—ñ–¥\s+)?(\d{1,2})\.(\d{1,2})\.(\d{4})/i);
      if (additionalMatch) {
        const [, day, month, year] = additionalMatch;
        const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        if (!isNaN(date.getTime())) {
          console.log(`üè¶ ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É: "${dateString}" ‚Üí ${date.toISOString()}`);
          return date;
        }
      }

      console.log(`üè¶ ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: "${dateString}"`);
      return null;
    } catch (error) {
      console.error(`üè¶ ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ "${dateString}":`, error);
      return null;
    }
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
   */
  private analyzeBankEmailContent(emailText: string): {
    accountNumber: string;
    currency: string;
    operationType: string;
    amount: number;
    correspondent: string;
    paymentPurpose: string;
    invoiceNumber?: string;
    invoiceDate?: Date;
    vatAmount?: number;
    paymentTime?: string;
  } | null {
    try {
      console.log("üè¶ –°–¢–ê–†–¢ –ê–ù–ê–õ–Ü–ó–£ EMAIL –ö–û–ù–¢–ï–ù–¢–£");
      console.log("üè¶ –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É email:", emailText.substring(0, 200) + "...");
      
      // –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å –æ–ø–ª–∞—Ç–∏ –∑ email (—Ñ–æ—Ä–º–∞—Ç: "18:10" - –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ—Å–ª—è <br>)
      const timeMatch = emailText.match(/(?:^|<br>\s*)(\d{1,2}:\d{2})/);
      const paymentTime = timeMatch ? timeMatch[1] : undefined;
      console.log("üè¶ –ß–∞—Å –ø–ª–∞—Ç–µ–∂—É –≤–∏—Ç—è–≥–Ω—É—Ç–æ:", paymentTime);
      
      // –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–Ü —Ä–µ–≥–µ–∫—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –£–∫—Ä—Å—ñ–±–±–∞–Ω–∫—É (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞/—Ä–æ—Å—ñ–π—Å—å–∫–∞)
      const accountMatch = emailText.match(/—Ä—É—Ö –∫–æ—à—Ç—ñ–≤ –ø–æ —Ä–∞—Ö—É–Ω–∫—É:\s*([A-Z0-9]+)/i);
      const currencyMatch = emailText.match(/–≤–∞–ª—é—Ç–∞(?:\s+–æ–ø–µ—Ä–∞—Ü—ñ—ó|\s+–æ–ø–µ—Ä–∞—Ü–∏–∏)?:\s*([A-Z]{3})/i) || emailText.match(/(\d+[,\.]\d+)\s*(UAH|USD|EUR)/i);
      // –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô —Ñ–æ—Ä–º–∞—Ç: "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:" –∞–±–æ "–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:"
      const operationMatch = emailText.match(/—Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ[—ó–∏—ñ]:\s*([^\n\r,]+)/i);
      // –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô —Ñ–æ—Ä–º–∞—Ç: "—Å—É–º–º–∞:" –∞–±–æ "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:"
      const amountMatch = emailText.match(/(?:—Å—É–º–º?–∞(?:\s+–æ–ø–µ—Ä–∞—Ü—ñ[—ó–∏—ñ])?|—Å—É–º–º–∞):\s*([\d,\.]+)/i);
      // –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô —Ñ–æ—Ä–º–∞—Ç: "–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:" –∞–±–æ "–ö–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:" - –≤–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó
      let correspondentMatch = emailText.match(/–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:\s*([^,<]+)/i);
      if (!correspondentMatch) {
        correspondentMatch = emailText.match(/–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:\s*(.+?)(?:,\s*<br>)/i);
      }
      // –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô —Ñ–æ—Ä–º–∞—Ç: "–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:" –∞–±–æ "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:"
      const purposeMatch = emailText.match(/–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:\s*(.+)/i);
      
      console.log("üè¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —Ä–µ–≥–µ–∫—Å–ø—ñ–≤:");
      console.log("  accountMatch:", accountMatch?.[1]);
      console.log("  currencyMatch:", currencyMatch?.[1]);
      console.log("  operationMatch:", operationMatch?.[1]);
      console.log("  amountMatch:", amountMatch?.[1]);
      console.log("  correspondentMatch:", correspondentMatch?.[1]);
      console.log("  purposeMatch:", purposeMatch?.[1]);
      
      // EMERGENCY FIX: –Ø–∫—â–æ correspondentMatch –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –≤–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º
      if (!correspondentMatch) {
        console.log("üè¶ EMERGENCY: –í–∏–∫–æ–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø–æ—à—É–∫ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞...");
        
        try {
          // –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é "–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:" (–º–æ–∂–µ –±—É—Ç–∏ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è)
          const searchVariants = [
            '–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:',
            '–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:',
            '–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: ',
            '–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç: ',
            ' –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:',
            ' –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:'
          ];
          
          let correspondentIndex = -1;
          let keywordLength = 0;
          
          for (const variant of searchVariants) {
            correspondentIndex = emailText.indexOf(variant);
            if (correspondentIndex !== -1) {
              keywordLength = variant.length;
              console.log("üè¶ EMERGENCY: –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç:", variant, "–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó:", correspondentIndex);
              break;
            }
          }
          if (correspondentIndex !== -1) {
            const startPos = correspondentIndex + keywordLength;
            let endPos = emailText.indexOf(',', startPos);
            const brPos = emailText.indexOf('<br>', startPos);
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–±–ª–∏–∂—á—É –ø–æ–∑–∏—Ü—ñ—é
            if (endPos === -1 || (brPos !== -1 && brPos < endPos)) {
              endPos = brPos;
            }
            
            if (endPos > startPos) {
              const correspondentText = emailText.substring(startPos, endPos).trim();
              console.log("üè¶ EMERGENCY: ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞:", correspondentText);
              correspondentMatch = [null, correspondentText]; // Fake regex match format
            } else {
              console.log("üè¶ EMERGENCY: ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—ñ–Ω–µ—Ü—å —ñ–º–µ–Ω—ñ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞");
            }
          } else {
            console.log("üè¶ EMERGENCY: ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É '–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:'");
            // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π debug - –ø–æ–∫–∞–∑—É—î–º–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            const keywordPos = emailText.toLowerCase().indexOf('–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç');
            if (keywordPos !== -1) {
              const fragment = emailText.substring(keywordPos, keywordPos + 50);
              console.log("üè¶ EMERGENCY DEBUG: –§—Ä–∞–≥–º–µ–Ω—Ç –∑ '–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç':", fragment);
            }
          }
        } catch (emergencyError) {
          console.log("üè¶ EMERGENCY: ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ emergency –ø–æ—à—É–∫—É:", emergencyError);
        }
      }
      
      // DEBUG: –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ —î —Å–ª–æ–≤–æ "–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç" –≤ —Ç–µ–∫—Å—Ç—ñ
      const hasCorrespondent = emailText.toLowerCase().includes('–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç');
      console.log("üè¶ DEBUG: –ß–∏ —î '–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç' –≤ —Ç–µ–∫—Å—Ç—ñ:", hasCorrespondent);
      if (hasCorrespondent) {
        const correspondentIndex = emailText.toLowerCase().indexOf('–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç');
        const contextAround = emailText.substring(correspondentIndex - 10, correspondentIndex + 100);
        console.log("üè¶ DEBUG: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–≤–∫–æ–ª–æ '–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç':", contextAround);
      }
      
      // –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ü–û–®–£–ö –ù–û–ú–ï–†–Ü–í –†–ê–•–£–ù–ö–Ü–í
      // 1. –®—É–∫–∞—î–º–æ –≤ —Ç–µ–∫—Å—Ç—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –Ω–æ–º–µ—Ä–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤
      let invoiceMatch = null;
      let invoiceNumber = "";
      
      console.log("üè¶ üîç –ü–û–ß–ê–¢–û–ö –ù–û–í–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–£ –ü–û–®–£–ö–£ –ù–û–ú–ï–†–Ü–í –†–ê–•–£–ù–ö–Ü–í");
      
      // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç 1: –ü–æ—à—É–∫ –≤ purposeMatch (–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É)
      let isFullInvoiceNumber = false; // –§–ª–∞–≥ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ —î –Ω–æ–º–µ—Ä –ø–æ–≤–Ω–∏–º
      let partialInvoiceNumber = null; // –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      
      if (purposeMatch?.[1]) {
        console.log("üè¶ –ü–æ—à—É–∫ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Ö—É–Ω–∫—É –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É:", purposeMatch[1]);
        
        // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –†–ú00-XXXXXX
        const fullInvoiceMatch = purposeMatch[1].match(/–†–ú00[-\s]*(\d{5,6})/i);
        if (fullInvoiceMatch) {
          const rawNumber = fullInvoiceMatch[1];
          invoiceNumber = `–†–ú00-${rawNumber.padStart(6, '0')}`;
          invoiceMatch = fullInvoiceMatch;
          isFullInvoiceNumber = true;
          console.log("üè¶ ‚úÖ –ü–û–í–ù–ò–ô –ù–û–ú–ï–† –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ:", fullInvoiceMatch[0], "‚Üí", invoiceNumber);
        } else {
          // –®—É–∫–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä: "–∑–≥—ñ–¥–Ω–æ —Ä–∞—Ö.‚Ññ 27751", "—Ä–∞—Ö ‚Ññ27759", "‚Ññ 27779", "No 27771"
          let purposeInvoiceMatch = purposeMatch[1].match(/(?:—Ä–∞—Ö\.?\s*)?‚Ññ\s*(\d+)/i);
          
          // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É "No XXXXX"
          if (!purposeInvoiceMatch) {
            purposeInvoiceMatch = purposeMatch[1].match(/\bNo\s+(\d+)/i);
          }
          
          if (purposeInvoiceMatch) {
            partialInvoiceNumber = purposeInvoiceMatch[1];
            invoiceNumber = partialInvoiceNumber; // –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —î
            invoiceMatch = purposeInvoiceMatch;
            isFullInvoiceNumber = false;
            console.log("üè¶ ‚úÖ –ß–ê–°–¢–ö–û–í–ò–ô –ù–û–ú–ï–† –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ:", partialInvoiceNumber, "‚Üí –ø–æ—Ç—Ä–µ–±—É—î —Å–∫–ª–∞–¥–Ω–æ–≥–æ –ø–æ—à—É–∫—É");
          } else {
            console.log("üè¶ ‚ùå –ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ");
          }
        }
      }
      
      // –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ù–ï —à—É–∫–∞—î–º–æ –Ω–æ–º–µ—Ä–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ!
      // –¢—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–æ–≤–æ–≥–æ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
      
      // –Ø–ö–©–û –ù–ï –ó–ù–ê–ô–î–ï–ù–û –í –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ü - –í–°–¢–ê–ù–û–í–õ–Æ–Ñ–ú–û null
      if (!invoiceMatch) {
        console.log("üè¶ ‚ùå –ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É - –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–æ—à—É–∫");
        invoiceNumber = "";
        partialInvoiceNumber = null;
        isFullInvoiceNumber = false;
      }
      
      // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É —Ä–∞—Ö—É–Ω–∫—É (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–∞ —á–∏—Å–ª–æ–≤–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤)
      // –§–æ—Ä–º–∞—Ç–∏: "–≤—ñ–¥ 22 –ª–∏–ø–Ω—è 2025 —Ä.", "–≤—ñ–¥ 18.07.2025", "–≤—ñ–¥ 18.07.25—Ä."
      let dateMatch = emailText.match(/–≤—ñ–¥\s*(\d{1,2}\s+[–∞-—è—ë]+\s+\d{4}\s*—Ä?\.?)/i);
      if (!dateMatch) {
        dateMatch = emailText.match(/–≤—ñ–¥\s*(\d{2}\.\d{2}\.(?:\d{4}|\d{2}—Ä?))/i);
      }
      
      console.log("üè¶ –ü–æ—à—É–∫ –¥–∞—Ç–∏ —Ä–∞—Ö—É–Ω–∫—É:", dateMatch?.[1]);
      
      // –®—É–∫–∞—î–º–æ –ü–î–í
      const vatMatch = emailText.match(/–ü–î–í.*?(\d+[,\.]\d+)/i);
      
      // –í–∏–¥–∞–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç –ø–æ—à—É–∫—É - –æ—Å–Ω–æ–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î purposeMatch
      
      console.log("üè¶ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–≥–µ–∫—Å–∏:");
      console.log("  invoiceMatch:", invoiceMatch);
      console.log("  invoiceNumber (final):", invoiceNumber);
      console.log("  isFullInvoiceNumber:", isFullInvoiceNumber);
      console.log("  partialInvoiceNumber:", partialInvoiceNumber);
      console.log("  dateMatch:", dateMatch);
      console.log("  vatMatch:", vatMatch);

      // FINAL FIX: –Ø–∫—â–æ correspondentMatch –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –≤–∏—Ç—è–≥—É—î–º–æ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ä–µ–≥–µ–∫—Å—ñ–≤
      if (!correspondentMatch && invoiceMatch?.input) {
        console.log("üè¶ FINAL FIX: –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∑ –ø–æ–≤–Ω–æ–≥–æ input —Ç–µ–∫—Å—Ç—É...");
        const fullText = invoiceMatch.input;
        const correspondentMatch2 = fullText.match(/–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:\s*([^<,]+)/i);
        if (correspondentMatch2) {
          correspondentMatch = correspondentMatch2;
          console.log("üè¶ FINAL FIX: ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞:", correspondentMatch2[1]);
        }
      }

      console.log("üè¶ üîß DEBUG –°–¢–ê–¢–£–° –ü–ï–†–ï–î –ü–ï–†–ï–í–Ü–†–ö–ê–ú–ò:");
      console.log("üè¶ üîß operationMatch:", !!operationMatch, operationMatch?.[1]);
      console.log("üè¶ üîß correspondentMatch:", !!correspondentMatch, correspondentMatch?.[1]);
      console.log("üè¶ üîß amountMatch:", !!amountMatch, amountMatch?.[1]);
      console.log("üè¶ üîß currencyMatch:", !!currencyMatch, currencyMatch?.[1]);

      // –í–∏—Ç—è–≥—É—î–º–æ —Å—É–º—É –∑ amountMatch –∞–±–æ currencyMatch
      let amount: number;
      console.log("üè¶ –ü–û–ß–ê–¢–û–ö –í–ò–¢–Ø–ì–£–í–ê–ù–ù–Ø –°–£–ú–ò:");
      console.log("üè¶ amountMatch:", amountMatch);
      console.log("üè¶ currencyMatch:", currencyMatch);
      
      if (amountMatch) {
        const amountStr = amountMatch[1].replace(',', '.'); // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ–º–∏ ‚Üí –∫—Ä–∞–ø–∫–∏
        amount = parseFloat(amountStr);
        console.log("üè¶ ‚úÖ –°—É–º–∞ –∑ amountMatch:", amount);
      } else if (currencyMatch) {
        // –Ø–∫—â–æ amountMatch –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ –∑ currencyMatch
        const amountStr = currencyMatch[1].replace(',', '.'); // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ–º–∏ ‚Üí –∫—Ä–∞–ø–∫–∏
        amount = parseFloat(amountStr);
        console.log("üè¶ ‚úÖ –°—É–º–∞ –∑ currencyMatch:", amount);
      } else {
        console.log("üè¶ ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—É–º—É –≤ email");
        return null;
      }
      
      console.log("üè¶ –û–¢–†–ò–ú–ê–ù–ê –°–£–ú–ê:", amount, "—Ç–∏–ø:", typeof amount, "isNaN:", isNaN(amount));

      // –î–ª—è –∫–∞—Ä—Ç–∫–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π accountMatch –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º
      if (!operationMatch || isNaN(amount) || !correspondentMatch) {
        console.log("üè¶ –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
        console.log("üè¶ –ù–û–í–ò–ô DEBUG: operationMatch:", !!operationMatch, "amount:", amount, "isNaN(amount):", isNaN(amount), "correspondentMatch:", !!correspondentMatch);
        return null;
      }

      console.log("üè¶ ‚úÖ –£–°–ü–Ü–®–ù–û –†–û–ó–ü–Ü–ó–ù–ê–ù–û EMAIL! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É");
      console.log("üè¶ ‚úÖ operation:", operationMatch[1], "amount:", amount, "correspondent:", correspondentMatch[1]);

      const vatAmount = vatMatch ? parseFloat(vatMatch[1].replace(',', '.')) : undefined;

      let invoiceDate: Date | undefined;
      if (dateMatch) {
        const datePart = dateMatch[1];
        console.log(`üè¶ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç—ñ: "${datePart}"`);
        
        // –ù–û–í–ò–ô –ü–Ü–î–•–Ü–î: –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        invoiceDate = this.parseUkrainianDate(datePart);
        
        // –Ø–∫—â–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        if (!invoiceDate) {
          const [day, month, yearPart] = datePart.split('.');
          
          // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ä–æ–∫—É: 2025, 25—Ä., 25
          let year: string;
          if (yearPart && yearPart.length === 4) {
            year = yearPart; // 2025
          } else if (yearPart && (yearPart.endsWith('—Ä.') || yearPart.endsWith('—Ä'))) {
            year = '20' + yearPart.replace(/—Ä\.?/, ''); // 25—Ä. ‚Üí 2025
          } else if (yearPart && yearPart.length === 2) {
            year = '20' + yearPart; // 25 ‚Üí 2025
          } else if (yearPart) {
            year = yearPart;
          } else {
            console.log(`üè¶ ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ä—ñ–∫ —É –¥–∞—Ç—ñ: "${datePart}"`);
            year = new Date().getFullYear().toString(); // Fallback –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫
          }
          
          try {
            invoiceDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
            // –ö–†–ò–¢–ò–ß–ù–ò–ô FIX: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞
            if (isNaN(invoiceDate.getTime())) {
              console.error(`üè¶ ‚ùå –°—Ç–≤–æ—Ä–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞: "${datePart}" ‚Üí Invalid Date`);
              invoiceDate = undefined;
            } else {
              console.log(`üè¶ ‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –¥–∞—Ç—É (—Å—Ç–∞—Ä–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º): ${datePart} ‚Üí ${invoiceDate.toLocaleDateString('uk-UA')}`);
            }
          } catch (error) {
            console.error(`üè¶ ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∏ –∑ "${datePart}":`, error);
            invoiceDate = undefined;
          }
        }
      }

      // –û—á–∏—â–∞—î–º–æ operationType –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —ñ —Ç–µ–∫—Å—Ç—É (–≤–∫–ª—é—á–Ω–æ –∑ –∫–æ–º–∞–º–∏)
      const cleanOperationType = operationMatch[1].trim().split('\n')[0].trim().replace(/[,\.;]+$/, '');
      
      console.log("üè¶ –û—á–∏—â–µ–Ω–∞ operationType:", cleanOperationType);
      console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ '–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ':", cleanOperationType === "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ");
      console.log("üè¶ üÜï –ù–û–í–ê –õ–û–ì–Ü–ö–ê: isFullInvoiceNumber:", isFullInvoiceNumber);
      console.log("üè¶ üÜï –ù–û–í–ê –õ–û–ì–Ü–ö–ê: partialInvoiceNumber:", partialInvoiceNumber);
      console.log("üè¶ üÜï –ù–û–í–ê –õ–û–ì–Ü–ö–ê: invoiceNumber:", invoiceNumber);
      console.log("üè¶ –ü–æ–≤–µ—Ä—Ç–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ operationType:", cleanOperationType);

      // –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–∫—Å—É –†–ú00- –¥–æ —á–∞—Å—Ç–∫–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
      let finalInvoiceNumber = invoiceNumber;
      let finalPartialInvoiceNumber = partialInvoiceNumber;
      
      if (partialInvoiceNumber && !isFullInvoiceNumber) {
        // –î–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å –†–ú00- –¥–æ —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É
        const paddedNumber = partialInvoiceNumber.padStart(6, '0'); // 27779 ‚Üí 027779
        finalInvoiceNumber = `–†–ú00-${paddedNumber}`; // –†–ú00-027779
        console.log(`üè¶ ‚úÖ –ê–í–¢–û–ü–ï–†–ï–¢–í–û–†–ï–ù–ù–Ø: ${partialInvoiceNumber} ‚Üí ${finalInvoiceNumber}`);
      }

      // –í–∏—Ç—è–≥—É—î–º–æ –≤–∞–ª—é—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑ currencyMatch
      console.log("üè¶ üîß –ü–û–ß–ê–¢–û–ö –í–ò–¢–Ø–ì–£–í–ê–ù–ù–Ø –í–ê–õ–Æ–¢–ò:");
      console.log("üè¶ üîß currencyMatch:", currencyMatch);
      console.log("üè¶ üîß currencyMatch.length:", currencyMatch?.length);
      
      let currency = "UAH"; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      if (currencyMatch) {
        // –ü–µ—Ä—à–∏–π regex: –≤–∞–ª—é—Ç–∞ –≤ [1] –≥—Ä—É–ø—ñ
        // –î—Ä—É–≥–∏–π regex: —Å—É–º–∞ –≤ [1], –≤–∞–ª—é—Ç–∞ –≤ [2] –≥—Ä—É–ø—ñ  
        if (currencyMatch.length === 2) {
          // –ü–µ—Ä—à–∏–π regex: /–≤–∞–ª—é—Ç–∞.*?:\s*([A-Z]{3})/i
          currency = currencyMatch[1];
          console.log("üè¶ üîß –í–∞–ª—é—Ç–∞ –∑ regex 1 (group[1]):", currency);
        } else if (currencyMatch.length === 3) {
          // –î—Ä—É–≥–∏–π regex: /(\d+[,\.]\d+)\s*(UAH|USD|EUR)/i
          currency = currencyMatch[2];
          console.log("üè¶ üîß –í–∞–ª—é—Ç–∞ –∑ regex 2 (group[2]):", currency);
        }
      }
      
      console.log("üè¶ üîß –û–°–¢–ê–¢–û–ß–ù–ê –í–ò–¢–Ø–ì–ù–£–¢–ê –í–ê–õ–Æ–¢–ê:", currency);

      return {
        accountNumber: accountMatch?.[1] || "CARD_OPERATION", // –î–ª—è –∫–∞—Ä—Ç–∫–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        currency: currency,
        operationType: cleanOperationType,
        amount: amount,
        correspondent: correspondentMatch[1].trim(),
        paymentPurpose: purposeMatch?.[1]?.trim() || "",
        invoiceNumber: finalInvoiceNumber || undefined,
        partialInvoiceNumber: finalPartialInvoiceNumber,
        isFullInvoiceNumber: isFullInvoiceNumber,
        invoiceDate: invoiceDate,
        vatAmount: vatAmount,
        paymentTime: paymentTime,
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", errorMessage);
      return null;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É - –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
   */
  private async processPayment(notificationId: number, paymentInfo: any, emailContent?: any): Promise<{ success: boolean; message: string; orderId?: number }> {
    try {
      console.log(`üè¶ processPayment called with notificationId=${notificationId}, paymentInfo:`, paymentInfo);
      console.log(`üè¶ DEBUG: emailContent provided at start: ${!!emailContent}`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –æ–ø–µ—Ä–∞—Ü—ñ—è –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
      console.log(`üè¶ DEBUG operationType: "${paymentInfo.operationType}"`);
      if (!paymentInfo.operationType || paymentInfo.operationType !== "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ") {
        console.log(`üè¶‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ: operationType = "${paymentInfo.operationType}" (–Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ)`);
        return { success: false, message: `–û–ø–µ—Ä–∞—Ü—ñ—è "${paymentInfo.operationType}" –ø—Ä–æ–ø—É—â–µ–Ω–∞` };
      }
      
      let order = null;
      let searchDetails = "";

      // –†–û–ó–£–ú–ù–ò–ô –ü–û–®–£–ö –ó–ê–ú–û–í–õ–ï–ù–¨ - –ù–û–í–ò–ô –ê–õ–ì–û–†–ò–¢–ú
      console.log(`üè¶ üîç –†–û–ó–£–ú–ù–ò–ô –ü–û–®–£–ö –ü–û–ß–ê–¢–û–ö`);
      console.log(`üè¶ üîç paymentInfo.invoiceNumber = "${paymentInfo.invoiceNumber}"`);
      console.log(`üè¶ üîç paymentInfo.isFullInvoiceNumber = ${paymentInfo.isFullInvoiceNumber}`);
      console.log(`üè¶ üîç paymentInfo.partialInvoiceNumber = "${paymentInfo.partialInvoiceNumber}"`);
      
      if (paymentInfo.invoiceNumber) {
        if (paymentInfo.isFullInvoiceNumber) {
          // –Ø–∫—â–æ —î –ø–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–∏–ø—É –†–ú00-027689, —à—É–∫–∞—î–º–æ —Ç–æ—á–Ω–æ
          console.log(`üè¶ üìã –ü–û–í–ù–ò–ô –ù–û–ú–ï–†: –ü–æ—à—É–∫ –∑–∞ ${paymentInfo.invoiceNumber}`);
          order = await storage.getOrderByInvoiceNumber(paymentInfo.invoiceNumber);
          console.log(`üè¶ üìã –ü–û–í–ù–ò–ô –ù–û–ú–ï–† —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, order ? `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ID ${order.id}` : '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
          searchDetails += `–ü–æ—à—É–∫ –∑–∞ –ø–æ–≤–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º: ${paymentInfo.invoiceNumber}`;
          
          // –î–ª—è –ø–æ–≤–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—É–º—É, –∞–ª–µ —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
          if (order && paymentInfo.amount) {
            const orderTotal = parseFloat(order.totalAmount?.toString() || '0');
            const paymentAmount = parseFloat(paymentInfo.amount.toString());
            
            console.log(`üè¶ üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Å—É–º–∏: ${orderTotal} vs ${paymentAmount}`);
            
            if (orderTotal === paymentAmount) {
              console.log(`üè¶‚úÖ PERFECT! –ü–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä + —Ç–æ—á–Ω–∞ —Å—É–º–∞: ${paymentInfo.invoiceNumber} = ${paymentAmount} UAH`);
            } else {
              console.log(`üè¶‚ö†Ô∏è –ü–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ —Å—É–º–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è: ${orderTotal} vs ${paymentAmount}. –ü—Ä–∏–π–º–∞—î–º–æ –≤—Å–µ –æ–¥–Ω–æ.`);
              // –ù–ï —Å–∫–∏–¥–∞—î–º–æ order –¥–ª—è –ø–æ–≤–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ - —è–∫—â–æ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, —Ç–æ —Ü–µ –Ω–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            }
          }
        } else {
          // –Ø–∫—â–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–∏–ø—É "27741", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –ø–æ—à—É–∫
          console.log(`üè¶ üîç –ß–ê–°–¢–ö–û–í–ò–ô –ù–û–ú–ï–†: –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –∑–∞ ${paymentInfo.invoiceNumber}`);
          order = await storage.getOrderByInvoiceNumber(paymentInfo.invoiceNumber);
          
          if (order) {
            console.log(`üè¶ üîç ‚úÖ –ß–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç–∏–º –ø–æ—à—É–∫–æ–º: ID ${order.id}`);
            searchDetails += `–ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ —á–∞—Å—Ç–∫–æ–≤–æ: ${paymentInfo.invoiceNumber}`;
          } else {
            console.log(`üè¶ üîç ‚ùå –ß–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç–∏–º –ø–æ—à—É–∫–æ–º. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É.`);
            // –ü–µ—Ä–µ–π–¥–µ–º–æ –¥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É –Ω–∏–∂—á–µ
          }
        }
      }

      // –†–û–ó–®–ò–†–ï–ù–ò–ô –ü–û–®–£–ö –¥–ª—è —á–∞—Å—Ç–∫–æ–≤–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∞–±–æ –∫–æ–ª–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—à—É–∫ –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      if (!order) {
        console.log("üîç üéØ –†–û–ó–®–ò–†–ï–ù–ò–ô –ü–û–®–£–ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏...");
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –∑ paymentInfo —è–∫—â–æ —î
        let partialNumber = paymentInfo.partialInvoiceNumber || paymentInfo.invoiceNumber;
        
        // –Ø–∫—â–æ –Ω–æ–º–µ—Ä –º–∞—î —Ñ–æ—Ä–º–∞—Ç –†–ú00-, –≤–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ–≤—É —á–∞—Å—Ç–∏–Ω—É
        if (partialNumber && partialNumber.startsWith('–†–ú00-')) {
          const match = partialNumber.match(/–†–ú00-(\d+)/);
          if (match) {
            partialNumber = match[1];
            console.log(`üîç üìã –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ–≤—É —á–∞—Å—Ç–∏–Ω—É –∑ ${partialNumber}: ${partialNumber}`);
          }
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É
        const searchCriteria: any = {};
        
        if (partialNumber) {
          searchCriteria.partialInvoiceNumber = partialNumber;
          console.log(`üîç üéØ –î–æ–¥–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –¥–æ –ø–æ—à—É–∫—É: ${partialNumber}`);
        }
        
        if (paymentInfo.invoiceDate) {
          searchCriteria.invoiceDate = paymentInfo.invoiceDate;
          console.log(`üîç üìÖ –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É —Ä–∞—Ö—É–Ω–∫—É: ${paymentInfo.invoiceDate}`);
        }
        
        if (paymentInfo.correspondent) {
          searchCriteria.correspondent = paymentInfo.correspondent;
          console.log(`üîç üë§ –î–æ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞: ${paymentInfo.correspondent}`);
        }
        
        if (paymentInfo.amount) {
          searchCriteria.amount = paymentInfo.amount;
          console.log(`üîç üí∞ –î–æ–¥–∞—î–º–æ —Å—É–º—É: ${paymentInfo.amount} UAH`);
        }

        console.log(`üîç üéØ –ö—Ä–∏—Ç–µ—Ä—ñ—ó —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É:`, searchCriteria);
        const foundOrders = await storage.findOrdersByPaymentInfo(searchCriteria);
        
        if (foundOrders.length > 0) {
          console.log(`üîç ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${foundOrders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º`);
          
          // –ü–†–Ü–û–†–ò–¢–ò–ó–ê–¶–Ü–Ø: –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Å—É–º–∏ –º–∞—î –Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
          if (paymentInfo.amount && foundOrders.length > 1) {
            const paymentAmount = parseFloat(paymentInfo.amount.toString());
            console.log(`üîç üí∞ –®—É–∫–∞—î–º–æ —Å–µ—Ä–µ–¥ ${foundOrders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ —Ç–æ—á–Ω–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º —Å—É–º–∏ ${paymentAmount}`);
            
            for (const foundOrder of foundOrders) {
              const orderTotal = parseFloat(foundOrder.totalAmount?.toString() || '0');
              console.log(`üîç üí∞ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${foundOrder.invoiceNumber}: ${orderTotal} UAH`);
              
              if (orderTotal === paymentAmount) {
                order = foundOrder;
                console.log(`üîç‚úÖ PERFECT MATCH! ${foundOrder.invoiceNumber} = ${paymentAmount} UAH`);
                break;
              }
            }
          }
          
          // –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Å—É–º–∏ –Ω–µ–º–∞—î, –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –Ω–∞–π–±–ª–∏–∂—á–µ
          if (!order) {
            order = foundOrders[0];
            console.log(`üîç üìã –í–∑—è—Ç–æ –Ω–∞–π–∫—Ä–∞—â–µ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É: ${order.invoiceNumber}`);
          }
          
          searchDetails += `, —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫: ${JSON.stringify(searchCriteria)}`;
        } else {
          console.log(`üîç ‚ùå –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –Ω–µ –¥–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤:`, searchCriteria);
        }
      }

      // FALLBACK –õ–û–ì–Ü–ö–ê: –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É, —à—É–∫–∞—î–º–æ –∑–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º —Ç–∞ —Å—É–º–æ—é
      if (!order && paymentInfo.correspondent && paymentInfo.amount) {
        console.log("üîÑ FALLBACK: –ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º —Ç–∞ —Å—É–º–æ—é...");
        console.log(`üîÑ –ö—Ä–∏—Ç–µ—Ä—ñ—ó: –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç="${paymentInfo.correspondent}", —Å—É–º–∞=${paymentInfo.amount}`);
        
        try {
          // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–æ—á–Ω–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º —Å—É–º–∏ —Ç–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
          const fallbackOrders = await storage.query(`
            SELECT o.*, c.name as client_name 
            FROM orders o
            LEFT JOIN clients c ON o.client_id = c.id
            WHERE c.name ILIKE $1 AND o.total_amount = $2::numeric
            ORDER BY o.created_at DESC
            LIMIT 5
          `, [`%${paymentInfo.correspondent}%`, paymentInfo.amount.toString()]);
          
          if (fallbackOrders.length > 0) {
            order = fallbackOrders[0]; // –ë–µ—Ä–µ–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            console.log(`üîÑ‚úÖ FALLBACK –£–°–ü–Ü–®–ù–ò–ô: –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} (${order.invoice_number || order.invoiceNumber}) –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ "${order.client_name}"`);
            console.log(`üîÑ –î–µ—Ç–∞–ª—ñ: —Å—É–º–∞ ${order.total_amount || order.totalAmount} UAH, –¥–∞—Ç–∞ ${order.created_at}`);
            searchDetails += `, fallback –ø–æ—à—É–∫ –∑–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º —Ç–∞ —Å—É–º–æ—é`;
            
            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ snake_case –¥–æ camelCase –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            if (order.invoice_number && !order.invoiceNumber) {
              order.invoiceNumber = order.invoice_number;
            }
            if (order.total_amount && !order.totalAmount) {
              order.totalAmount = order.total_amount;
            }
          } else {
            console.log(`üîÑ‚ùå FALLBACK: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞="${paymentInfo.correspondent}" —Ç–∞ —Å—É–º–∏=${paymentInfo.amount}`);
          }
        } catch (fallbackError) {
          console.error("üîÑ‚ùå FALLBACK ERROR:", fallbackError);
          searchDetails += `, fallback –ø–æ—à—É–∫ failed: ${fallbackError.message}`;
        }
      }

      if (!order) {
        console.log(`üîÑ DEBUG: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è fallback –ª–æ–≥—ñ–∫–∏:`);
        console.log(`  - order –∑–Ω–∞–π–¥–µ–Ω–æ: ${!!order}`);
        console.log(`  - correspondent —î: ${!!paymentInfo.correspondent} ("${paymentInfo.correspondent}")`);
        console.log(`  - amount —î: ${!!paymentInfo.amount} (${paymentInfo.amount})`);
        
        const errorMsg = `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ${searchDetails}`;
        console.log(`üè¶‚ùå ${errorMsg}`);
        return { success: false, message: errorMsg };
      }

      console.log(`üè¶ DEBUG: Found order for payment processing:`, { orderId: order.id, orderNumber: order.invoiceNumber, amount: paymentInfo.amount });

      // –Ø–∫—â–æ notificationId = 0, —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ –º–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      if (notificationId === 0) {
        console.log(`üè¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ: #${order.id} (${order.invoiceNumber}) - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ success –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É`);
        return {
          success: true,
          message: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ: #${order.id} (${order.invoiceNumber})`,
          orderId: order.id
        };
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ notificationId —Ä–µ–∞–ª—å–Ω–∏–π
      console.log(`üè¶ DEBUG: Calling updateOrderPaymentStatus...`);
      console.log(`üè¶ DEBUG: emailContent provided: ${!!emailContent}`);
      console.log(`üè¶ DEBUG: emailDate from header: ${emailContent?.emailDate?.toISOString()}`);
      console.log(`üè¶ DEBUG: emailReceivedAt (current logic): ${emailContent?.receivedAt?.toISOString()}`);
      
      const result = await storage.updateOrderPaymentStatus(
        order.id, 
        paymentInfo.amount, 
        "bank_transfer",
        notificationId,
        paymentInfo.accountNumber,
        paymentInfo.correspondent,
        undefined, // reference
        undefined, // notes
        paymentInfo.paymentTime,
        emailContent?.emailDate || new Date(), // –î–∞—Ç–∞ –∑ Email –∑–∞–≥–æ–ª–æ–≤–∫–∞ (Date:) - —Ñ–∞–∫—Ç–∏—á–Ω–∞ –¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É
        emailContent?.receivedAt || new Date()  // –î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è email ERP —Å–∏—Å—Ç–µ–º–æ—é
      );

      console.log(`üè¶ DEBUG: updateOrderPaymentStatus result:`, result);
      console.log(`üè¶‚úÖ –ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª–µ–Ω–æ: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} (${order.invoiceNumber}) - ${paymentInfo.amount} UAH`);

      return {
        success: true,
        message: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} –æ–Ω–æ–≤–ª–µ–Ω–æ (${order.invoiceNumber})`,
        orderId: order.id
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É:", errorMessage);
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${errorMessage}` };
    }
  }



  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –í–°—ñ–• –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–∫–ª—é—á–Ω–æ –∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º–∏)
   */
  async checkForProcessedEmails(): Promise<void> {
    try {
      // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –∑ –∫–µ—à—É –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
      this.cleanupNotFoundCache();
      const emailSettings = await storage.getEmailSettings();
      
      const bankEmailUser = emailSettings?.bankEmailUser || process.env.BANK_EMAIL_USER;
      const bankEmailPassword = emailSettings?.bankEmailPassword || process.env.BANK_EMAIL_PASSWORD;
      const bankEmailHost = emailSettings?.bankEmailHost || process.env.BANK_EMAIL_HOST || 'mail.regmik.ua';
      const bankEmailPort = emailSettings?.bankEmailPort || parseInt(process.env.BANK_EMAIL_PORT || '993');
      
      if (!bankEmailUser || !bankEmailPassword) {
        console.log("üè¶ –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email");
        return;
      }

      console.log("üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ IMAP –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—Å—ñ—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...");

      const imapConfig: any = {
        user: bankEmailUser,
        password: bankEmailPassword,
        host: bankEmailHost,
        port: bankEmailPort,
        authTimeout: 15000,
        connTimeout: 20000,
        tlsOptions: {
          rejectUnauthorized: false,
          secureProtocol: 'TLSv1_2_method'
        }
      };

      const bankSslEnabled = emailSettings?.bankSslEnabled ?? (bankEmailPort === 993);
      imapConfig.tls = bankSslEnabled;

      console.log(`üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: IMAP –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: host=${bankEmailHost}, port=${bankEmailPort}, TLS=${imapConfig.tls}`);
      
      const { default: Imap } = await import('imap');
      const imap = new Imap(imapConfig);

      return new Promise((resolve, reject) => {
        imap.once('ready', () => {
          console.log("üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          
          imap.openBox('INBOX', false, (err: any, box: any) => {
            if (err) {
              console.error("‚ùå –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è INBOX:", err);
              imap.end();
              resolve();
              return;
            }

            console.log(`üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: INBOX –≤—ñ–¥–∫—Ä–∏—Ç–æ, –≤—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${box.messages.total}`);

            // –®—É–∫–∞—î–º–æ –í–°–Ü email –≤—ñ–¥ –±–∞–Ω–∫—É (–≤–∫–ª—é—á–Ω–æ –∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏–º–∏) –ë–ï–ó —á–∞—Å–æ–≤–∏—Ö –æ–±–º–µ–∂–µ–Ω—å
            const bankFromAddress = emailSettings.bankEmailAddress || 'online@ukrsibbank.com';
            console.log(`üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü–æ—à—É–∫ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏: –≤—ñ–¥=${bankFromAddress} (–≤–µ—Å—å –∞—Ä—Ö—ñ–≤, –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)`);
            
            imap.search([
              ['FROM', bankFromAddress]
              // –í–∏–¥–∞–ª–µ–Ω–æ ['SINCE', lastWeek] —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏ –≤–µ—Å—å –∞—Ä—Ö—ñ–≤
              // –ù–ï –¥–æ–¥–∞—î–º–æ 'UNSEEN' —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
            ], (err: any, results: any) => {
              if (err) {
                console.error("‚ùå –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É email:", err);
                imap.end();
                resolve();
                return;
              }

              console.log(`üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ó–Ω–∞–π–¥–µ–Ω–æ ${results ? results.length : 0} email –≤—ñ–¥ –±–∞–Ω–∫—É`);

              if (!results || results.length === 0) {
                console.log("üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: Email –≤—ñ–¥ –±–∞–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                imap.end();
                resolve();
                return;
              }

              // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ email
              console.log(`üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –û–±—Ä–æ–±–ª—è—î–º–æ ${results.length} email...`);

              const fetch = imap.fetch(results, { 
                bodies: 'TEXT',
                struct: true,
                markSeen: false // –ù–ï –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
              });

              let processedCount = 0;

              fetch.on('message', (msg: any, seqno: any) => {
                let emailContent = '';
                let emailSubject = '';

                msg.on('body', (stream: any, info: any) => {
                  let buffer = '';
                  stream.on('data', (chunk: any) => {
                    buffer += chunk.toString('utf8');
                  });
                  
                  stream.once('end', () => {
                    emailContent = buffer;
                  });
                });

                msg.once('attributes', (attrs: any) => {
                  if (attrs.envelope && attrs.envelope.subject) {
                    emailSubject = attrs.envelope.subject;
                  }
                });

                msg.once('end', async () => {
                  try {
                    const actualSubject = emailSubject || '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è';
                    
                    // –î–µ–∫–æ–¥—É—î–º–æ Base64 –∫–æ–Ω—Ç–µ–Ω—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    let decodedContent = emailContent;
                    try {
                      if (/^[A-Za-z0-9+/]+=*$/.test(emailContent.replace(/\s/g, ''))) {
                        decodedContent = Buffer.from(emailContent, 'base64').toString('utf8');
                      }
                    } catch (error) {
                      decodedContent = emailContent;
                    }

                    const mockEmail = {
                      messageId: `processed-${seqno}-${Date.now()}`, // –ü—Ä–æ—Å—Ç–∏–π fallback ID
                      subject: actualSubject,
                      fromAddress: emailSettings.bankEmailAddress || 'online@ukrsibbank.com',
                      receivedAt: new Date(),
                      textContent: decodedContent
                    };

                    const result = await this.processBankEmail(mockEmail);
                    
                    if (result.success) {
                      console.log(`üè¶‚úÖ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: Email ${seqno} –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ - ${result.message}`);
                    } else if (!result.skipLogging) {
                      console.log(`üè¶‚ö†Ô∏è –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: Email ${seqno}: ${result.message}`);
                    }
                    // –Ø–∫—â–æ skipLogging === true, —Ç–æ –Ω–µ –ª–æ–≥—É—î–º–æ - —Ä–∞—Ö—É–Ω–æ–∫ —É –∫–µ—à—ñ

                    processedCount++;
                    
                    if (processedCount === results.length) {
                      console.log(`üè¶ –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${processedCount}/${results.length} email –æ–±—Ä–æ–±–ª–µ–Ω–æ`);
                      imap.end();
                      resolve();
                    }
                  } catch (error) {
                    console.error(`‚ùå –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ email ${seqno}:`, error);
                    processedCount++;
                    
                    if (processedCount === results.length) {
                      imap.end();
                      resolve();
                    }
                  }
                });
              });

              fetch.once('error', (err: any) => {
                console.error("‚ùå –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è email:", err);
                imap.end();
                resolve();
              });
            });
          });
        });

        imap.once('error', (err: any) => {
          console.error("‚ùå –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ü–æ–º–∏–ª–∫–∞ IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è:", err);
          resolve();
        });

        imap.connect();
      });
    } catch (error) {
      console.error("‚ùå –û–ë–†–û–ë–ö–ê –ü–†–û–ß–ò–¢–ê–ù–ò–•: –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", error);
    }
  }

  /**
   * –†—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
   */
  async manualProcessEmail(emailContent: string): Promise<{ success: boolean; message: string; notification?: any; details?: any }> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—É –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∞–¥—Ä–µ—Å—É –∞–±–æ fallback
      const fromAddress = emailSettings?.bankEmailAddress || "noreply@ukrsib.com.ua";
      
      const mockEmail = {
        messageId: `manual-${Date.now()}`,
        subject: "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        fromAddress: fromAddress,
        receivedAt: new Date(),
        textContent: emailContent,
      };

      console.log("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", emailContent.substring(0, 100) + "...");
      
      const result = await this.processBankEmail(mockEmail);
      
      // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
      if (result.success) {
        return {
          ...result,
          details: {
            emailLength: emailContent.length,
            fromAddress: fromAddress,
            processedAt: new Date().toISOString()
          }
        };
      }
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ email:", errorMessage);
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞: ${errorMessage}` };
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  private parseEmailContent(emailContent: string): { amount: number; currency: string; purpose?: string; correspondent?: string; bankAccount?: string } | null {
    try {
      // –ü–æ—à—É–∫ —Å—É–º–∏ –ø–ª–∞—Ç–µ–∂—É
      const amountMatch = emailContent.match(/(\d+(?:[.,]\d{2})?)\s*(UAH|–≥—Ä–Ω|‚Ç¥)/i);
      if (!amountMatch) return null;

      const amount = parseFloat(amountMatch[1].replace(',', '.'));
      const currency = 'UAH';

      // –ü–æ—à—É–∫ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
      const purposeMatch = emailContent.match(/(?:–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è|purpose|–∑–∞ —Ä–∞—Ö[—É–æ]–Ω–æ–∫|–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)\s*[:‚Ññ]?\s*([^\n\r]+)/i);
      const purpose = purposeMatch ? purposeMatch[1].trim() : '';

      // –ü–æ—à—É–∫ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
      const correspondentMatch = emailContent.match(/(?:–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç|–≤—ñ–¥|from)\s*[:‚Ññ]?\s*([^\n\r]+)/i);
      const correspondent = correspondentMatch ? correspondentMatch[1].trim() : '';

      // –ü–æ—à—É–∫ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
      const accountMatch = emailContent.match(/(?:—Ä–∞—Ö[—É–æ]–Ω–æ–∫|account)\s*[:‚Ññ]?\s*([^\n\r\s]+)/i);
      const bankAccount = accountMatch ? accountMatch[1].trim() : '';

      return {
        amount,
        currency,
        purpose,
        correspondent,
        bankAccount
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å  
   */
  async processUnprocessedNotifications(): Promise<{
    success: boolean;
    processed: number;
    failed: number;
    skipped: number;
    details: string[];
  }> {
    try {
      const unprocessedNotifications = await storage.getBankPaymentNotifications();
      const toProcess = unprocessedNotifications.filter(n => !n.processed);
      
      console.log(`üè¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${toProcess.length} –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
      
      let processed = 0;
      let failed = 0;
      let skipped = 0;
      const details: string[] = [];
      
      for (const notification of toProcess) {
        try {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ
          if (notification.processed) {
            skipped++;
            details.push(`‚è≠Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ`);
            continue;
          }

          // –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –±–µ–∑ —Å–ø—Ä–æ–±–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç
          const paymentData = this.parseEmailContent(notification.rawEmailContent || '');
          
          if (!paymentData) {
            await storage.markBankNotificationAsProcessed(notification.id);
            failed++;
            details.push(`‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –¥–∞–Ω—ñ`);
            continue;
          }

          // –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É
          const orders = await storage.findOrdersByPaymentInfo(paymentData.purpose || '');
          
          if (orders.length > 0) {
            for (const order of orders) {
              await storage.createOrderPayment({
                orderId: order.id,
                paymentDate: new Date(notification.receivedAt),
                paymentAmount: paymentData.amount.toString(),
                notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ: ${paymentData.purpose}`,
                correspondent: paymentData.correspondent || '',
                bankAccount: paymentData.bankAccount || '',
                createdBy: "1"
              });
              
              await storage.updateOrderPaymentDate(order.id, new Date().toISOString());
            }
            
            await storage.markBankNotificationAsProcessed(notification.id);
            processed++;
            details.push(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –∑–Ω–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å, –æ–ø–ª–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞`);
          } else {
            await storage.markBankNotificationAsProcessed(notification.id);
            failed++;
            details.push(`‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å`);
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          
          // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
          if (errorMessage.includes('duplicate key value')) {
            skipped++;
            details.push(`‚è≠Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ`);
            await storage.markBankNotificationAsProcessed(notification.id);
          } else {
            failed++;
            details.push(`‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –ø–æ–º–∏–ª–∫–∞ - ${errorMessage}`);
          }
        }
      }
      
      return {
        success: true,
        processed,
        failed,
        skipped,
        details
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:", errorMessage);
      return {
        success: false,
        processed: 0,
        failed: 0,
        skipped: 0,
        details: [`–ü–æ–º–∏–ª–∫–∞: ${errorMessage}`]
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  async getBankEmailStats(): Promise<{
    total: number;
    processed: number;
    unprocessed: number;
    lastWeek: number;
  }> {
    try {
      const allNotifications = await storage.getBankPaymentNotifications();
      const processed = allNotifications.filter(n => n.processed);
      const unprocessed = allNotifications.filter(n => !n.processed);
      
      const lastWeek = new Date();
      lastWeek.setDate(lastWeek.getDate() - 7);
      const recentNotifications = allNotifications.filter(n => 
        new Date(n.receivedAt) >= lastWeek
      );

      return {
        total: allNotifications.length,
        processed: processed.length,
        unprocessed: unprocessed.length,
        lastWeek: recentNotifications.length,
      };
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      return { total: 0, processed: 0, unprocessed: 0, lastWeek: 0 };
    }
  }
}

// Singleton instance
export const bankEmailService = new BankEmailService();