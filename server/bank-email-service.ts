import nodemailer from "nodemailer";
import Imap from "imap";
import { storage } from "./db-storage";
import type { InsertBankPaymentNotification } from "@shared/schema";

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–º—ñ—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤
 */
export class BankEmailService {
  private transporter: nodemailer.Transporter | null = null;
  private monitoringInterval: NodeJS.Timeout | null = null;
  private isMonitoring = false;

  constructor() {
    // –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ initializeMonitoring() —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ë–î
    // –ë—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ index.ts –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email
   */
  async initializeEmailMonitoring(): Promise<void> {
    try {
      console.log("üè¶ –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...");
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –ë–î
      const bankEmailHost = process.env.BANK_EMAIL_HOST;
      const bankEmailUser = process.env.BANK_EMAIL_USER;
      const bankEmailPassword = process.env.BANK_EMAIL_PASSWORD;
      
      if (!bankEmailHost || !bankEmailUser || !bankEmailPassword) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è");
        console.log("üè¶ –ü–æ—Ç—Ä—ñ–±–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: BANK_EMAIL_HOST, BANK_EMAIL_USER, BANK_EMAIL_PASSWORD");
        return;
      }
      
      console.log("üè¶ –ó–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è email:", {
        hasHost: !!bankEmailHost,
        hasUser: !!bankEmailUser, 
        hasPassword: !!bankEmailPassword,
        host: bankEmailHost
      });

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ –∑–º—ñ–Ω–Ω–∏–º–∏ –æ—Ç–æ—á–µ–Ω–Ω—è
      if (!this.isMonitoring) {
        this.startMonitoring();
        console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
      }

      console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", error);
    }
  }

  /**
   * –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (—á–µ—Ä–µ–∑ –ë–î)
   */
  async initializeMonitoring(): Promise<void> {
    try {
      console.log("üè¶ –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...");
      const emailSettings = await storage.getEmailSettings();
      
      console.log("üè¶ –û—Ç—Ä–∏–º–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è email:", {
        bankMonitoringEnabled: emailSettings?.bankMonitoringEnabled,
        hasBankEmailUser: !!emailSettings?.bankEmailUser,
        hasSmtpHost: !!emailSettings?.smtpHost,
        smtpPort: emailSettings?.smtpPort
      });
      
      if (!emailSettings?.bankMonitoringEnabled || !emailSettings?.bankEmailUser) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Äin–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ SMTP –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è email
      this.transporter = nodemailer.createTransport({
        host: emailSettings.smtpHost,
        port: emailSettings.smtpPort,
        secure: emailSettings.smtpSecure,
        auth: {
          user: emailSettings.bankEmailUser,
          pass: emailSettings.bankEmailPassword,
        },
      });

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
      if (!this.isMonitoring) {
        this.startMonitoring();
        console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
      }

      console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Äin–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É email –∑ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
   */
  private startMonitoring(): void {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    this.monitoringInterval = setInterval(async () => {
      try {
        console.log("üè¶ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
        await this.checkNewEmails();
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email:", error);
        // –õ–æ–≥—É—î–º–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ñ –ª–æ–≥–∏
        await storage.createSystemLog({
          level: 'error',
          category: 'bank-email',
          module: 'bank-monitoring',
          message: `–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email: ${error instanceof Error ? error.message : String(error)}`,
          details: { 
            component: 'bank-email-service',
            error: error instanceof Error ? error.toString() : String(error) 
          },
          userId: null
        });
      }
    }, 5 * 60 * 1000); // 5 —Ö–≤–∏–ª–∏–Ω

    console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  stopMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    this.isMonitoring = false;
    console.log("üè¶ –ó—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email");
  }

  /**
   * –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  async checkForNewEmails(): Promise<void> {
    try {
      console.log("üè¶ –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
      await this.checkNewEmails();
      console.log("üè¶ –†—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö email –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ email:", error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –±–∞–Ω–∫—É —á–µ—Ä–µ–∑ IMAP
   */
  private async checkNewEmails(): Promise<void> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ environment variables –∞–±–æ –¥–∞–Ω—ñ –∑ –ë–î
      const bankEmailUser = process.env.BANK_EMAIL_USER || emailSettings?.bankEmailUser;
      const bankEmailPassword = process.env.BANK_EMAIL_PASSWORD || emailSettings?.bankEmailPassword;
      const bankEmailHost = process.env.BANK_EMAIL_HOST || 'imap.gmail.com';
      
      if (!emailSettings?.bankMonitoringEnabled || !bankEmailUser || !bankEmailPassword) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
        return;
      }

      console.log("üè¶ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ IMAP –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
      console.log("üè¶ IMAP Host:", bankEmailHost);
      console.log("üè¶ IMAP User:", bankEmailUser);

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è
      const imap = new Imap({
        user: bankEmailUser,
        password: bankEmailPassword,
        host: bankEmailHost,
        port: 993,
        tls: true,
        tlsOptions: {
          rejectUnauthorized: false
        }
      });

      return new Promise((resolve, reject) => {
        imap.once('ready', () => {
          console.log("üè¶ IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          
          imap.openBox('INBOX', false, (err: any, box: any) => {
            if (err) {
              console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è INBOX:", err);
              imap.end();
              reject(err);
              return;
            }

            // –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ email –≤—ñ–¥ –±–∞–Ω–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            imap.search([
              'UNSEEN',
              ['FROM', emailSettings.bankEmailAddress || 'noreply@ukrsib.com.ua'],
              ['SINCE', yesterday]
            ], (err: any, results: any) => {
              if (err) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É email:", err);
                imap.end();
                reject(err);
                return;
              }

              if (!results || results.length === 0) {
                console.log("üè¶ –ù–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                imap.end();
                resolve();
                return;
              }

              console.log(`üè¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${results.length} –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email`);

              // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω email
              const fetch = imap.fetch(results, { bodies: '', markSeen: true });
              let processedCount = 0;

              fetch.on('message', (msg: any, seqno: any) => {
                let emailContent = '';

                msg.on('body', (stream: any, info: any) => {
                  let buffer = '';
                  stream.on('data', (chunk: any) => {
                    buffer += chunk.toString('utf8');
                  });
                  
                  stream.once('end', () => {
                    emailContent = buffer;
                  });
                });

                msg.once('end', async () => {
                  try {
                    const mockEmail = {
                      messageId: `imap-${seqno}-${Date.now()}`,
                      subject: '–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                      fromAddress: emailSettings.bankEmailAddress || 'noreply@ukrsib.com.ua',
                      receivedAt: new Date(),
                      textContent: emailContent
                    };

                    const result = await this.processBankEmail(mockEmail);
                    
                    if (result.success) {
                      console.log(`üè¶‚úÖ Email ${seqno} –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
                    } else {
                      console.log(`üè¶‚ö†Ô∏è Email ${seqno}: ${result.message}`);
                    }

                    processedCount++;
                    
                    if (processedCount === results.length) {
                      console.log(`üè¶ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processedCount}/${results.length} email`);
                      imap.end();
                      resolve();
                    }
                  } catch (error) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ email ${seqno}:`, error);
                    processedCount++;
                    
                    if (processedCount === results.length) {
                      imap.end();
                      resolve();
                    }
                  }
                });
              });

              fetch.once('error', (err: any) => {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è email:", err);
                imap.end();
                reject(err);
              });
            });
          });
        });

        imap.once('error', (err: any) => {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è:", err);
          reject(err);
        });

        imap.connect();
      });
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email:", error);
      
      await storage.createSystemLog({
        level: 'error',
        category: 'bank-email',
        module: 'imap-monitoring',
        message: `–ü–æ–º–∏–ª–∫–∞ IMAP –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${error instanceof Error ? error.message : String(error)}`,
        details: { 
          component: 'bank-email-service',
          function: 'checkNewEmails',
          error: error instanceof Error ? error.toString() : String(error) 
        },
        userId: null
      });
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É
   */
  async processBankEmail(emailContent: {
    messageId: string;
    subject: string;
    fromAddress: string;
    receivedAt: Date;
    textContent: string;
  }): Promise<{ success: boolean; message: string; notification?: any }> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∞–¥—Ä–µ—Å–∏:");
      console.log("  Email settings:", emailSettings);
      console.log("  Bank email address:", emailSettings?.bankEmailAddress);
      console.log("  From address:", emailContent.fromAddress);
      console.log("  Contains check:", emailContent.fromAddress.includes(emailSettings?.bankEmailAddress || ""));
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ email –≤—ñ–¥ –±–∞–Ω–∫—É
      if (!emailSettings?.bankEmailAddress || !emailContent.fromAddress.includes(emailSettings.bankEmailAddress)) {
        return { success: false, message: "Email –Ω–µ –≤—ñ–¥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∞–¥—Ä–µ—Å–∏" };
      }

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç email –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      const paymentInfo = this.analyzeBankEmailContent(emailContent.textContent);
      
      if (!paymentInfo) {
        return { success: false, message: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—é –≤ email" };
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      console.log("üè¶ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó:", paymentInfo.operationType);
      const notification: InsertBankPaymentNotification = {
        messageId: emailContent.messageId,
        subject: emailContent.subject,
        fromAddress: emailContent.fromAddress,
        receivedAt: emailContent.receivedAt,
        accountNumber: paymentInfo.accountNumber,
        currency: paymentInfo.currency,
        operationType: paymentInfo.operationType,
        amount: paymentInfo.amount.toString(),
        correspondent: paymentInfo.correspondent,
        paymentPurpose: paymentInfo.paymentPurpose,
        invoiceNumber: paymentInfo.invoiceNumber,
        invoiceDate: paymentInfo.invoiceDate,
        vatAmount: paymentInfo.vatAmount?.toString(),
        processed: false,
        rawEmailContent: emailContent.textContent,
      };

      const savedNotification = await storage.createBankPaymentNotification(notification);

      // –õ–æ–≥—É—î–º–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ñ –ª–æ–≥–∏ –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      await storage.createSystemLog({
        level: 'info',
        category: 'bank-email',
        module: 'bank-monitoring',
        message: `–û—Ç—Ä–∏–º–∞–Ω–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${paymentInfo.operationType} –Ω–∞ —Å—É–º—É ${paymentInfo.amount} UAH`,
        details: { 
          component: 'bank-email-service',
          operationType: paymentInfo.operationType,
          amount: paymentInfo.amount,
          correspondent: paymentInfo.correspondent,
          invoiceNumber: paymentInfo.invoiceNumber,
          accountNumber: paymentInfo.accountNumber
        },
        userId: null
      });

      // –Ø–∫—â–æ —Ü–µ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É - –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–ª–∞—Ç—ñ–∂
      console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É:");
      console.log("  operationType:", paymentInfo.operationType);
      console.log("  invoiceNumber:", paymentInfo.invoiceNumber);
      console.log("  –£–º–æ–≤–∞ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ:", paymentInfo.operationType === "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ");
      console.log("  –£–º–æ–≤–∞ –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É:", !!paymentInfo.invoiceNumber);
      
      if (paymentInfo.operationType === "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ" && paymentInfo.invoiceNumber) {
        console.log("üè¶ –†–æ–∑–ø–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É –ø–ª–∞—Ç–µ–∂—É...");
        
        // –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É
        await storage.createSystemLog({
          level: 'info',
          category: 'bank-payment',
          module: 'payment-processing',
          message: `–°–ø—Ä–æ–±–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É –∑–∞ —Ä–∞—Ö—É–Ω–∫–æ–º ${paymentInfo.invoiceNumber}`,
          details: { 
            component: 'bank-email-service',
            invoiceNumber: paymentInfo.invoiceNumber,
            amount: paymentInfo.amount,
            correspondent: paymentInfo.correspondent
          },
          userId: null
        });
        
        const paymentResult = await this.processPayment(savedNotification.id, paymentInfo);
        
        if (paymentResult.success) {
          await storage.updateBankPaymentNotification(savedNotification.id, {
            processed: true,
            orderId: paymentResult.orderId,
          });
          
          // –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–±—Ä–æ–±–∫—É –ø–ª–∞—Ç–µ–∂—É
          await storage.createSystemLog({
            level: 'info',
            category: 'bank-payment',
            module: 'payment-processing',
            message: `–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${paymentInfo.invoiceNumber}`,
            details: { 
              component: 'bank-email-service',
              invoiceNumber: paymentInfo.invoiceNumber,
              orderId: paymentResult.orderId,
              amount: paymentInfo.amount
            },
            userId: null
          });
        } else {
          await storage.updateBankPaymentNotification(savedNotification.id, {
            processingError: paymentResult.message,
          });
          
          // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É
          await storage.createSystemLog({
            level: 'warn',
            category: 'bank-payment',
            module: 'payment-processing',
            message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${paymentResult.message}`,
            details: { 
              component: 'bank-email-service',
              invoiceNumber: paymentInfo.invoiceNumber,
              error: paymentResult.message,
              amount: paymentInfo.amount
            },
            userId: null
          });
        }

        return {
          success: true,
          message: paymentResult.success ? 
            `–ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ${paymentInfo.invoiceNumber} –Ω–∞ —Å—É–º—É ${paymentInfo.amount} UAH` :
            `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${paymentResult.message}`,
          notification: savedNotification
        };
      }

      return {
        success: true,
        message: "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∞–ª–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –æ–±—Ä–æ–±–∫–∏",
        notification: savedNotification
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", error);
      
      // –õ–æ–≥—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
      await storage.createSystemLog({
        level: 'error',
        category: 'bank-email',
        module: 'bank-monitoring',
        message: `–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email: ${errorMessage}`,
        details: { 
          component: 'bank-email-service',
          error: error instanceof Error ? error.toString() : String(error),
          emailFrom: emailContent.fromAddress,
          emailSubject: emailContent.subject
        },
        userId: null
      });
      
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMessage}` };
    }
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
   */
  private analyzeBankEmailContent(emailText: string): {
    accountNumber: string;
    currency: string;
    operationType: string;
    amount: number;
    correspondent: string;
    paymentPurpose: string;
    invoiceNumber?: string;
    invoiceDate?: Date;
    vatAmount?: number;
  } | null {
    try {
      console.log("üè¶ –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É email:", emailText.substring(0, 200) + "...");
      
      // –ü–æ–∫—Ä–∞—â–µ–Ω—ñ —Ä–µ–≥–µ–∫—Å–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      const accountMatch = emailText.match(/—Ä—É—Ö –∫–æ—à—Ç—ñ–≤ –ø–æ —Ä–∞—Ö—É–Ω–∫—É:\s*([A-Z0-9]+)/i);
      const currencyMatch = emailText.match(/–≤–∞–ª—é—Ç–∞:\s*([A-Z]{3})/i) || emailText.match(/(\d+[,\.]\d+)\s*(UAH|USD|EUR)/i);
      const operationMatch = emailText.match(/(?:—Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó|–æ–ø–µ—Ä–∞—Ü—ñ—è):\s*([^\n\r]+)/i);
      const amountMatch = emailText.match(/(?:—Å—É–º–º–∞|—Å—É–º–∞):\s*([\d,\.]+)/i);
      const correspondentMatch = emailText.match(/–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:\s*([^\n\r]+)/i);
      const purposeMatch = emailText.match(/–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:\s*([^\n\r]+)/i);
      
      console.log("üè¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —Ä–µ–≥–µ–∫—Å–ø—ñ–≤:");
      console.log("  accountMatch:", accountMatch?.[1]);
      console.log("  currencyMatch:", currencyMatch?.[1]);
      console.log("  operationMatch:", operationMatch?.[1]);
      console.log("  amountMatch:", amountMatch?.[1]);
      console.log("  correspondentMatch:", correspondentMatch?.[1]);
      console.log("  purposeMatch:", purposeMatch?.[1]);
      
      // –®—É–∫–∞—î–º–æ –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É (–†–ú00-XXXXXX –∞–±–æ —Ä–∞—Ö.‚Ññ XXXXX)
      const invoiceMatch = emailText.match(/(?:–†–ú00-(\d+)|—Ä–∞—Ö\.?\s*‚Ññ?\s*(\d+))/i);
      
      // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É —Ä–∞—Ö—É–Ω–∫—É
      const dateMatch = emailText.match(/–≤—ñ–¥\s*(\d{2}\.\d{2}\.\d{4})/i);
      
      // –®—É–∫–∞—î–º–æ –ü–î–í
      const vatMatch = emailText.match(/–ü–î–í.*?(\d+[,\.]\d+)/i);
      
      console.log("üè¶ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–≥–µ–∫—Å–∏:");
      console.log("  invoiceMatch:", invoiceMatch);
      console.log("  dateMatch:", dateMatch);
      console.log("  vatMatch:", vatMatch);

      if (!accountMatch || !operationMatch || !amountMatch || !correspondentMatch) {
        console.log("üè¶ –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
        return null;
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—É–º—É - –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —ñ –∫—Ä–∞–ø–∫–∏, —ñ –∫–æ–º–∏ —è–∫ –¥–µ—Å—è—Ç–∫–æ–≤—ñ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ
      const amountStr = amountMatch[1].replace(',', '.'); // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ–º–∏ ‚Üí –∫—Ä–∞–ø–∫–∏
      const amount = parseFloat(amountStr);

      const vatAmount = vatMatch ? parseFloat(vatMatch[1].replace(',', '.')) : undefined;

      let invoiceDate: Date | undefined;
      if (dateMatch) {
        const [day, month, year] = dateMatch[1].split('.');
        invoiceDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      }

      // –û—á–∏—â–∞—î–º–æ operationType –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —ñ —Ç–µ–∫—Å—Ç—É
      const cleanOperationType = operationMatch[1].trim().split('\n')[0].trim();
      
      console.log("üè¶ –û—á–∏—â–µ–Ω–∞ operationType:", cleanOperationType);
      console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ '–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ':", cleanOperationType === "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ");
      console.log("üè¶ –ü–æ–≤–µ—Ä—Ç–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ operationType:", cleanOperationType);

      return {
        accountNumber: accountMatch[1],
        currency: currencyMatch?.[1] || "UAH",
        operationType: cleanOperationType,
        amount: amount,
        correspondent: correspondentMatch[1].trim(),
        paymentPurpose: purposeMatch?.[1]?.trim() || "",
        invoiceNumber: invoiceMatch ? `–†–ú00-${invoiceMatch[1] || invoiceMatch[2]}` : undefined,
        invoiceDate: invoiceDate,
        vatAmount: vatAmount,
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", errorMessage);
      return null;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É - –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
   */
  private async processPayment(notificationId: number, paymentInfo: any): Promise<{ success: boolean; message: string; orderId?: number }> {
    try {
      let order = null;
      let searchDetails = "";

      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É
      if (paymentInfo.invoiceNumber) {
        order = await storage.getOrderByInvoiceNumber(paymentInfo.invoiceNumber);
        searchDetails += `–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º: ${paymentInfo.invoiceNumber}`;
      }

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫
      if (!order) {
        console.log("üîç –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏...");
        
        // –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
        let partialInvoiceNumber = null;
        if (paymentInfo.paymentPurpose) {
          const partialMatch = paymentInfo.paymentPurpose.match(/‚Ññ\s*(\d+)/);
          if (partialMatch) {
            partialInvoiceNumber = partialMatch[1];
            console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É: ${partialInvoiceNumber}`);
          }
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É
        const searchCriteria: any = {};
        
        if (partialInvoiceNumber) {
          searchCriteria.partialInvoiceNumber = partialInvoiceNumber;
        }
        
        if (paymentInfo.invoiceDate) {
          searchCriteria.invoiceDate = paymentInfo.invoiceDate;
        }
        
        if (paymentInfo.correspondent) {
          searchCriteria.correspondent = paymentInfo.correspondent;
        }
        
        if (paymentInfo.amount) {
          searchCriteria.amount = paymentInfo.amount;
        }

        const foundOrders = await storage.findOrdersByPaymentInfo(searchCriteria);
        
        if (foundOrders.length > 0) {
          order = foundOrders[0]; // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ –∑–Ω–∞–π–¥–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${foundOrders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º`);
          searchDetails += `, —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫: ${JSON.stringify(searchCriteria)}`;
        }
      }

      if (!order) {
        const errorMsg = `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ${searchDetails}`;
        console.log(`üè¶‚ùå ${errorMsg}`);
        return { success: false, message: errorMsg };
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      const result = await storage.updateOrderPaymentStatus(
        order.id, 
        paymentInfo.amount, 
        "bank_transfer",
        notificationId,
        paymentInfo.accountNumber,
        paymentInfo.correspondent
      );

      console.log(`üè¶‚úÖ –ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª–µ–Ω–æ: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} (${order.invoiceNumber}) - ${paymentInfo.amount} UAH`);

      return {
        success: true,
        message: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} –æ–Ω–æ–≤–ª–µ–Ω–æ (${order.invoiceNumber})`,
        orderId: order.id
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É:", errorMessage);
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${errorMessage}` };
    }
  }

  /**
   * –†—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
   */
  async manualProcessEmail(emailContent: string): Promise<{ success: boolean; message: string; notification?: any; details?: any }> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      // –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—É –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∞–¥—Ä–µ—Å—É –∞–±–æ fallback
      const fromAddress = emailSettings?.bankEmailAddress || "noreply@ukrsib.com.ua";
      
      const mockEmail = {
        messageId: `manual-${Date.now()}`,
        subject: "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        fromAddress: fromAddress,
        receivedAt: new Date(),
        textContent: emailContent,
      };

      console.log("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", emailContent.substring(0, 100) + "...");
      
      const result = await this.processBankEmail(mockEmail);
      
      // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
      if (result.success) {
        return {
          ...result,
          details: {
            emailLength: emailContent.length,
            fromAddress: fromAddress,
            processedAt: new Date().toISOString()
          }
        };
      }
      
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ email:", errorMessage);
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞: ${errorMessage}` };
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  private parseEmailContent(emailContent: string): { amount: number; currency: string; purpose?: string; correspondent?: string; bankAccount?: string } | null {
    try {
      // –ü–æ—à—É–∫ —Å—É–º–∏ –ø–ª–∞—Ç–µ–∂—É
      const amountMatch = emailContent.match(/(\d+(?:[.,]\d{2})?)\s*(UAH|–≥—Ä–Ω|‚Ç¥)/i);
      if (!amountMatch) return null;

      const amount = parseFloat(amountMatch[1].replace(',', '.'));
      const currency = 'UAH';

      // –ü–æ—à—É–∫ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
      const purposeMatch = emailContent.match(/(?:–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è|purpose|–∑–∞ —Ä–∞—Ö[—É–æ]–Ω–æ–∫|–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)\s*[:‚Ññ]?\s*([^\n\r]+)/i);
      const purpose = purposeMatch ? purposeMatch[1].trim() : '';

      // –ü–æ—à—É–∫ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
      const correspondentMatch = emailContent.match(/(?:–∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç|–≤—ñ–¥|from)\s*[:‚Ññ]?\s*([^\n\r]+)/i);
      const correspondent = correspondentMatch ? correspondentMatch[1].trim() : '';

      // –ü–æ—à—É–∫ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
      const accountMatch = emailContent.match(/(?:—Ä–∞—Ö[—É–æ]–Ω–æ–∫|account)\s*[:‚Ññ]?\s*([^\n\r\s]+)/i);
      const bankAccount = accountMatch ? accountMatch[1].trim() : '';

      return {
        amount,
        currency,
        purpose,
        correspondent,
        bankAccount
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å  
   */
  async processUnprocessedNotifications(): Promise<{
    success: boolean;
    processed: number;
    failed: number;
    skipped: number;
    details: string[];
  }> {
    try {
      const unprocessedNotifications = await storage.getBankPaymentNotifications();
      const toProcess = unprocessedNotifications.filter(n => !n.processed);
      
      console.log(`üè¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${toProcess.length} –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
      
      let processed = 0;
      let failed = 0;
      let skipped = 0;
      const details: string[] = [];
      
      for (const notification of toProcess) {
        try {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ
          if (notification.processed) {
            skipped++;
            details.push(`‚è≠Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ`);
            continue;
          }

          // –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –±–µ–∑ —Å–ø—Ä–æ–±–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç
          const paymentData = this.parseEmailContent(notification.rawEmailContent || '');
          
          if (!paymentData) {
            await storage.markBankNotificationAsProcessed(notification.id);
            failed++;
            details.push(`‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –¥–∞–Ω—ñ`);
            continue;
          }

          // –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É
          const orders = await storage.findOrdersByPaymentInfo(paymentData.purpose || '');
          
          if (orders.length > 0) {
            for (const order of orders) {
              await storage.createOrderPayment({
                orderId: order.id,
                paymentDate: new Date(notification.receivedAt),
                paymentAmount: paymentData.amount.toString(),
                notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ: ${paymentData.purpose}`,
                correspondent: paymentData.correspondent || '',
                bankAccount: paymentData.bankAccount || '',
                createdBy: "1"
              });
              
              await storage.updateOrderPaymentDate(order.id, new Date().toISOString());
            }
            
            await storage.markBankNotificationAsProcessed(notification.id);
            processed++;
            details.push(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –∑–Ω–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å, –æ–ø–ª–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞`);
          } else {
            await storage.markBankNotificationAsProcessed(notification.id);
            failed++;
            details.push(`‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å`);
          }
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          
          // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
          if (errorMessage.includes('duplicate key value')) {
            skipped++;
            details.push(`‚è≠Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ`);
            await storage.markBankNotificationAsProcessed(notification.id);
          } else {
            failed++;
            details.push(`‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${notification.id}: –ø–æ–º–∏–ª–∫–∞ - ${errorMessage}`);
          }
        }
      }
      
      return {
        success: true,
        processed,
        failed,
        skipped,
        details
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:", errorMessage);
      return {
        success: false,
        processed: 0,
        failed: 0,
        skipped: 0,
        details: [`–ü–æ–º–∏–ª–∫–∞: ${errorMessage}`]
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  async getBankEmailStats(): Promise<{
    total: number;
    processed: number;
    unprocessed: number;
    lastWeek: number;
  }> {
    try {
      const allNotifications = await storage.getBankPaymentNotifications();
      const processed = allNotifications.filter(n => n.processed);
      const unprocessed = allNotifications.filter(n => !n.processed);
      
      const lastWeek = new Date();
      lastWeek.setDate(lastWeek.getDate() - 7);
      const recentNotifications = allNotifications.filter(n => 
        new Date(n.receivedAt) >= lastWeek
      );

      return {
        total: allNotifications.length,
        processed: processed.length,
        unprocessed: unprocessed.length,
        lastWeek: recentNotifications.length,
      };
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      return { total: 0, processed: 0, unprocessed: 0, lastWeek: 0 };
    }
  }
}

// Singleton instance
export const bankEmailService = new BankEmailService();