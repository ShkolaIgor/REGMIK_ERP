import nodemailer from "nodemailer";
import { storage } from "./db-storage";
import type { InsertBankPaymentNotification } from "@shared/schema";

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–º—ñ—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤
 */
export class BankEmailService {
  private transporter: nodemailer.Transporter | null = null;
  private monitoringInterval: NodeJS.Timeout | null = null;
  private isMonitoring = false;

  constructor() {
    this.initializeMonitoring();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email
   */
  async initializeMonitoring(): Promise<void> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      if (!emailSettings?.bankMonitoringEnabled || !emailSettings?.bankEmailUser) {
        console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ");
        return;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ SMTP –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è email
      this.transporter = nodemailer.createTransporter({
        host: emailSettings.smtpHost,
        port: emailSettings.smtpPort,
        secure: emailSettings.smtpSecure,
        auth: {
          user: emailSettings.bankEmailUser,
          pass: emailSettings.bankEmailPassword,
        },
      });

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
      if (!this.isMonitoring) {
        this.startMonitoring();
      }

      console.log("üè¶ –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π email –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É email –∑ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
   */
  private startMonitoring(): void {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    this.monitoringInterval = setInterval(async () => {
      try {
        await this.checkNewEmails();
      } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email:", error);
      }
    }, 5 * 60 * 1000); // 5 —Ö–≤–∏–ª–∏–Ω

    console.log("üè¶ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)");
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
   */
  stopMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    this.isMonitoring = false;
    console.log("üè¶ –ó—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email");
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö email –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –±–∞–Ω–∫—É
   * (–¢—É—Ç –±—É–¥–µ IMAP –ª–æ–≥—ñ–∫–∞ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è email)
   */
  private async checkNewEmails(): Promise<void> {
    // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ IMAP –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è email
    // –ü–æ–∫–∏ —â–æ —Ü–µ –∑–∞–≥–ª—É—à–∫–∞, –æ—Å–∫—ñ–ª—å–∫–∏ IMAP –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
    console.log("üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö email...");
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É
   */
  async processBankEmail(emailContent: {
    messageId: string;
    subject: string;
    fromAddress: string;
    receivedAt: Date;
    textContent: string;
  }): Promise<{ success: boolean; message: string; notification?: any }> {
    try {
      const emailSettings = await storage.getEmailSettings();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ email –≤—ñ–¥ –±–∞–Ω–∫—É
      if (!emailSettings?.bankEmailAddress || !emailContent.fromAddress.includes(emailSettings.bankEmailAddress)) {
        return { success: false, message: "Email –Ω–µ –≤—ñ–¥ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∞–¥—Ä–µ—Å–∏" };
      }

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç email –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      const paymentInfo = this.analyzeBankEmailContent(emailContent.textContent);
      
      if (!paymentInfo) {
        return { success: false, message: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—é –≤ email" };
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ –±–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const notification: InsertBankPaymentNotification = {
        messageId: emailContent.messageId,
        subject: emailContent.subject,
        fromAddress: emailContent.fromAddress,
        receivedAt: emailContent.receivedAt,
        accountNumber: paymentInfo.accountNumber,
        currency: paymentInfo.currency,
        operationType: paymentInfo.operationType,
        amount: paymentInfo.amount.toString(),
        correspondent: paymentInfo.correspondent,
        paymentPurpose: paymentInfo.paymentPurpose,
        invoiceNumber: paymentInfo.invoiceNumber,
        invoiceDate: paymentInfo.invoiceDate,
        vatAmount: paymentInfo.vatAmount?.toString(),
        processed: false,
        rawEmailContent: emailContent.textContent,
      };

      const savedNotification = await storage.createBankPaymentNotification(notification);

      // –Ø–∫—â–æ —Ü–µ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ —Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É - –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–ª–∞—Ç—ñ–∂
      if (paymentInfo.operationType === "–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ" && paymentInfo.invoiceNumber) {
        const paymentResult = await this.processPayment(savedNotification.id, paymentInfo);
        
        if (paymentResult.success) {
          await storage.updateBankPaymentNotification(savedNotification.id, {
            processed: true,
            orderId: paymentResult.orderId,
          });
        } else {
          await storage.updateBankPaymentNotification(savedNotification.id, {
            processingError: paymentResult.message,
          });
        }

        return {
          success: true,
          message: paymentResult.success ? 
            `–ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ${paymentInfo.invoiceNumber} –Ω–∞ —Å—É–º—É ${paymentInfo.amount} UAH` :
            `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É: ${paymentResult.message}`,
          notification: savedNotification
        };
      }

      return {
        success: true,
        message: "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∞–ª–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –æ–±—Ä–æ–±–∫–∏",
        notification: savedNotification
      };

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", error);
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${error.message}` };
    }
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
   */
  private analyzeBankEmailContent(emailText: string): {
    accountNumber: string;
    currency: string;
    operationType: string;
    amount: number;
    correspondent: string;
    paymentPurpose: string;
    invoiceNumber?: string;
    invoiceDate?: Date;
    vatAmount?: number;
  } | null {
    try {
      // –®—É–∫–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ —Ñ—Ä–∞–∑–∏ –∑ –ø—Ä–∏–∫–ª–∞–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const accountMatch = emailText.match(/—Ä—É—Ö –∫–æ—à—Ç—ñ–≤ –ø–æ —Ä–∞—Ö—É–Ω–∫—É:\s*([A-Z0-9]+)/i);
      const currencyMatch = emailText.match(/–≤–∞–ª—é—Ç–∞:\s*([A-Z]{3})/i);
      const operationMatch = emailText.match(/—Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:\s*([^,]+)/i);
      const amountMatch = emailText.match(/—Å—É–º–º–∞:\s*([\d,\.]+)/i);
      const correspondentMatch = emailText.match(/–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç:\s*([^,]+)/i);
      const purposeMatch = emailText.match(/–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:\s*([^\.]+)/i);
      
      // –®—É–∫–∞—î–º–æ –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É (–†–ú00-XXXXXX)
      const invoiceMatch = emailText.match(/–†–ú00-(\d+)/i);
      
      // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É —Ä–∞—Ö—É–Ω–∫—É
      const dateMatch = emailText.match(/–≤—ñ–¥\s*(\d{2}\.\d{2}\.\d{4})/i);
      
      // –®—É–∫–∞—î–º–æ –ü–î–í
      const vatMatch = emailText.match(/–ü–î–í.*?(\d+[,\.]\d+)/i);

      if (!accountMatch || !operationMatch || !amountMatch || !correspondentMatch) {
        console.log("üè¶ –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
        return null;
      }

      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—É–º—É –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É (–∫–æ–º–∏ —è–∫ –¥–µ—Å—è—Ç–∫–æ–≤—ñ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ)
      const amountStr = amountMatch[1].replace(',', '.');
      const amount = parseFloat(amountStr);

      const vatAmount = vatMatch ? parseFloat(vatMatch[1].replace(',', '.')) : undefined;

      let invoiceDate: Date | undefined;
      if (dateMatch) {
        const [day, month, year] = dateMatch[1].split('.');
        invoiceDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      }

      return {
        accountNumber: accountMatch[1],
        currency: currencyMatch?.[1] || "UAH",
        operationType: operationMatch[1].trim(),
        amount: amount,
        correspondent: correspondentMatch[1].trim(),
        paymentPurpose: purposeMatch?.[1]?.trim() || "",
        invoiceNumber: invoiceMatch ? `–†–ú00-${invoiceMatch[1]}` : undefined,
        invoiceDate: invoiceDate,
        vatAmount: vatAmount,
      };

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ email:", error);
      return null;
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É - –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
   */
  private async processPayment(notificationId: number, paymentInfo: any): Promise<{ success: boolean; message: string; orderId?: number }> {
    try {
      if (!paymentInfo.invoiceNumber) {
        return { success: false, message: "–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ" };
      }

      // –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É
      const order = await storage.getOrderByInvoiceNumber(paymentInfo.invoiceNumber);
      
      if (!order) {
        return { success: false, message: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º —Ä–∞—Ö—É–Ω–∫—É ${paymentInfo.invoiceNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ` };
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      const result = await storage.updateOrderPaymentStatus(
        order.id, 
        paymentInfo.amount, 
        "bank_transfer"
      );

      console.log(`üè¶‚úÖ –ü–ª–∞—Ç—ñ–∂ –æ–±—Ä–æ–±–ª–µ–Ω–æ: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} (${paymentInfo.invoiceNumber}) - ${paymentInfo.amount} UAH`);

      return {
        success: true,
        message: `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${order.id} –æ–Ω–æ–≤–ª–µ–Ω–æ`,
        orderId: order.id
      };

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É:", error);
      return { success: false, message: error.message };
    }
  }

  /**
   * –†—É—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
   */
  async manualProcessEmail(emailContent: string): Promise<{ success: boolean; message: string; details?: any }> {
    const mockEmail = {
      messageId: `manual-${Date.now()}`,
      subject: "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
      fromAddress: "noreply@ukrsib.com.ua",
      receivedAt: new Date(),
      textContent: emailContent,
    };

    return await this.processBankEmail(mockEmail);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  async getBankEmailStats(): Promise<{
    total: number;
    processed: number;
    unprocessed: number;
    lastWeek: number;
  }> {
    try {
      const allNotifications = await storage.getBankPaymentNotifications();
      const processed = allNotifications.filter(n => n.processed);
      const unprocessed = allNotifications.filter(n => !n.processed);
      
      const lastWeek = new Date();
      lastWeek.setDate(lastWeek.getDate() - 7);
      const recentNotifications = allNotifications.filter(n => 
        new Date(n.receivedAt) >= lastWeek
      );

      return {
        total: allNotifications.length,
        processed: processed.length,
        unprocessed: unprocessed.length,
        lastWeek: recentNotifications.length,
      };
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      return { total: 0, processed: 0, unprocessed: 0, lastWeek: 0 };
    }
  }
}

// Singleton instance
export const bankEmailService = new BankEmailService();