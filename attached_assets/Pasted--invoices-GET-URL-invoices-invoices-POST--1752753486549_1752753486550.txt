// Ресурс: /invoices
// Метод: GET
// Шаблон URL: /invoices     

Функция invoices_POST(Запрос)
	
	ИмяФайлаЛога = "c:\temp\erp_icoming_debug.txt";  
	
    Попытка
        МассивНакладных = ПолучитьНакладныеСФільтромПо202(); //ПолучитьТоварныеНакладные(); //ПолучитьДанныеНакладных(50);
        
        //ЗаписатьВФайл(ИмяФайлаЛога,  "Найдено накладных: " + Строка(МассивНакладных.Количество()));
        
        // JSON
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивНакладных);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        // Ответ
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);
        Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
        
        //ЗаписатьВФайл(ИмяФайлаЛога,  "SUCCESS: Отправлено накладных: " + Строка(МассивНакладных.Количество()));
        //ЗаписатьВФайл(ИмяФайлаЛога,  СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        ЗаписатьВФайл(ИмяФайлаЛога,  "ERROR в invoicesPOST: " + ОписаниеОшибки());
        
        ОтветОшибка = Новый HTTPСервисОтвет(500);
        ОтветОшибка.УстановитьТелоИзСтроки("Error: " + ОписаниеОшибки(), КодировкаТекста.UTF8);
        Возврат ОтветОшибка;
        
    КонецПопытки;
    
КонецФункции

// Функція для отримання накладних з фільтрацією по рахунку обліку 202
Функция ПолучитьНакладныеСФільтромПо202() Экспорт
    
    МассивНакладных = Новый Массив;
    
    // Отримуємо накладні за останні 3 місяці
    ДатаНачала = НачалоМесяца(ТекущаяДата() - 86400 * 90); // 3 місяці назад
    ДатаОкончания = КонецДня(ТекущаяДата());
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |    ПТУ.Ссылка КАК СсылкаДокумента,
        |    ПТУ.Номер КАК НомерДокумента,
        |    ПТУ.Дата КАК ДатаДокумента,
        |    ПТУ.Контрагент КАК Контрагент,
        |    ПТУ.Контрагент.Наименование КАК НаименованиеКонтрагента,
        |    ПТУ.Контрагент.ИНН КАК ИННКонтрагента,
        |    ПТУ.СуммаДокумента КАК СуммаДокумента,
        |    ПТУ.ВалютаДокумента.Код КАК КодВалюты,
        |    ПТУ.Проведен КАК Проведен
        |ИЗ
        |    Документ.ПоступлениеТоваровУслуг КАК ПТУ
        |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК Товары202
        |        ПО ПТУ.Ссылка = Товары202.Ссылка
        |        И Товары202.СчетУчетаБУ.Код = ""202""
        |ГДЕ
        |    ПТУ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
        |    И ПТУ.ПометкаУдаления = ЛОЖЬ
        |    И ПТУ.Проведен = ИСТИНА
        |УПОРЯДОЧИТЬ ПО
        |    ПТУ.Дата УБЫВ";
    
    Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
    
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
        СтруктураНакладной = Новый Структура;
        СтруктураНакладной.Вставить("id", Строка(Выборка.СсылкаДокумента.УникальныйИдентификатор()));
        СтруктураНакладной.Вставить("number", Выборка.НомерДокумента);
        СтруктураНакладной.Вставить("date", Формат(Выборка.ДатаДокумента, "ДФ=yyyy-MM-dd"));
        СтруктураНакладной.Вставить("supplierName", Выборка.НаименованиеКонтрагента);
        СтруктураНакладной.Вставить("supplierTaxCode", Выборка.ИННКонтрагента);
        СтруктураНакладной.Вставить("amount", Выборка.СуммаДокумента);
        СтруктураНакладной.Вставить("currency", Выборка.КодВалюты);
        СтруктураНакладной.Вставить("status", ?(Выборка.Проведен, "posted", "draft"));
        СтруктураНакладной.Вставить("hasAccount202", Истина); // Маркер що накладна має позиції з рахунку 202
        
        // Отримуємо тільки позиції з рахунку обліку 202
        Позиции = ПолучитьПозицииТолькоПо202(Выборка.СсылкаДокумента);
        СтруктураНакладной.Вставить("items", Позиции);
        
        МассивНакладных.Добавить(СтруктураНакладной);
        
    КонецЦикла;
    
    Возврат МассивНакладных;
    
КонецФункции

// ВИПРАВЛЕНА функція для отримання тільки позицій з рахунку 202
Функция ПолучитьПозицииТолькоПо202(СсылкаДокумента)
    
    МассивПозиций = Новый Массив;
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
        |ВЫБРАТЬ
        |    Т202.Номенклатура КАК Номенклатура,
        |    Т202.Номенклатура.Наименование КАК НаименованиеТовара,
        |    Т202.Номенклатура.Артикул КАК Артикул,
        |    Т202.Количество КАК Количество,
        |    Т202.Цена КАК Цена,
        |    Т202.Сумма КАК Сумма,
        |    Т202.СчетУчетаБУ.Код КАК СчетУчетаБУ,
        |    Т202.СчетУчетаБУ.Наименование КАК НаименованиеСчета
        |ИЗ
        |    Документ.ПоступлениеТоваровУслуг.Товары КАК Т202
        |ГДЕ
        |    Т202.Ссылка = &СсылкаДокумента
        |    И Т202.СчетУчетаБУ.Код = ""202""
        |УПОРЯДОЧИТЬ ПО
        |    Т202.НомерСтроки";
    
    Запрос.УстановитьПараметр("СсылкаДокумента", СсылкаДокумента);
    
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
        Позиция = Новый Структура;
        Позиция.Вставить("name", Выборка.НаименованиеТовара);
        Позиция.Вставить("sku", Выборка.Артикул);
        Позиция.Вставить("quantity", Выборка.Количество);
        Позиция.Вставить("price", Выборка.Цена);
        Позиция.Вставить("total", Выборка.Сумма);
        Позиция.Вставить("accountCode", Выборка.СчетУчетаБУ);
        Позиция.Вставить("accountName", Выборка.НаименованиеСчета);
        
        МассивПозиций.Добавить(Позиция);
        
    КонецЦикла;
    
    Возврат МассивПозиций;
    
КонецФункции

Функция ПолучитьТоварныеНакладные()
    ИмяФайлаЛога = "c:\temp\erp_icoming_debug.txt";  

	Попытка
        //ЗаписатьВФайл(ИмяФайлаЛога, " Пошук накладних ТІЛЬКИ з товарними позиціями...");
        
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ
        |    Док.Ссылка КАК СсылкаДокумента,
        |    Док.Номер КАК НомерДокумента,
        |    Док.Дата КАК ДатаДокумента,
        |    ВЫБОР
        |        КОГДА Контрагенты.Наименование <> """"
        |        ТОГДА Контрагенты.Наименование
        |        ИНАЧЕ ""Постачальник не вказано""
        |    КОНЕЦ КАК Постачальник,
        |    Док.СуммаДокумента КАК СуммаДокумента,
        |    Валюты.Код КАК КодВалюты
        |ИЗ
        |    Документ.ПоступлениеТоваровУслуг КАК Док
        |    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
        |        ПО Док.Контрагент = Контрагенты.Ссылка
        |    ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
        |        ПО Док.ВалютаДокумента = Валюты.Ссылка
        |ГДЕ
        |    Док.Дата >= &ДатаНачала
        |    И Док.Проведен = ИСТИНА
        |    И ЕСТЬNULL(Док.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
        |    // ФІЛЬТР: тільки документи які мають товарні позиції (табличка Товары)
        |    И Док.Ссылка В (
        |        ВЫБРАТЬ РАЗЛИЧНЫЕ
        |            Товары.Ссылка
        |        ИЗ
        |            Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
        |        ГДЕ
        |            Товары.Количество > 0
        |    )
        |УПОРЯДОЧИТЬ ПО
        |    Док.Дата УБЫВ
        |";
        
        // Останні 3 місяці
        ДатаНачала = ТекущаяДата() - 90*24*3600;
        Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
        
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        МассивНакладных = Новый Массив;
        
        Пока Выборка.Следующий() Цикл
            // Отримуємо тільки товарні позиції з табличної частини Товары
            ТоварныеПозиции = ПолучитьТоварныеПозиции(Выборка.СсылкаДокумента);
            
            // Пропускаємо якщо немає товарних позицій
            Если ТоварныеПозиции.Количество() = 0 Тогда
                Продолжить;
            КонецЕсли;
            
            Накладная = Новый Структура;
            Накладная.Вставить("НомерДокумента", Выборка.НомерДокумента);
            Накладная.Вставить("ДатаДокумента", Формат(Выборка.ДатаДокумента, "ДФ=yyyy-MM-dd"));
            Накладная.Вставить("Постачальник", Выборка.Постачальник);
            Накладная.Вставить("СуммаДокумента", Выборка.СуммаДокумента);
            Накладная.Вставить("КодВалюты", Выборка.КодВалюты);
            Накладная.Вставить("Позиції", ТоварныеПозиции);
            Накладная.Вставить("КількістьТоварів", ТоварныеПозиции.Количество());
            
            МассивНакладных.Добавить(Накладная);
        КонецЦикла;
        
        //ЗаписатьВФайл(ИмяФайлаЛога, "✅ Знайдено " + МассивНакладных.Количество() + " накладних з товарами");
        Возврат МассивНакладных;
        
    Исключение
		ЗаписатьВФайл(ИмяФайлаЛога, "ERROR позиций: " + ОписаниеОшибки());
        Возврат Новый Массив;
    КонецПопытки;
КонецФункции  

// без послугами
Функция ПолучитьТоварныеПозиции(СсылкаДокумента)  
 	ИмяФайлаЛога = "c:\temp\erp_icoming_debug.txt";  

    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ
        |    Товары.Номенклатура.Наименование КАК НаименованиеТовара,
        |    Товары.Номенклатура.Код КАК КодТовара,
        |    Товары.Количество КАК Количество,
        |    Товары.Цена КАК Цена,
        |    Товары.Сумма КАК Сумма,
        |    Товары.НомерСтроки КАК НомерСтроки
        |ИЗ
        |    Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
        |ГДЕ
        |    Товары.Ссылка = &СсылкаДокумента
        |    И Товары.Количество > 0
        |УПОРЯДОЧИТЬ ПО
        |    Товары.НомерСтроки
        |";
        
        Запрос.УстановитьПараметр("СсылкаДокумента", СсылкаДокумента);
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        МассивПозиций = Новый Массив;
        
        Пока Выборка.Следующий() Цикл
            Позиция = Новый Структура;
            Позиция.Вставить("НаименованиеТовара", Выборка.НаименованиеТовара);
            Позиция.Вставить("КодТовара", Выборка.КодТовара);
            Позиция.Вставить("Количество", Выборка.Количество);
            Позиция.Вставить("Цена", Выборка.Цена*1.2);
            Позиция.Вставить("Сумма", Выборка.Сумма*1.2);
            Позиция.Вставить("НомерСтроки", Выборка.НомерСтроки);
            
            МассивПозиций.Добавить(Позиция);
        КонецЦикла;
        
        //ЗаписатьВФайл(ИмяФайлаЛога, " Знайдено " + МассивПозиций.Количество() + " товарних позицій");
        Возврат МассивПозиций;
        
    Исключение
        ЗаписатьВФайл(ИмяФайлаЛога, "Помилка отримання товарних позицій: " + ОписаниеОшибки());
        Возврат Новый Массив;
    КонецПопытки;
КонецФункции

// Функция для преобразования данных в JSON (работает во всех версиях 1С)
Функция ПреобразоватьВJSON(МассивНакладных)
    
    // Попытка использовать новый API JSON (для 1С 8.3.8+)
    Попытка
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивНакладных);
        Возврат ЗаписьJSON.Закрыть();
    Исключение
        // Если новый API недоступен, используем ручную сборку JSON
    КонецПопытки;
    
    // Ручная сборка JSON для старых версий 1С
    JSONСтрока = "{""invoices"":[";
    
    Для Индекс = 0 По МассивНакладных.ВГраница() Цикл
        
        Накладная = МассивНакладных[Индекс];
        
        Если Индекс > 0 Тогда
            JSONСтрока = JSONСтрока + ",";
        КонецЕсли;
        
        JSONСтрока = JSONСтрока + "{";
        JSONСтрока = JSONСтрока + """id"":""" + ЭкранироватьJSON(Накладная.id) + """,";
        JSONСтрока = JSONСтрока + """number"":""" + ЭкранироватьJSON(Накладная.number) + """,";
        JSONСтрока = JSONСтрока + """date"":""" + ЭкранироватьJSON(Накладная.date) + """,";
        JSONСтрока = JSONСтрока + """supplier"":""" + ЭкранироватьJSON(Накладная.supplier) + """,";
        JSONСтрока = JSONСтрока + """amount"":" + Формат(Накладная.amount, "ЧДЦ=2; ЧРГ=0; ЧН=0.00") + ",";
        JSONСтрока = JSONСтрока + """currency"":""" + ЭкранироватьJSON(Накладная.currency) + """,";
        JSONСтрока = JSONСтрока + """comment"":""" + ЭкранироватьJSON(Накладная.comment) + """,";
        JSONСтрока = JSONСтрока + """status"":""" + ЭкранироватьJSON(Накладная.status) + """,";
        JSONСтрока = JSONСтрока + """items"":[";
        
        // Добавление позиций
        Для ИндексПозиции = 0 По Накладная.items.ВГраница() Цикл
            
            Позиция = Накладная.items[ИндексПозиции];
            
            Если ИндексПозиции > 0 Тогда
                JSONСтрока = JSONСтрока + ",";
            КонецЕсли;
            
            JSONСтрока = JSONСтрока + "{";
            JSONСтрока = JSONСтрока + """name"":""" + ЭкранироватьJSON(Позиция.name) + """,";
            JSONСтрока = JSONСтрока + """sku"":""" + ЭкранироватьJSON(Позиция.sku) + """,";
            JSONСтрока = JSONСтрока + """quantity"":" + Формат(Позиция.quantity, "ЧДЦ=3; ЧРГ=0; ЧН=0.000") + ",";
            JSONСтрока = JSONСтрока + """price"":" + Формат(Позиция.price, "ЧДЦ=2; ЧРГ=0; ЧН=0.00") + ",";
            JSONСтрока = JSONСтрока + """total"":" + Формат(Позиция.total, "ЧДЦ=2; ЧРГ=0; ЧН=0.00") + ",";
            JSONСтрока = JSONСтрока + """unit"":""" + ЭкранироватьJSON(Позиция.unit) + """";
            JSONСтрока = JSONСтрока + "}";
            
        КонецЦикла;
        
        JSONСтрока = JSONСтрока + "]";
        JSONСтрока = JSONСтрока + "}";
        
    КонецЦикла;
    
    JSONСтрока = JSONСтрока + "]}";
    
    Возврат JSONСтрока;
    
КонецФункции

// Функция для экранирования JSON строк
Функция ЭкранироватьJSON(Строка)
    
    Если Строка = Неопределено Тогда
        Возврат "";
    КонецЕсли;
    
    Результат = СтрЗаменить(Строка, """", """""");
    Результат = СтрЗаменить(Результат, "\", "\\");
    Результат = СтрЗаменить(Результат, Символы.ПС, "\n");
    Результат = СтрЗаменить(Результат, Символы.ВК, "\r");
    Результат = СтрЗаменить(Результат, Символы.Таб, "\t");
    
    Возврат Результат;
    
КонецФункции

// Обработчик HTTP-сервиса для исходящих счетов
Функция outgoing_invoices_POST(Запрос)
    
    // Инициализация ответа
    Ответ = Новый HTTPСервисОтвет(200);
    
    // Имя файла лога
    ИмяФайлаЛога = "c:\temp\erp_outgoing_debug.txt";
    ДатаВремя = ТекущаяДата();
    
    Попытка
        // Получаем тело запроса
        ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
        
        // Логируем запрос
        //ЗаписатьВФайл(ИмяФайлаЛога, Формат(ДатаВремя, "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - Получен запрос: " + ТелоЗапроса + Символы.ПС);
        
        // Парсим JSON вручную (избегаем ПрочитатьJSON)
        action = "";
        limit = 100;
        
        // Простой парсинг action
        Если СтрНайти(ТелоЗапроса, """getOutgoingInvoices""") > 0 Тогда
            action = "getOutgoingInvoices";
        КонецЕсли;
        
        // Простой парсинг limit
        ПозицияLimit = СтрНайти(ТелоЗапроса, """limit"":");
        Если ПозицияLimit > 0 Тогда
            ОстатокСтроки = Сред(ТелоЗапроса, ПозицияLimit + 8);
            ПозицияЧисла = 1;
            НачалоЧисла = 0;
            Пока ПозицияЧисла <= СтрДлина(ОстатокСтроки) Цикл
                Символ = Сред(ОстатокСтроки, ПозицияЧисла, 1);
                Если Символ >= "0" И Символ <= "9" Тогда
                    НачалоЧисла = ПозицияЧисла;
                    Прервать;
                КонецЕсли;
                ПозицияЧисла = ПозицияЧисла + 1;
            КонецЦикла;
            
            Если НачалоЧисла > 0 Тогда
                КонецЧисла = НачалоЧисла;
                Пока КонецЧисла <= СтрДлина(ОстатокСтроки) Цикл
                    Символ = Сред(ОстатокСтроки, КонецЧисла, 1);
                    Если НЕ (Символ >= "0" И Символ <= "9") Тогда
                        Прервать;
                    КонецЕсли;
                    КонецЧисла = КонецЧисла + 1;
                КонецЦикла;
                
                СтрокаЧисла = Сред(ОстатокСтроки, НачалоЧисла, КонецЧисла - НачалоЧисла);
                Попытка
                    limit = Число(СтрокаЧисла);
                Исключение
                    limit = 100;
                КонецПопытки;
            КонецЕсли;
        КонецЕсли;
        
        // Проверяем action
        Если action = "getOutgoingInvoices" Тогда
            
            // ✅ ИСПРАВЛЕНО: Получаем данные С ПОЗИЦИЯМИ
            МассивСчетов = ПолучитьИсходящиеСчетаСПозициями(limit);
            
            // Формируем JSON вручную С ПОЗИЦИЯМИ
            СтрокаJSON = "{""invoices"":[";
            Для Индекс = 0 По МассивСчетов.Количество() - 1 Цикл
                Счет = МассивСчетов[Индекс];
                Если Индекс > 0 Тогда
                    СтрокаJSON = СтрокаJSON + ",";
                КонецЕсли;
                СтрокаJSON = СтрокаJSON + "{";
                СтрокаJSON = СтрокаJSON + """invoiceNumber"":""" + ОчиститьСтрокуДляJSON(Счет.invoiceNumber) + """,";
                СтрокаJSON = СтрокаJSON + """date"":""" + ОчиститьСтрокуДляJSON(Счет.date) + """,";
                СтрокаJSON = СтрокаJSON + """client"":""" + ОчиститьСтрокуДляJSON(Счет.client) + """,";
                СтрокаJSON = СтрокаJSON + """amount"":" + Формат(Счет.amount, "ЧДЦ=2; ЧРД=.; ЧГ=") + ",";
                СтрокаJSON = СтрокаJSON + """currency"":""" + ОчиститьСтрокуДляJSON(Счет.currency) + """,";
                СтрокаJSON = СтрокаJSON + """notes"":""" + ОчиститьСтрокуДляJSON(Счет.notes) + """,";
                СтрокаJSON = СтрокаJSON + """status"":""" + ОчиститьСтрокуДляJSON(Счет.status) + """,";
                
                // ✅ ДОБАВЛЯЕМ ПОЗИЦИИ
                СтрокаJSON = СтрокаJSON + """positions"":[";
                Для ИндексПоз = 0 По Счет.positions.Количество() - 1 Цикл
                    Позиция = Счет.positions[ИндексПоз];
                    Если ИндексПоз > 0 Тогда
                        СтрокаJSON = СтрокаJSON + ",";
                    КонецЕсли;
                    СтрокаJSON = СтрокаJSON + "{";
                    СтрокаJSON = СтрокаJSON + """productName"":""" + ОчиститьСтрокуДляJSON(Позиция.productName) + """,";
                    СтрокаJSON = СтрокаJSON + """quantity"":" + Формат(Позиция.quantity, "ЧДЦ=2; ЧРД=.; ЧГ=") + ",";
                    СтрокаJSON = СтрокаJSON + """price"":" + Формат(Позиция.price, "ЧДЦ=2; ЧРД=.; ЧГ=") + ",";
                    СтрокаJSON = СтрокаJSON + """total"":" + Формат(Позиция.total, "ЧДЦ=2; ЧРД=.; ЧГ=");
                    СтрокаJSON = СтрокаJSON + "}";
                КонецЦикла;
                СтрокаJSON = СтрокаJSON + "]";
                
                СтрокаJSON = СтрокаJSON + "}";
            КонецЦикла;
            СтрокаJSON = СтрокаJSON + "],";
            СтрокаJSON = СтрокаJSON + """total"":" + Формат(МассивСчетов.Количество(), "ЧГ=") + ",";
            СтрокаJSON = СтрокаJSON + """timestamp"":""" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd ВФ=HH:mm:ss") + """";
            СтрокаJSON = СтрокаJSON + "}";
            
            //ЗаписатьВФайл(ИмяФайлаЛога, СтрокаJSON);

            // Логируем успех
            //ЗаписатьВФайл(ИмяФайлаЛога, Формат(ДатаВремя, "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - Успешно: " + МассивСчетов.Количество() + " счетов с позициями" + Символы.ПС);
            
            // Возвращаем результат
            Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);
            Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

            //ЗаписатьВФайл(ИмяФайлаЛога, "Отправлено " + МассивСчетов.Количество() + " счетов с позициями");
        Иначе
            // Неверный action
            СтрокаJSON = "{""error"":""Неизвестное действие""}";
            Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
            Ответ.КодСостояния = 400;
        КонецЕсли;
        
    Исключение
        // Обработка ошибки
        ТекстОшибки = ОписаниеОшибки();
        
        // Логируем ошибку
        ЗаписатьВФайл(ИмяФайлаЛога, Формат(ДатаВремя, "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - ОШИБКА: " + ТекстОшибки + Символы.ПС);
        
        // Возвращаем ошибку
        СтрокаJSON = "{""error"":""Ошибка сервера""}";
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        Ответ.КодСостояния = 500;
    КонецПопытки;
             
    Возврат Ответ;
    
КонецФункции

// НОВАЯ функция получения реальных исходящих счетов С ПОЗИЦИЯМИ
Функция ПолучитьИсходящиеСчетаСПозициями(Лимит)
    
    МассивСчетов = Новый Массив;
    ИмяФайлаЛога = "c:\temp\erp_outgoing_debug.txt";
    
    Попытка
        //ЗаписатьВФайл(ИмяФайлаЛога, Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - Начинаем запрос счетов с позициями" + Символы.ПС);
        
        // Создаем запрос к базе данных 1С для получения исходящих счетов
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ " + Лимит + "
        |    СчетаНаОплатуПокупателю.Ссылка КАК СсылкаДокумента,
        |    СчетаНаОплатуПокупателю.Номер КАК НомерСчета,
        |    СчетаНаОплатуПокупателю.Дата КАК ДатаСчета,
        |    СчетаНаОплатуПокупателю.Контрагент.Наименование КАК НаименованиеКонтрагента,
        |    СчетаНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
        |    СчетаНаОплатуПокупателю.ВалютаДокумента.Код КАК КодВалюты,
        |    СчетаНаОплатуПокупателю.Комментарий КАК Комментарий,
        |    ВЫБОР
        |        КОГДА СчетаНаОплатуПокупателю.Проведен = ИСТИНА ТОГДА ""posted""
        |        ИНАЧЕ ""draft""
        |    КОНЕЦ КАК СтатусДокумента
        |ИЗ
        |    Документ.СчетНаОплатуПокупателю КАК СчетаНаОплатуПокупателю
        |ГДЕ
        |    СчетаНаОплатуПокупателю.Проведен = ИСТИНА
        |    И СчетаНаОплатуПокупателю.ПометкаУдаления = ЛОЖЬ
        |    И СчетаНаОплатуПокупателю.Дата >= &НачалоПериода
        |УПОРЯДОЧИТЬ ПО
        |    СчетаНаОплатуПокупателю.Дата УБЫВ";
        
        // Устанавливаем параметр - последние 3 месяца
        Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -3)));
        
        // Выполняем запрос
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        СчетчикСчетов = 0;
        // Обрабатываем результаты
        Пока Выборка.Следующий() Цикл
            СчетчикСчетов = СчетчикСчетов + 1;
            //ЗаписатьВФайл(ИмяФайлаЛога, "Обрабатываем счет " + СчетчикСчетов + ": " + Выборка.НомерСчета);
            
            СчетСтруктура = Новый Структура;
            СчетСтруктура.Вставить("invoiceNumber", СокрЛП(Выборка.НомерСчета));
            СчетСтруктура.Вставить("date", Формат(Выборка.ДатаСчета, "ДФ=yyyy-MM-dd"));
            СчетСтруктура.Вставить("client", СокрЛП(Выборка.НаименованиеКонтрагента));
            СчетСтруктура.Вставить("amount", Выборка.СуммаДокумента);
            СчетСтруктура.Вставить("currency", СокрЛП(Выборка.КодВалюты));
            СчетСтруктура.Вставить("notes", СокрЛП(Выборка.Комментарий));
            СчетСтруктура.Вставить("status", СокрЛП(Выборка.СтатусДокумента));
            
            // ГЛАВНОЕ ИСПРАВЛЕНИЕ: Получаем позиции счета
            //ЗаписатьВФайл(ИмяФайлаЛога, "Получаем позиции для счета: " + Выборка.НомерСчета);
            Позиции = ПолучитьПозицииСчета(Выборка.СсылкаДокумента);
            СчетСтруктура.Вставить("positions", Позиции);
            //ЗаписатьВФайл(ИмяФайлаЛога, "Найдено позиций: " + Позиции.Количество());
            
            МассивСчетов.Добавить(СчетСтруктура);
        КонецЦикла;
        
        // Логируем успешное получение данных
        //ЗаписатьВФайл(ИмяФайлаЛога, 
        //    Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + 
        //    " - Получено из базы: " + МассивСчетов.Количество() + " реальных счетов с позициями" + Символы.ПС);
        
    Исключение
        // Если произошла ошибка с запросом, логируем и возвращаем пустой массив
        ТекстОшибки = ОписаниеОшибки();
        ЗаписатьВФайл(ИмяФайлаЛога, 
            Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + 
            " - ОШИБКА запроса к базе: " + ТекстОшибки + Символы.ПС);
    КонецПопытки;
    
    Возврат МассивСчетов;
    
КонецФункции

// ИСПРАВЛЕННАЯ функция получения позиций счета (исправлена таблица)
Функция ПолучитьПозицииСчета(СсылкаНаСчет)
    
    МассивПозиций = Новый Массив;
    ИмяФайлаЛога = "c:\temp\erp_outgoing_debug.txt";
    
    Попытка
        //ЗаписатьВФайл(ИмяФайлаЛога, "Начинаем запрос позиций для документа...");
        
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ
        |    СчетаНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
        |    СчетаНаОплатуПокупателюТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
        |    СчетаНаОплатуПокупателюТовары.Количество КАК Количество,
        |    СчетаНаОплатуПокупателюТовары.Цена КАК Цена,
        |    СчетаНаОплатуПокупателюТовары.Сумма КАК Сумма
        |ИЗ
        |    Документ.СчетНаОплатуПокупателю.Товары КАК СчетаНаОплатуПокупателюТовары
        |ГДЕ
        |    СчетаНаОплатуПокупателюТовары.Ссылка = &Ссылка";
        
        Запрос.УстановитьПараметр("Ссылка", СсылкаНаСчет);
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаПозиций = РезультатЗапроса.Выбрать();
        
        СчетчикПозиций = 0;
        Пока ВыборкаПозиций.Следующий() Цикл
            СчетчикПозиций = СчетчикПозиций + 1;
            //ЗаписатьВФайл(ИмяФайлаЛога, "Позиция " + СчетчикПозиций + ": " + Строка(ВыборкаПозиций.НаименованиеНоменклатуры));
            
            СтруктураПозиции = Новый Структура;
            
            // Наименование товара/услуги
            Если ЗначениеЗаполнено(ВыборкаПозиций.НаименованиеНоменклатуры) Тогда
                СтруктураПозиции.Вставить("productName", Строка(ВыборкаПозиций.НаименованиеНоменклатуры));
            ИначеЕсли ЗначениеЗаполнено(ВыборкаПозиций.Номенклатура) Тогда
                СтруктураПозиции.Вставить("productName", Строка(ВыборкаПозиций.Номенклатура));
            Иначе
                СтруктураПозиции.Вставить("productName", "Неизвестный товар");
            КонецЕсли;
            
            // Количество
            Если ТипЗнч(ВыборкаПозиций.Количество) = Тип("Число") Тогда
                СтруктураПозиции.Вставить("quantity", ВыборкаПозиций.Количество);
            Иначе
                СтруктураПозиции.Вставить("quantity", 1);
            КонецЕсли;
            
            // Цена
            Если ТипЗнч(ВыборкаПозиций.Цена) = Тип("Число") Тогда
                СтруктураПозиции.Вставить("price", ВыборкаПозиций.Цена);
            Иначе
                СтруктураПозиции.Вставить("price", 0);
            КонецЕсли;
            
            // Сумма
            Если ТипЗнч(ВыборкаПозиций.Сумма) = Тип("Число") Тогда
                СтруктураПозиции.Вставить("total", ВыборкаПозиций.Сумма);
            Иначе
                СтруктураПозиции.Вставить("total", 0);
            КонецЕсли;
            
            МассивПозиций.Добавить(СтруктураПозиции);
            
        КонецЦикла;
        
        //ЗаписатьВФайл(ИмяФайлаЛога, "Успешно получено " + МассивПозиций.Количество() + " позиций");
        
    Исключение
        // При ошибке возвращаем пустой массив
        ТекстОшибки = ОписаниеОшибки();
        ЗаписатьВФайл(ИмяФайлаЛога, "ОШИБКА получения позиций счета: " + ТекстОшибки);
        МассивПозиций = Новый Массив;
    КонецПопытки;
    
    Возврат МассивПозиций;
    
КонецФункции

// Функция очистки строк для JSON (экранирование кавычек и спецсимволов)
Функция ОчиститьСтрокуДляJSON(Строка)
    
    Если Строка = Неопределено Тогда
        Возврат "";
    КонецЕсли;
    
    Результат = СокрЛП(Строка);
    
    // Экранируем кавычки и спецсимволы для JSON
    Результат = СтрЗаменить(Результат, "\", "\\");  // Обратная косая черта
    Результат = СтрЗаменить(Результат, """", "\"""); // Кавычки
    Результат = СтрЗаменить(Результат, Символы.ПС, "\n"); // Перевод строки
    Результат = СтрЗаменить(Результат, Символы.ВК, "\r"); // Возврат каретки
    Результат = СтрЗаменить(Результат, Символы.Таб, "\t"); // Табуляция
    
    Возврат Результат;
    
КонецФункции

// Функция записи в файл
Процедура ЗаписатьВФайл(ИмяФайла, Текст)
    
    Попытка
        ТекстовыйДокумент = Новый ТекстовыйДокумент;
        
        // Читаем существующий файл если есть
        Попытка
            ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
        Исключение
            // Файл не существует - создаем новый
        КонецПопытки;
        
        // Добавляем новую строку
        ТекстовыйДокумент.ДобавитьСтроку(Текст);
        
        // Записываем файл
        ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
    Исключение
        // Тихо игнорируем ошибки записи в файл
    КонецПопытки;
    
КонецПроцедуры

// Функция определения статуса оплаты
Функция ПолучитьСтатусОплатыСчета(СсылкаНаСчет)
    
    Попытка
        // Запрос оплат по счету
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ
        |    СУММА(ПоступлениеНаРасчетныйСчет.Сумма) КАК СуммаОплат
        |ИЗ
        |    Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
        |ГДЕ
        |    ПоступлениеНаРасчетныйСчет.СчетНаОплату = &Счет
        |    И ПоступлениеНаРасчетныйСчет.Проведен";
        
        Запрос.УстановитьПараметр("Счет", СсылкаНаСчет);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        Если РезультатЗапроса.Пустой() Тогда
            Возврат "unpaid";
        КонецЕсли;
        
        ВыборкаОплат = РезультатЗапроса.Выбрать();
        ВыборкаОплат.Следующий();
        
        СуммаОплат = ВыборкаОплат.СуммаОплат;
        
        // Получаем сумму счета
        СуммаСчета = СсылкаНаСчет.СуммаДокумента;
        
        Если СуммаОплат = 0 Тогда
            Возврат "unpaid";
        ИначеЕсли СуммаОплат >= СуммаСчета Тогда
            Возврат "paid";
        Иначе
            Возврат "partial";
        КонецЕсли;
        
    Исключение
        // При ошибке считаем неоплаченным
        Возврат "unpaid";
    КонецПопытки;
    
КонецФункции

// Функция формирования JSON ответа вручную
Функция СформироватьОтветJSON(МассивСчетов)
    
    СтрокаJSON = "{";
    СтрокаJSON = СтрокаJSON + """invoices"":[";
    
    Для Индекс = 0 По МассивСчетов.ВГраница() Цикл
        Счет = МассивСчетов[Индекс];
        
        Если Индекс > 0 Тогда
            СтрокаJSON = СтрокаJSON + ",";
        КонецЕсли;
        
        СтрокаJSON = СтрокаJSON + "{";
        СтрокаJSON = СтрокаJSON + """invoiceNumber"":""" + ОчиститьСтрокуДляJSON(Счет.invoiceNumber) + """,";
        СтрокаJSON = СтрокаJSON + """clientName"":""" + ОчиститьСтрокуДляJSON(Счет.clientName) + """,";
        СтрокаJSON = СтрокаJSON + """totalAmount"":" + Формат(Счет.totalAmount, "ЧДЦ=2; ЧРД=.; ЧГ=") + ",";
        СтрокаJSON = СтрокаJSON + """currency"":""" + ОчиститьСтрокуДляJSON(Счет.currency) + """,";
        СтрокаJSON = СтрокаJSON + """date"":""" + Формат(Счет.date, "ДФ=yyyy-MM-dd") + """,";
        СтрокаJSON = СтрокаJSON + """status"":""" + ОчиститьСтрокуДляJSON(Счет.status) + """,";
        СтрокаJSON = СтрокаJSON + """clientTaxCode"":""" + ОчиститьСтрокуДляJSON(Счет.clientTaxCode) + """,";
        СтрокаJSON = СтрокаJSON + """paymentStatus"":""" + ОчиститьСтрокуДляJSON(Счет.paymentStatus) + """,";
        СтрокаJSON = СтрокаJSON + """itemsCount"":" + Счет.itemsCount + ",";
        СтрокаJSON = СтрокаJSON + """managerName"":""" + ОчиститьСтрокуДляJSON(Счет.managerName) + """";
        СтрокаJSON = СтрокаJSON + "}";
    КонецЦикла;
    
    СтрокаJSON = СтрокаJSON + "],";
    СтрокаJSON = СтрокаJSON + """total"":" + МассивСчетов.Количество() + ",";
    СтрокаJSON = СтрокаJSON + """timestamp"":""" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd ВФ=HH:mm:ss") + """";
    СтрокаJSON = СтрокаJSON + "}";
    
    Возврат СтрокаJSON;
    
КонецФункции

// Функция получения дополнительных данных счета
Функция ПолучитьДополнительныеДанныеСчета(СсылкаДокумента)
    
    Результат = Новый Структура;
    Результат.Вставить("КодНалогоплательщика", "");
    Результат.Вставить("СтатусОплаты", "unpaid");
    Результат.Вставить("КоличествоПозиций", 0);
    Результат.Вставить("ИмяМенеджера", "");
    
    Попытка
        // Получаем объект документа
        ДокументОбъект = СсылкаДокумента.ПолучитьОбъект();
        
        Если ДокументОбъект <> Неопределено Тогда
            // Код налогоплательщика контрагента
            Если ДокументОбъект.Контрагент <> Неопределено Тогда
                Попытка
                    Результат.КодНалогоплательщика = СокрЛП(ДокументОбъект.Контрагент.ИНН);
                    Если ПустаяСтрока(Результат.КодНалогоплательщика) Тогда
                        Результат.КодНалогоплательщика = СокрЛП(ДокументОбъект.Контрагент.КПП);
                    КонецЕсли;
                Исключение
                    // Игнорируем ошибки получения ИНН/КПП
                КонецПопытки;
            КонецЕсли;
            
            // Менеджер
            Если ДокументОбъект.Свойство("Ответственный") И ДокументОбъект.Ответственный <> Неопределено Тогда
                Результат.ИмяМенеджера = СокрЛП(ДокументОбъект.Ответственный.Наименование);
            КонецЕсли;
            
            // Количество позиций товаров
            Если ДокументОбъект.Свойство("Товары") Тогда
                Результат.КоличествоПозиций = ДокументОбъект.Товары.Количество();
            КонецЕсли;
            
            // Статус оплаты (упрощенная логика)
            Если ДокументОбъект.Проведен Тогда
                Результат.СтатусОплаты = "confirmed";
            Иначе
                Результат.СтатусОплаты = "draft";
            КонецЕсли;
        КонецЕсли;
        
    Исключение
        // В случае ошибки возвращаем значения по умолчанию
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции
