// Обработчик HTTP-сервиса для исходящих счетов
Функция outgoing_invoicesПОСТ(Запрос)
    
    // Инициализация ответа
    Ответ = Новый HTTPСервисОтвет(200);
    
    // Имя файла лога
    ИмяФайлаЛога = "c:\temp\erp_outgoing_debug.txt";
    ДатаВремя = ТекущаяДата();
    
    Попытка
        // Получаем тело запроса
        ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
        
        // Логируем запрос
        ЗаписатьВФайл(ИмяФайлаЛога, Формат(ДатаВремя, "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - Получен запрос: " + ТелоЗапроса + Символы.ПС);
        
        // Парсим JSON вручную (избегаем ПрочитатьJSON)
        action = "";
        limit = 100;
        
        // Простой парсинг action
        Если СтрНайти(ТелоЗапроса, """getOutgoingInvoices""") > 0 Тогда
            action = "getOutgoingInvoices";
        КонецЕсли;
        
        // Простой парсинг limit
        ПозицияLimit = СтрНайти(ТелоЗапроса, """limit"":");
        Если ПозицияLimit > 0 Тогда
            ОстатокСтроки = Сред(ТелоЗапроса, ПозицияLimit + 8);
            ПозицияЧисла = 1;
            Пока ПозицияЧисла <= СтрДлина(ОстатокСтроки) Цикл
                Символ = Сред(ОстатокСтроки, ПозицияЧисла, 1);
                Если Символ >= "0" И Символ <= "9" Тогда
                    НачалоЧисла = ПозицияЧисла;
                    Прервать;
                КонецЕсли;
                ПозицияЧисла = ПозицияЧисла + 1;
            КонецЦикла;
            
            Если НачалоЧисла > 0 Тогда
                КонецЧисла = НачалоЧисла;
                Пока КонецЧисла <= СтрДлина(ОстатокСтроки) Цикл
                    Символ = Сред(ОстатокСтроки, КонецЧисла, 1);
                    Если НЕ (Символ >= "0" И Символ <= "9") Тогда
                        Прервать;
                    КонецЕсли;
                    КонецЧисла = КонецЧисла + 1;
                КонецЦикла;
                
                СтрокаЧисла = Сред(ОстатокСтроки, НачалоЧисла, КонецЧисла - НачалоЧисла);
                Попытка
                    limit = Число(СтрокаЧисла);
                Исключение
                    limit = 100;
                КонецПопытки;
            КонецЕсли;
        КонецЕсли;
        
        // Проверяем action
        Если action = "getOutgoingInvoices" Тогда
            
            // Получаем реальные данные из базы 1С
            МассивСчетов = ПолучитьРеальныеИсходящиеСчета(limit);
            
            // Формируем JSON вручную (избегаем ЗаписатьJSON)
            СтрокаJSON = "{""invoices"":[";
            Для Индекс = 0 По МассивСчетов.Количество() - 1 Цикл
                Счет = МассивСчетов[Индекс];
                Если Индекс > 0 Тогда
                    СтрокаJSON = СтрокаJSON + ",";
                КонецЕсли;
                СтрокаJSON = СтрокаJSON + "{";
                СтрокаJSON = СтрокаJSON + """invoiceNumber"":""" + Счет.invoiceNumber + """,";
                СтрокаJSON = СтрокаJSON + """date"":""" + Счет.date + """,";
                СтрокаJSON = СтрокаJSON + """client"":""" + Счет.client + """,";
                СтрокаJSON = СтрокаJSON + """amount"":" + Формат(Счет.amount, "ЧГ=") + ",";
                СтрокаJSON = СтрокаJSON + """currency"":""" + Счет.currency + """,";
                СтрокаJSON = СтрокаJSON + """notes"":""" + Счет.notes + """,";
                СтрокаJSON = СтрокаJSON + """status"":""" + Счет.status + """";
                СтрокаJSON = СтрокаJSON + "}";
			КонецЦикла;
            СтрокаJSON = СтрокаJSON + "],";
            СтрокаJSON = СтрокаJSON + """total"":" + Формат(МассивСчетов.Количество(), "ЧГ=") + ",";
            СтрокаJSON = СтрокаJSON + """timestamp"":""" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd ВФ=HH:mm:ss") + """";
            СтрокаJSON = СтрокаJSON + "}";
            
            ЗаписатьВФайл(ИмяФайлаЛога, СтрокаJSON);

			// Логируем успех
            ЗаписатьВФайл(ИмяФайлаЛога, Формат(ДатаВремя, "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - Успешно: " + МассивСчетов.Количество() + " счетов" + Символы.ПС);
            
            // Возвращаем результат (самый простой способ)
          //  Ответ.УстановитьТелоИзСтроки(СтрокаJSON);    
			
			        // Ответ
        //Ответ = Новый HTTPСервисОтвет(200);
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8);
        Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

             ЗаписатьВФайл(ИмяФайлаЛога, "Все ok 1");
           
        Иначе
            // Неверный action
            СтрокаJSON = "{""error"":""Неизвестное действие""}";
            Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
            Ответ.КодСостояния = 400;
        КонецЕсли;
        
    Исключение
        // Обработка ошибки
        ТекстОшибки = ОписаниеОшибки();
        
        // Логируем ошибку
        ЗаписатьВФайл(ИмяФайлаЛога, Формат(ДатаВремя, "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - ОШИБКА: " + ТекстОшибки + Символы.ПС);
        
        // Возвращаем ошибку
        СтрокаJSON = "{""error"":""Ошибка сервера""}";
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        Ответ.КодСостояния = 500;
    КонецПопытки;
             ЗаписатьВФайл(ИмяФайлаЛога, "Все ok 2");    
    Возврат Ответ;
    
КонецФункции

// Функция получения реальных исходящих счетов из базы 1С
Функция ПолучитьРеальныеИсходящиеСчета(Лимит)
    
    МассивСчетов = Новый Массив;
    
    Попытка
        // Создаем запрос к базе данных 1С для получения исходящих счетов
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ " + Лимит + "
        |    СчетаНаОплатуПокупателю.Номер КАК НомерСчета,
        |    СчетаНаОплатуПокупателю.Дата КАК ДатаСчета,
        |    СчетаНаОплатуПокупателю.Контрагент.Наименование КАК НаименованиеКонтрагента,
        |    СчетаНаОплатуПокупателю.СуммаДокумента КАК СуммаДокумента,
        |    СчетаНаОплатуПокупателю.ВалютаДокумента.Код КАК КодВалюты,
        |    СчетаНаОплатуПокупателю.Комментарий КАК Комментарий,
        |    ВЫБОР
        |        КОГДА СчетаНаОплатуПокупателю.Проведен = ИСТИНА ТОГДА ""posted""
        |        ИНАЧЕ ""draft""
        |    КОНЕЦ КАК СтатусДокумента
        |ИЗ
        |    Документ.СчетНаОплатуПокупателю КАК СчетаНаОплатуПокупателю
        |ГДЕ
        |    СчетаНаОплатуПокупателю.Проведен = ИСТИНА
        |    И СчетаНаОплатуПокупателю.ПометкаУдаления = ЛОЖЬ
        |    И СчетаНаОплатуПокупателю.Дата >= &НачалоПериода
        |УПОРЯДОЧИТЬ ПО
        |    СчетаНаОплатуПокупателю.Дата УБЫВ";
        
        // Устанавливаем параметр - последние 3 месяца
        Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -3)));
        
        // Выполняем запрос
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        // Обрабатываем результаты
        Пока Выборка.Следующий() Цикл
            СчетСтруктура = Новый Структура;
            СчетСтруктура.Вставить("invoiceNumber", СокрЛП(Выборка.НомерСчета));
            СчетСтруктура.Вставить("date", Формат(Выборка.ДатаСчета, "ДФ=yyyy-MM-dd"));
            СчетСтруктура.Вставить("client", СокрЛП(Выборка.НаименованиеКонтрагента));
            СчетСтруктура.Вставить("amount", Выборка.СуммаДокумента);
            СчетСтруктура.Вставить("currency", СокрЛП(Выборка.КодВалюты));
            СчетСтруктура.Вставить("notes", СокрЛП(Выборка.Комментарий));
            СчетСтруктура.Вставить("status", СокрЛП(Выборка.СтатусДокумента));
            
            МассивСчетов.Добавить(СчетСтруктура);
        КонецЦикла;
        
        // Логируем успешное получение данных
        ЗаписатьВФайл("c:\temp\erp_outgoing_debug.txt", 
            Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + 
            " - Получено из базы: " + МассивСчетов.Количество() + " реальных счетов" + Символы.ПС);
        
    Исключение
        // Если произошла ошибка с запросом, логируем и возвращаем пустой массив
        ТекстОшибки = ОписаниеОшибки();
        ЗаписатьВФайл("c:\temp\erp_outgoing_debug.txt", 
            Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + 
            " - ОШИБКА запроса к базе: " + ТекстОшибки + Символы.ПС);
    КонецПопытки;
    
    Возврат МассивСчетов;
    
КонецФункции

// Функция получения позиций счета
Функция ПолучитьПозицииСчета(СсылкаНаСчет)
    
    МассивПозиций = Новый Массив;
    
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ
        |    СчетНаОплатуТовары.Номенклатура КАК Номенклатура,
        |    СчетНаОплатуТовары.Количество КАК Количество,
        |    СчетНаОплатуТовары.Цена КАК Цена,
        |    СчетНаОплатуТовары.Сумма КАК Сумма
        |ИЗ
        |    Документ.СчетНаОплату.Товары КАК СчетНаОплатуТовары
        |ГДЕ
        |    СчетНаОплатуТовары.Ссылка = &Ссылка";
        
        Запрос.УстановитьПараметр("Ссылка", СсылкаНаСчет);
        
        РезультатЗапроса = Запрос.Выполнить();
        ВыборкаПозиций = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаПозиций.Следующий() Цикл
            
            СтруктураПозиции = Новый Структура;
            
            // Наименование товара/услуги
            Если ЗначениеЗаполнено(ВыборкаПозиций.Номенклатура) Тогда
                СтруктураПозиции.Вставить("productName", Строка(ВыборкаПозиций.Номенклатура));
            Иначе
                СтруктураПозиции.Вставить("productName", "Неизвестный товар");
            КонецЕсли;
            
            // Количество
            Если ТипЗнч(ВыборкаПозиций.Количество) = Тип("Число") Тогда
                СтруктураПозиции.Вставить("quantity", ВыборкаПозиций.Количество);
            Иначе
                СтруктураПозиции.Вставить("quantity", 1);
            КонецЕсли;
            
            // Цена
            Если ТипЗнч(ВыборкаПозиций.Цена) = Тип("Число") Тогда
                СтруктураПозиции.Вставить("price", ВыборкаПозиций.Цена);
            Иначе
                СтруктураПозиции.Вставить("price", 0);
            КонецЕсли;
            
            // Сумма
            Если ТипЗнч(ВыборкаПозиций.Сумма) = Тип("Число") Тогда
                СтруктураПозиции.Вставить("total", ВыборкаПозиций.Сумма);
            Иначе
                СтруктураПозиции.Вставить("total", 0);
            КонецЕсли;
            
            МассивПозиций.Добавить(СтруктураПозиции);
            
        КонецЦикла;
        
    Исключение
        // При ошибке возвращаем пустой массив
        ТекстОшибки = ОписаниеОшибки();
        ЗаписатьВФайл("c:\temp\erp_outgoing_debug.txt", Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy ВФ=HH:mm:ss") + " - ОШИБКА получения позиций счета: " + ТекстОшибки + Символы.ПС);
        МассивПозиций = Новый Массив;
    КонецПопытки;
    
    Возврат МассивПозиций;
    
КонецФункции

// Функция определения статуса оплаты
Функция ПолучитьСтатусОплатыСчета(СсылкаНаСчет)
    
    Попытка
        // Запрос оплат по счету
        Запрос = Новый Запрос;
        Запрос.Текст = "
        |ВЫБРАТЬ
        |    СУММА(ПоступлениеНаРасчетныйСчет.Сумма) КАК СуммаОплат
        |ИЗ
        |    Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
        |ГДЕ
        |    ПоступлениеНаРасчетныйСчет.СчетНаОплату = &Счет
        |    И ПоступлениеНаРасчетныйСчет.Проведен";
        
        Запрос.УстановитьПараметр("Счет", СсылкаНаСчет);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        Если РезультатЗапроса.Пустой() Тогда
            Возврат "unpaid";
        КонецЕсли;
        
        ВыборкаОплат = РезультатЗапроса.Выбрать();
        ВыборкаОплат.Следующий();
        
        СуммаОплат = ВыборкаОплат.СуммаОплат;
        
        // Получаем сумму счета
        СуммаСчета = СсылкаНаСчет.СуммаДокумента;
        
        Если СуммаОплат = 0 Тогда
            Возврат "unpaid";
        ИначеЕсли СуммаОплат >= СуммаСчета Тогда
            Возврат "paid";
        Иначе
            Возврат "partial";
        КонецЕсли;
        
    Исключение
        // При ошибке считаем неоплаченным
        Возврат "unpaid";
    КонецПопытки;
    
КонецФункции

// Функция формирования JSON ответа вручную
Функция СформироватьОтветJSON(МассивСчетов)
    
    СтрокаJSON = "{";
    СтрокаJSON = СтрокаJSON + """invoices"":[";
    
    Для Индекс = 0 По МассивСчетов.ВГраница() Цикл
        Счет = МассивСчетов[Индекс];
        
        Если Индекс > 0 Тогда
            СтрокаJSON = СтрокаJSON + ",";
        КонецЕсли;
        
        СтрокаJSON = СтрокаJSON + "{";
        СтрокаJSON = СтрокаJSON + """invoiceNumber"":""" + ОчиститьСтрокуДляJSON(Счет.invoiceNumber) + """,";
        СтрокаJSON = СтрокаJSON + """clientName"":""" + ОчиститьСтрокуДляJSON(Счет.clientName) + """,";
        СтрокаJSON = СтрокаJSON + """totalAmount"":" + Формат(Счет.totalAmount, "ЧДЦ=2; ЧРД=.; ЧГ=") + ",";
        СтрокаJSON = СтрокаJSON + """currency"":""" + ОчиститьСтрокуДляJSON(Счет.currency) + """,";
        СтрокаJSON = СтрокаJSON + """date"":""" + Формат(Счет.date, "ДФ=yyyy-MM-dd") + """,";
        СтрокаJSON = СтрокаJSON + """status"":""" + ОчиститьСтрокуДляJSON(Счет.status) + """,";
        СтрокаJSON = СтрокаJSON + """clientTaxCode"":""" + ОчиститьСтрокуДляJSON(Счет.clientTaxCode) + """,";
        СтрокаJSON = СтрокаJSON + """paymentStatus"":""" + ОчиститьСтрокуДляJSON(Счет.paymentStatus) + """,";
        СтрокаJSON = СтрокаJSON + """itemsCount"":" + Счет.itemsCount + ",";
        СтрокаJSON = СтрокаJSON + """managerName"":""" + ОчиститьСтрокуДляJSON(Счет.managerName) + """";
        СтрокаJSON = СтрокаJSON + "}";
    КонецЦикла;
    
    СтрокаJSON = СтрокаJSON + "],";
    СтрокаJSON = СтрокаJSON + """total"":" + МассивСчетов.Количество() + ",";
    СтрокаJSON = СтрокаJSON + """timestamp"":""" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd ВФ=HH:mm:ss") + """";
    СтрокаJSON = СтрокаJSON + "}";
    
    Возврат СтрокаJSON;
    
КонецФункции

// Функция получения дополнительных данных счета
Функция ПолучитьДополнительныеДанныеСчета(СсылкаДокумента)
    
    Результат = Новый Структура;
    Результат.Вставить("КодНалогоплательщика", "");
    Результат.Вставить("СтатусОплаты", "unpaid");
    Результат.Вставить("КоличествоПозиций", 0);
    Результат.Вставить("ИмяМенеджера", "");
    
    Попытка
        // Получаем объект документа
        ДокументОбъект = СсылкаДокумента.ПолучитьОбъект();
        
        Если ДокументОбъект <> Неопределено Тогда
            // Код налогоплательщика контрагента
            Если ДокументОбъект.Контрагент <> Неопределено Тогда
                Попытка
                    Результат.КодНалогоплательщика = СокрЛП(ДокументОбъект.Контрагент.ИНН);
                    Если ПустаяСтрока(Результат.КодНалогоплательщика) Тогда
                        Результат.КодНалогоплательщика = СокрЛП(ДокументОбъект.Контрагент.КПП);
                    КонецЕсли;
                Исключение
                    // Игнорируем ошибки получения ИНН/КПП
                КонецПопытки;
            КонецЕсли;
            
            // Менеджер
            Если ДокументОбъект.Свойство("Ответственный") И ДокументОбъект.Ответственный <> Неопределено Тогда
                Результат.ИмяМенеджера = СокрЛП(ДокументОбъект.Ответственный.Наименование);
            КонецЕсли;
            
            // Количество позиций товаров
            Если ДокументОбъект.Свойство("Товары") Тогда
                Результат.КоличествоПозиций = ДокументОбъект.Товары.Количество();
            КонецЕсли;
            
            // Статус оплаты (упрощенная логика)
            Если ДокументОбъект.Проведен Тогда
                Результат.СтатусОплаты = "confirmed";
            Иначе
                Результат.СтатусОплаты = "draft";
            КонецЕсли;
        КонецЕсли;
        
    Исключение
        // В случае ошибки возвращаем значения по умолчанию
    КонецПопытки;
    
    Возврат Результат;
    
КонецФункции

// Функция очистки строк для JSON (экранирование кавычек и спецсимволов)
Функция ОчиститьСтрокуДляJSON(Строка)
    
    Если Строка = Неопределено Тогда
        Возврат "";
    КонецЕсли;
    
    Результат = СокрЛП(Строка);
    
    // Экранируем кавычки и спецсимволы для JSON
    Результат = СтрЗаменить(Результат, "\", "\\");  // Обратная косая черта
    Результат = СтрЗаменить(Результат, """", "\"""); // Кавычки
    Результат = СтрЗаменить(Результат, Символы.ПС, "\n"); // Перевод строки
    Результат = СтрЗаменить(Результат, Символы.ВК, "\r"); // Возврат каретки
    Результат = СтрЗаменить(Результат, Символы.Таб, "\t"); // Табуляция
    
    Возврат Результат;
    
КонецФункции

// Функция записи в файл
Процедура ЗаписатьВФайл(ИмяФайла, Текст)