#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö 1–° endpoints –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */

async function testFixed1CEndpoints() {
    console.log('=== –¢–ï–°–¢ –í–ò–ü–†–ê–í–õ–ï–ù–ò–• 1–° ENDPOINTS ===\n');
    
    const baseUrl = 'http://baf.regmik.ua/bitrix/hs/erp';
    const auth = Buffer.from('100:–®–∫–æ–ú.').toString('base64');
    
    console.log('1. –¢–µ—Å—Ç –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑ action –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:');
    const outgoingUrl = baseUrl + '/outgoing-invoices';
    
    try {
        console.log(`   POST –Ω–∞: ${outgoingUrl}`);
        console.log(`   Body: {"action": "getOutgoingInvoices", "limit": 100}`);
        
        const response = await fetch(outgoingUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Basic ${auth}`,
                'User-Agent': 'REGMIK-ERP/1.0'
            },
            body: JSON.stringify({
                action: 'getOutgoingInvoices',
                limit: 100
            })
        });
        
        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ: ${data.invoices?.length || 0} –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤`);
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                console.log(`   üìÑ –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${invoice.invoiceNumber || invoice.–ù–æ–º–µ—Ä–°—á–µ—Ç–∞ || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
            }
        } else {
            const errorText = await response.text();
            console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 200)}`);
        }
        
    } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
    }
    
    console.log('\n2. –¢–µ—Å—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è):');
    const invoicesUrl = baseUrl + '/invoices';
    
    try {
        console.log(`   POST –Ω–∞: ${invoicesUrl}`);
        console.log(`   Body: {"action": "getInvoices", "limit": 100}`);
        
        const response = await fetch(invoicesUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': `Basic ${auth}`,
                'User-Agent': 'REGMIK-ERP/1.0'
            },
            body: JSON.stringify({
                action: 'getInvoices',
                limit: 100
            })
        });
        
        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ! –û—Ç—Ä–∏–º–∞–Ω–æ: ${data.invoices?.length || 0} –≤—Ö—ñ–¥–Ω–∏—Ö –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö`);
            if (data.invoices && data.invoices.length > 0) {
                const invoice = data.invoices[0];
                console.log(`   üìÑ –ü–µ—Ä—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞: ${invoice.documentNumber || invoice.–ù–æ–º–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–∞ || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`);
            }
        } else {
            const errorText = await response.text();
            console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${errorText.substring(0, 200)}`);
        }
        
    } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${error.message}`);
    }
    
    console.log('\n=== –ü–Ü–î–°–£–ú–û–ö ===');
    console.log('‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–¥–∞–Ω–æ action=getOutgoingInvoices –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: POST /outgoing-invoices –∑ {"action": "getOutgoingInvoices", "limit": 100}');
    console.log('‚úÖ –ö–æ–¥ ERP –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤');
}

testFixed1CEndpoints().catch(console.error);