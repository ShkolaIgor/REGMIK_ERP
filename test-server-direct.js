/**
 * –ü—Ä—è–º–∏–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ API endpoint
 */

import { spawn } from 'child_process';
import http from 'http';

console.log("=== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –¢–ê –¢–ï–°–¢ API ===");

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
console.log("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...");
const serverProcess = spawn('npx', ['tsx', 'server/index.ts'], {
  stdio: 'inherit',
  env: { ...process.env, NODE_ENV: 'development' }
});

// –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
setTimeout(async () => {
  console.log("üîç –¢–µ—Å—Ç—É—é API endpoint...");
  
  try {
    const response = await fetch('http://localhost:5000/api/1c/outgoing-invoices');
    console.log(`üì° HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ API –ø—Ä–∞—Ü—é—î! –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–∞—Ö—É–Ω–∫—ñ–≤: ${data.length}`);
      
      if (data.length > 0) {
        console.log("üìÑ –ü–µ—Ä—à–∏–π —Ä–∞—Ö—É–Ω–æ–∫:", JSON.stringify(data[0], null, 2));
      } else {
        console.log("‚ö†Ô∏è API –ø—Ä–∞—Ü—é—î, –∞–ª–µ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ");
      }
    } else {
      const errorText = await response.text();
      console.log(`‚ùå API –ø–æ–º–∏–ª–∫–∞: ${response.status} - ${errorText}`);
    }
  } catch (error) {
    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ API: ${error.message}`);
    console.log("üîß Fallback –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ —É frontend");
  }
  
  // –ó—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤–µ—Ä
  console.log("üõë –ó—É–ø–∏–Ω—è—é —Å–µ—Ä–≤–µ—Ä...");
  serverProcess.kill();
  process.exit(0);
}, 5000);