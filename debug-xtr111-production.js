/**
 * Production debugging –¥–ª—è XTR111 –ø—Ä–æ–±–ª–µ–º–∏ - —Ñ–æ–∫—É—Å –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö –Ω–∞–∑–≤–∞—Ö
 */

import { DatabaseStorage } from './server/db-storage.js';

async function debugXTR111Production() {
  console.log('üî• DEBUG XTR111 PRODUCTION - –ê–ù–ì–õ–Ü–ô–°–¨–ö–Ü –ù–ê–ó–í–ò');
  
  const storage = new DatabaseStorage();
  
  try {
    // 1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ XTR/XL –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑ —ó—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
    console.log('\nüìã –í–°–Ü XTR/XL –ö–û–ú–ü–û–ù–ï–ù–¢–ò –í –ë–ê–ó–Ü:');
    const allComponents = await storage.getComponents();
    const relevantComponents = allComponents.filter(c => 
      c.name.toLowerCase().includes('xtr') || 
      c.name.toLowerCase().includes('xl2596')
    );
    
    relevantComponents.forEach(c => {
      console.log(`   ID: ${c.id}, –ù–∞–∑–≤–∞: "${c.name}"`);
      
      // –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—é
      const normalized = c.name.toLowerCase()
        .replace(/[–∞-—è—ë—ñ—ó]/g, (char) => {
          const map = {
            '–∞': 'a', '–≤': 'b', '—Å': 'c', '–µ': 'e', '–Ω': 'h', '–∫': 'k', '–º': 'm', '–æ': 'o', '—Ä': 'p', '—Ç': 't', '—É': 'y', '—Ö': 'x', '—Ñ': 'f', '—ñ': 'i', '—ó': 'i', '—î': 'e', '“ë': 'g'
          };
          return map[char] || char;
        })
        .replace(/[^\w]/g, '');
      
      console.log(`       –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: "${normalized}"`);
      
      // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–¥–∏ –º–æ–¥–µ–ª–µ–π
      const codes = normalized.match(/[a-z]+\d+[a-z]*/g) || [];
      console.log(`       –ö–æ–¥–∏ –º–æ–¥–µ–ª–µ–π: [${codes.join(', ')}]`);
    });
    
    // 2. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø–æ—à—É–∫ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
    console.log('\nüîç –¢–ï–°–¢ –ü–û–®–£–ö–£ "–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111":');
    
    const testName = "–ú—ñ–∫—Ä–æ—Å—Ö–µ–º–∞ XTR111";
    const testNormalized = testName.toLowerCase()
      .replace(/[–∞-—è—ë—ñ—ó]/g, (char) => {
        const map = {
          '–∞': 'a', '–≤': 'b', '—Å': 'c', '–µ': 'e', '–Ω': 'h', '–∫': 'k', '–º': 'm', '–æ': 'o', '—Ä': 'p', '—Ç': 't', '—É': 'y', '—Ö': 'x', '—Ñ': 'f', '—ñ': 'i', '—ó': 'i', '—î': 'e', '“ë': 'g'
        };
        return map[char] || char;
      })
      .replace(/[^\w]/g, '');
      
    console.log(`–ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫: "${testNormalized}"`);
    
    const testCodes = testNormalized.match(/[a-z]+\d+[a-z]*/g) || [];
    console.log(`–ö–æ–¥–∏ –≤ –ø–æ—à—É–∫—É: [${testCodes.join(', ')}]`);
    
    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–∂–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –∑–±—ñ–≥
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ñ–ù–û–ì–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê:');
    
    relevantComponents.forEach(component => {
      const compNormalized = component.name.toLowerCase()
        .replace(/[–∞-—è—ë—ñ—ó]/g, (char) => {
          const map = {
            '–∞': 'a', '–≤': 'b', '—Å': 'c', '–µ': 'e', '–Ω': 'h', '–∫': 'k', '–º': 'm', '–æ': 'o', '—Ä': 'p', '—Ç': 't', '—É': 'y', '—Ö': 'x', '—Ñ': 'f', '—ñ': 'i', '—ó': 'i', '—î': 'e', '“ë': 'g'
          };
          return map[char] || char;
        })
        .replace(/[^\w]/g, '');
        
      const compCodes = compNormalized.match(/[a-z]+\d+[a-z]*/g) || [];
      
      console.log(`\n   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: "${component.name}" (ID: ${component.id})`);
      console.log(`   –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π: "${compNormalized}"`);
      console.log(`   –ö–æ–¥–∏: [${compCodes.join(', ')}]`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–±—ñ–≥–∏ –∫–æ–¥—ñ–≤
      const exactMatches = testCodes.filter(testCode => 
        compCodes.some(compCode => testCode === compCode || compCode.includes(testCode) || testCode.includes(compCode))
      );
      
      if (exactMatches.length > 0) {
        console.log(`   ‚úÖ –ó–ë–Ü–ì –ö–û–î–Ü–í: [${exactMatches.join(', ')}]`);
        
        // –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ score
        let score = 0;
        exactMatches.forEach(match => {
          score += match.length * 100; // –ë–∞–∑–æ–≤–∏–π score –∑–∞ –∑–±—ñ–≥
          if (compCodes.some(code => code === match)) {
            score += 1500; // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
          }
        });
        
        console.log(`   üìä SCORE: ${score}`);
      } else {
        console.log(`   ‚ùå –ù–µ–º–∞—î –∑–±—ñ–≥—ñ–≤ –∫–æ–¥—ñ–≤`);
      }
    });
    
    // 4. –í–∏–∫–æ–Ω–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
    console.log('\nüéØ –†–ï–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–õ–ì–û–†–ò–¢–ú–£:');
    const result = await storage.findSimilarComponent(testName);
    
    if (result) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: "${result.name}" (ID: ${result.id})`);
    } else {
      console.log(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    }
    
    // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –≤ –∑–∞–ø–∏—Ç–∞—Ö
    console.log('\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –û–ë–ú–ï–ñ–ï–ù–¨ –£ –ó–ê–ü–ò–¢–ê–•:');
    console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${allComponents.length}`);
    console.log(`XTR/XL –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: ${relevantComponents.length}`);
    
    // –®—É–∫–∞—Ç–∏ .limit() –≤ –∫–æ–¥—ñ
    console.log('\n–ü–µ—Ä–µ—Ä–≤–µ–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É...');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ
debugXTR111Production().catch(console.error);